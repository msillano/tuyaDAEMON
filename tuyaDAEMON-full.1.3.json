[{"id":"173260fb.d021ff","type":"tab","label":"TuyaDAEMON.core","disabled":false,"info":"The **tuyaDAEMON flow** handles all _tuya-nodered_ basic communications, giving you a (quasi) complete bidirectional integration with tuya cloud.\n\nThis project offers strong isolation from tuya communication details, the safe and controlled use of  _tuya-smart-device_ node capabilities,  protection from the device's firmware quirks (unluckily many devices accepts only a sub-set of standard tuya commands) and user-friendly device names.\n\n**Main features:**\n \n -  transforms the `id/cid` index to user-friendly `device-name` and vice-versa.\n -  transforms the `dps` index to user-friendly `attribute-name` and vice-versa.\n -  processes `i/o data` as required to/from user `standard units`.\n -  filters all user requests, sending only the  allowed ones, on a `device/dps` basis.\n -  easy handles a  `zigbee gateway` device, allowing complete control over zigbee battery-powered devices.\n -  allows the use of features present in your devices but not exploited by _smartlive_ app.\n -  define custom devices and attributes to handle system features (e.g. connection).\n\n\nUsing the addon **tuyaTRIGGER** flow you get:\n\n - the capability to echo to node-red all tuya events from `any device` (mirrowing). This is required to work with devices not caught by _tuya-smart-device_ node, like WiFi battery-powered devices  or like IR remote controls  (limit: node-red can't access the tuya numerical values).\n\n -  handles custom triggers `from smartLife` to start node_red flows.\n \n -  sends custom triggers `to cloud` to start ad hoc automation.\n \n**Globals:**\n \nFor every captured message, TuyaDAEMON:\n 1. updates the node-red `global.tuyastatus` object, accessible from all your custom flows.\n 2. saves the data to a `tuyathome.messages` table in a DB mySQL.\n 3. on selected messages can fire a custum flow\n\n**global.tuyastatus**: is a strucuture RT updated, with all data from devices and smartLife.\n Uses device-names and attribute-names. The values are in standard units.\nexamples: \n-  `tuyastatus.tuya_bridge.switch` = \"OFF\"\n-  `tuyastatus[\"Temperature 3\"].Temperatura` = 19  (in Â°C)\n-  `tuyastatus[\"Smart IR 2\"].connected`  = true\n-  `tuyastatus[\"Termosifone 2\"][\"HDay target Temperture\"]` =      \"[16,16,16,16,16,16,16,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0]\"\n\n User custom automation, user devices, user interfaces, not available in smartlife app, can be developped on **node-red** in separate flows, using only:\n    - device-name and attribute-names.\n    - data standard values\n    - the `global.tuyastatus` object.\n \n\n**mySQL \"tuyathome.messages\" table**: it is used to log all messages (or only the filtered messages), using `id/cid` and device-name, `dps` and data-name, processed and unprocessed `values`.\n \n Debug of new devices, historical data statistics, user interfaces can be done in any language (e.g. php) using the data stored in mySQL.\n\n**Customization**\n\nThis flow **must** be customized to meet your environement and your available devices.\nMany options are defined inside `global.alldevice`: a data structure user defined in the `setup` node, but **tuyaDAEMON** flow require nevertheless some node customization: for your convenience _the nodes with an asterisk \"*\" on the nome MUST be updated, and detailed instructions are in the node help._\n\n**notes**\n- the use of index like `deviceId`, _cid_, and `dps` is restricted to tuyaDAEMON.\n- the `global.tuyastatus` structure and the DB records uses `device-name` and  `attribute-name`, as defined in `alldevice` structure. The device's names used by **smartlife app** (and _Google home_) can be different, to better fit **Google-nest** vocal exigences.\n\n\nTested using 20+ different Tuya devices.\n\n**TuyaDAEMON devices archive**\n\nA DB structure to store all the useful information of Tuya devices. It can be used:\n- as reference material for TuyaDAEMON users (produces a pdf page for device)\n- as a `global.alldevice` JSON generator to limit the analize effort only to new devices.\n\nClonable and open to all contributions.\n_Soon (work in progress)_.\n\n"},{"id":"638c6657.ce65c8","type":"tab","label":"tuyaDAEMON.triggers","disabled":false,"info":"**addon for tuyaDAEMON flow**\n\nThis addon enables **tuyaDAEMON TRIGGERS** handling and extends tuyaDAEMON capabilities to get a very strict integration of tuya-cloud with node-red.\n\n_Triggers can be used:_\n - to reflect in _node-red_ some **tuya events** from devices and sensors that are not caught by the _tuya-smart-device_ node, e.g. WiFi battery-powered sensors (`mirroring TRIGGER`)\n \n - to perform a ** command or smart action ** (automation) on tuya (_smartlife_), activated by _node-red_ (`REDTRIGGER`)\n \n - to run a **flow on node-red ** activated by tuya (_smartlife_), in Smart Scene Automation (`TUYATRIGGER`), due to user actions or weather conditions, geolocation or changes in the status of the tuya devices.\n \n - to fire a **node-red flow** when a device message satisfies some conditions, even more complex than those expressed in _smartlife_. (`EVNTRIGGER`)\n\n \n**Precondition:**\n\nRequires a _real device_ having a big unused parameter, writable from both Tuya and node-red.\n\n_I chose the_ Switch MS-104 _because its countdown parameter is with a large range [0-86400] and still this device can be used as WiFi switch. Plus it is small and cheap._"},{"id":"4bebbdfa.41af64","type":"tab","label":"tuyaDAEMON.mirror.devices","disabled":false,"info":"This flow contains \n - some TRIGGER examples\n - all mirror devices on the system"},{"id":"d02ad611.d94bc8","type":"tab","label":"tuyaDEAEMON.extra.test devices","disabled":false,"info":""},{"id":"b10f9b24.3fb858","type":"tab","label":"minimal for node-red app","disabled":true,"info":"# tuyaTRIGGER for node-red users\n\n_This flow enables node-red users to add remote control and voice control to their projects in a simple way._\n\n![](./../../pics/tuyadaemon06.jpg)\n\nIt uses the `tuya cloud` and only `one switch` device: because _Smartlife_ app and the use of  _Tuya cloud_ are free, only you need to buy the device (USD 8-10), used as dual port register. Requires WiFi.\n\nOn your _smartlife_ app you can create up to 100 buttons to activate your TRIGGER (e.g. 1800, 1810... 1890), you can enable up to 20 other users and you get worldwide remote control over your node-red flows. Button names and icons are customizable.\n\nIf you want, Googlehome can also add _voice control_ to your TRIGGER.\n\nThis is a downsizing of [tuyaTRIGGER](https://github.com/msillano/tuyaDAEMON/tree/main/tuyaTRIGGER), created to _integrate node-red into the tuya ecosystem for home automation_. Watch it for more details on devices tested for this use.\n\n- Install in node-red the node (I use 'manage pallette'): [node-red-contrib-tuya-smart-device](https://github.com/vinodsr/node-red-contrib-tuya-smart-device)\n- To use this node, you need the 'id' and 'key' of your device: see [here](https://github.com/codetheweb/tuyapi/blob/master/docs/SETUP.md)\n-_note: based on switch used, you may must change the 'data point' used by the counter: change it in nodes 'send ACK' and 'trigger selector'._\n"},{"id":"ee953c15.ada29","type":"subflow","name":"connected","info":"Handles tuya device status changes.\r\n\r\n\r\nProcesses the status of a real device , if the connection status changes:\r\n   - Creates a log msg (deviceId, \"_connected\", true/false) for standard processing\r\n \r\nIMPORTANT: set the ** deviceID ** parameter with the correct ID value.","category":"","in":[{"x":80,"y":80,"wires":[{"id":"6160136.f5f99ec"}]}],"out":[{"x":440,"y":80,"wires":[{"id":"6160136.f5f99ec","port":0}]}],"env":[{"name":"deviceId","type":"str","value":""}],"color":"#DDAA99","icon":"font-awesome/fa-rss-square"},{"id":"66ca1554.e4c85c","type":"subflow","name":"red trigger","info":"Build a REDTRG msg for tuya_bridge device.\n\nREDTRG values are in range 2000-3000 (convention)\n\nNote: it uses dp 102 (for  [Switch MS-104]). \nChange the code if your tuya-bridge device uses a different dp.","category":"","in":[{"x":60,"y":80,"wires":[{"id":"f0932848.b39158"}]}],"out":[{"x":360,"y":80,"wires":[{"id":"f0932848.b39158","port":0}]}],"env":[{"name":"TRGnumber","type":"str","value":"800"}],"color":"#A6BBCF","inputLabels":["any msg"],"outputLabels":["continue"],"icon":"font-awesome/fa-arrow-right"},{"id":"81d3b584.14c888","type":"subflow","name":"mirror msg","info":"Build an update message for 'mirror' devices.\n\nUsed to process tuyaTRIGGERS.\n\n- `deviceID`: the 'mirror' device ID or CID\n- `fakeDP`: the data point id. Convention: user defined, equal to related tuyaTRIGGER, number (1000-2000). \n- `value`: the new value. If the value starts with '@', then it is eval()ued: exemple '@msg.payoad.set' => eval('msg.payoad.set'))\n\nnote: The 'mirror' device MUST exist in the `fake` branch of **alldevices**.","category":"","in":[{"x":120,"y":80,"wires":[{"id":"6d1b2b8f.c5e554"}]}],"out":[{"x":460,"y":80,"wires":[{"id":"6d1b2b8f.c5e554","port":0}]}],"env":[{"name":"deviceID","type":"str","value":""},{"name":"fakeDP","type":"str","value":""},{"name":"value","type":"str","value":""}],"color":"#87A980","icon":"node-red/debug.svg"},{"id":"7e3077c8.ff8e88","type":"MySQLdatabase","name":"","host":"127.0.0.1","port":"3306","db":"tuyathome","tz":"","charset":"UTF8"},{"id":"6160136.f5f99ec","type":"function","z":"ee953c15.ada29","name":"device connected message","func":"// set DIRECTLY global.tuyasyatus.xxxx._connected \n// send msg every change call only as trigger\n// version 1.1 (use of _callJSONMethod)\n\nvar CONN = \"_connected\";  //  tuyadaemon internal define\n// see also tuyaDAEMON.\"connection check\" function\n// local function\nfunction _sendReal(idevice, name, value){\n// builds a fake OUT message \nvar newMsg = { \"payload\":{\n      \"deviceId\": idevice,\n      \"deviceName\": name,\n      \"data\": {\n          \"dps\":{\n              \"_connected\":value\n          }}}};\nreturn newMsg;  \n}\n\n// stuff to acces global.alldevices\nvar alldevices = global.get(\"alldevices\");\nif (alldevices === undefined) return null;\n// user set id\nvar deviceId = env.get(\"deviceId\");\n// only real devices are connected\nvar dev = alldevices.real.find(device => device.id === deviceId);\nif (dev === undefined) return null;\n// found... logic process:\nvar nowconnected =  (msg.status.text == \"connected\");        // can change\nreturn(_sendReal(deviceId, dev.name, nowconnected) );\n \n\n\n\n\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// set the default status _connected to true in tuyastatus\n// creates tuyastatus entry to null.\nvar alldevices = global.get(\"alldevices\");\nif (alldevices === undefined) return null;\nvar deviceId = env.get(\"deviceId\");\nvar d = alldevices.real.find(device => device.id === deviceId);\nif (d === undefined) return null;\n//\nvar tuyastatus = global.get(\"tuyastatus\");\n    if (tuyastatus == undefined)\n        tuyastatus = {};\n    if (tuyastatus[d.name] === undefined) {\n        tuyastatus[d.name] = {_connected:null};\n        global.set(\"tuyastatus\", tuyastatus);\n    }\n    ","finalize":"","x":260,"y":80,"wires":[[]]},{"id":"f0932848.b39158","type":"function","z":"66ca1554.e4c85c","name":"send  X TRIGGER","func":"const triggerDP = 7;  // tuya-bridge countdown\n// normal use: no msg.payload.data.dps[triggerDP]\n// ack use:   msg.payload.data.dps[triggerDP] > 800\n if ((msg.payload.data != undefined) && (msg.payload.data.dps != undefined) && (msg.payload.data.dps[triggerDP] < 800))\n    return null;\nvar n = env.get(\"TRGnumber\");\nvar trig = {\n       \"payload\": {\n          \"dps\":triggerDP, \n          \"set\": parseInt(n)       \n          }\n}\n\nreturn trig ;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\nflow.set(\"tsstart\", null);\nflow.set(\"pingstat\",{\n      total:1,\n      test: 0,\n      sum:0,\n      min: 100000000000,\n      max:0\n});\n","finalize":"","x":210,"y":80,"wires":[[]]},{"id":"6d1b2b8f.c5e554","type":"function","z":"81d3b584.14c888","name":"do mirror msg","func":"// local function\n// note: the value param can also be a @variable:\n//e.g. \"@msg.payload.set\" => eval(msg.payload.set) \nfunction _sendMirror(idevice, dpname, value) {\n    // builds a fake OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": idevice,\n            \"data\": {\n                \"dps\": {}\n                //          \"dps\":[dpname = value]\n            }\n        }\n    };\n    value = value.toString().trim();\n    if (value.startsWith('@')){\n        value = eval(value.substring(1));\n    }\n    newMsg.payload.data.dps[dpname.toString()] = value;\n    return newMsg;\n}\n\nreturn _sendMirror(env.get(\"deviceID\"), env.get(\"fakeDP\"), env.get(\"value\"));\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":300,"y":80,"wires":[[]]},{"id":"a878b58e.e4ea08","type":"function","z":"173260fb.d021ff","name":"*OUT data process","func":"// sends any message to DB (sql in msg.topic), updates tuyastatus\n// version 1.1 (use of _callJSONMethod)\n//-------------------------------------------\n// Data codification is function of the device and dps.\n// To add a new data format:\n// 1)  Add a new required decoding function() here in the array datadecode[], using a new type_name\n// 2)  Add the dual coding function to \"format command\" node.\n// 3)  Add the new 'TYPE_NAME' in the DB tuyathone.lookupdecode table  (if you use tuyaDAEMON toolkit)\n// 4)  now you can use the new type_name as typefield  in global.alldevices\n\n\nvar datadecode = {\n    // to format values from device messages to standard form\n    // add new functions to array as required\n    BYTESMALLFLOAT: function (value) {\n        // transform byte data on number, then divide 10.\n        // exanple: C3H = 195 => 19.5  (Â°C: units as from device setup)\n        // required by thermostat\n        return (Number(value) / 10.0);\n    },\n\n    BOOLEANONOFF: function (value) {\n        // transform (false, 0, \"\")/true, to 'OFF'/'ON'\n        // en: can be localized for internationalization\n        return (!value ? \"OFF\" : (value == 1 ? \"ON\" : value));\n    },\n   BOOLEANOPENCLOSE: function (value) {\n        // transform (false, 0, \"\")/true, to 'OPEN'/'CLOSE'\n        // en: can be localized for internationalization\n        return (!value ? \"CLOSE\" : (value == 1 ? \"OPEN\" : value));\n    },\n\n    ENUMONOFFHOLD: function (value) {\n        // transform 0/1/2 to OFF/ON/HOLD\n        // changed to use same strings as many switches \n        // en: can be localized for internationalization off|on|memory\n        return (value == 0 ? \"off\" : (value == 1 ? \"on\" : (value == 2 ? \"memory\" : value)));\n    },\n\n    STRUCTARGETTEMP: function (value) {\n        // transform from base64(Uint8Array[17]) to object:\n        //   {\"count\":4,\n        //    \"changes\":[{\"time\":\"00:00\",\"temp\":15.5},\n        //              {\"time\":\"07:00\",\"temp\":20},\n        //              {\"time\":\"16:30\",\"temp\":21},\n        //              {\"time\":\"21:00\",\"temp\":16.5}]}\n        // required by thermostat\n        function minTohm(min) { // local function\n            h = (~~(min / 60));\n            m = min % 60;\n            return (h > 9 ? h : '0' + h) + \":\" + (m > 9 ? m : '0' + m);\n        }\n\n        b = Buffer.from(value, \"base64\");\n        var n = b.readUInt8(0);\n        var result = {\n            count: n,\n            changes: []\n        };\n        for (var i = 0; i < n; i++) {\n            result.changes[i] = {\n                time: minTohm(b.readUInt16BE(i * 4 + 1)),\n                temp: b.readUInt16BE(i * 4 + 3) / 10\n            };\n        }\n        //     return (JSON.stringify(result));\n        return (result);\n    }, // ends function\n\n    ARRAY8INT: function (value) {\n        // transform  base64(Uint8Array[X]) to UInt8[]\n        // X=24 =>  [16,16,15,15,14,14,16,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\"\n        // required by thermostat\n        b = Buffer.from(value, \"base64\");\n        return (\"[\" + new Uint8Array(b).toString() + \"]\");\n    },\n\n    STRUCTTIMEHMS: function (value) {\n        // tentative, on work\n        // transform  base64(Uint16Array[3]) to \"HH:MM:SS\" ??\n        // required by thermostat ??\n        b = Buffer.from(value, \"base64\");\n        const uint16arr = new Uint16Array(\n                b.buffer,\n                b.byteOffset,\n                b.length / Uint16Array.BYTES_PER_ELEMENT);\n        return ((Uint16Array[0] > 9 ? Uint16Array[0] : \"0\" + Uint16Array[0]) + \":\" +\n            (Uint16Array[1] > 9 ? Uint16Array[1] : \"0\" + Uint16Array[1]) + \":\" +\n            (Uint16Array[2] > 9 ? Uint16Array[2] : \"0\" + Uint16Array[2]));\n    },\n\n    STRUCTCOLOUR: function (value) {\n        //  Transforms  RRGGBB0000FFFF to objec\n        //      {   \"hex\":\"RRGGBBHHHHSSVV\" }\n        //  or: {   \"r\": RR,\n        //          \"g\": GG,\n        //          \"b\": BB   \n        //          \"h\":HHHH,\n        //          \"s\": SS,\n        //          \"v\": VV  }\n        // 100% = 0x64\n        // required by humidifier led\n        b = Buffer.from(value, 'hex');\n        var result = {\n            hex: value,\n           };\n        result[\"r\"] = b.readUInt8(0);\n        result[\"g\"] = b.readUInt8(1);\n        result[\"b\"] = b.readUInt8(2);\n        result[\"h\"] = b.readUInt16BE(3)\n        result[\"s\"] = b.readUInt8(5);\n        result[\"v\"] = b.readUInt8(6);\n        return (result);\n    },\n     ENUMHIGHGOODLOW: function(value){\n        // transform 0/1/2 to LOW/GOOD/HIGH\n        // en: can be localized for internationalization\n         return (value == 0 ? \"LOW\" : (value == 1 ? \"GOOD\" : (value == 2 ? \"HIGH\" : value)));\n     },\n      RECMODE: function(value){\n     // transforms string '1'/'2' to  'continuous'/'events' \n      // it|en: can be localized for internationalization\n        return (value == 2 ? \"continuous\" : (value == 1 ? \"events\" : value));\n     },\n    STRUCTINCH:  function(value){\n    b = Buffer.from(value, \"base64\");\n          var result = { \n            inching: (b.readUInt8(0) !== 0),\n            delay:  b.readUInt16BE(1)\n           };\n          return (result);\n     },\n    STRUCTRAND:  function(value){\n       function minTohm(min) { // local function\n            h = (~~(min / 60));\n            m = min % 60;\n            return (h > 9 ? h : '0' + h) + \":\" + (m > 9 ? m : '0' + m);\n        }\n       function daystring(val){\n          var res =\"\" ;\n          week   =\"DLMMGVS\";   // en: SMTWTFS\n          mask  = 1;\n          for (var i=0;i<7;i++){\n              res += (val & mask)? week.charAt(i):'-';\n              mask = mask << 1;             \n              }\n        return (res);\n        }\n           if (value.length < 5) return (value);\n           b = Buffer.from(value, \"base64\");\n           var randdef =[];\n           for(var i = 0; i< b.length / 6; i++){\n               var o = { \n               active: (b.readUInt8(i*6+ 0) !== 0),\n               days: daystring(b.readUInt8(i*6+1)),\n               start:minTohm(b.readUInt16BE(i*6+2)),\n               end:minTohm(b.readUInt16BE(i*6+4))\n               };\n            randdef[randdef.length]=o;\n           }\n        return randdef;\n     },\n   STRUCTREPEAT:  function(value){\n       function minTohm(min) { // local function\n            h = (~~(min / 60));\n            m = min % 60;\n            return (h > 9 ? h : '0' + h) + \":\" + (m > 9 ? m : '0' + m);\n        }\n       function daystring(val){\n          days =\"\" ;\n          week   =\"DLMMGVS\";  // en: SMTWTFS\n          mask  = 1;\n          for (var i=0;i<7;i++){\n              days += (val & mask)? week.charAt(i):'-';\n              mask = mask << 1;             \n              }\n        return (days);\n        }\n        if (value.length < 5) return (value);\n        b = Buffer.from(value, \"base64\");\n        var result =[];\n        for(var i = 0; i< b.length / 10; i++){\n               var o = { \n               active: (b.readUInt8(0) !== i*10+ 0),\n               days: daystring(b.readUInt8(i*10+1)),\n               start:minTohm(b.readUInt16BE(i*10+2)),\n               end:minTohm(b.readUInt16BE(i*10+4)),\n               on:minTohm(b.readUInt16BE(i*10+6)),\n               off:minTohm(b.readUInt16BE(i*10+8))\n               };\n               result[result.length]=o;\n              }\n        return (result);\n     },\n\n    SDSPACES: function(value){\n      // transform <total>|<used>|<free> to object.\n      // en: can be localized for internationalization\n       var sizes = value.split(\"|\");\n        var result = {\n            total: new Intl.NumberFormat().format(Number(sizes[0])),\n            used:  new Intl.NumberFormat().format(Number(sizes[1])),\n            free:  new Intl.NumberFormat().format(Number(sizes[2])),\n        }\n        return (result);\n    }\n};\n// ----------------------------------------------------\n//input: device OUT msg (real)\n//  _msgid: \"1234f3fd.8477fc\"\n//  _event: \"node:1233963.a7d146\"\n//  payload: object\n//     deviceId: \"123455aa196ae5******\"\n//     deviceName: \"*tuya_bridge\" (tuya name optional, not used)\n//     data: object\n//        t: 1609234903\n//        dps: object\n//           102: 1020\n//\n//input: device OUT msg (virtual)\n//   _msgid: \"d0b26a44.e81738\"\n//   payload: object\n//      deviceId: \"123473b1b786b59*******\"\n//      deviceName: \"Zigbee Gateway\"\n//      data: object\n//        cid: \"12358d00086a1c45\"\n//        t: 1609235292\n//        dps: object\n//           103: 19\n//\n// output0: info message:\n//            warmsg.payload: [\"RX: '\" + <device-name> + \"'/'\" + <property-name> + \"' \", <data-expandible>] // for debug pad\n//            warmsg.info={                                 // for internal use, REST, etc.\n//                         device: <device-name>, \n//                         property: <property-name>,    \n//                         dp : <dp>,    \n//                         value: <processed-data>,    \n//                         };\n//\n// output1: msg, input message + msg.topic: the sql for DB\n//\n// -------------------------------------------------- do not change\n\n\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // to use the stored JSON method library in global alldevices \n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname]));       // ignore the â  node-red warning\n    return func.call(null).call(obj, a, b, c, d);    //invoke the function using arguments\n}\n\n// -------------------------------------------- private functions\nvar alld = global.get(\"alldevices\");\nvar oDev = null;\nvar _dataname = \"\";\n\n\n// updates the global \"tuyastatus\" and warmsg\nfunction _addToStatus(dnx, _datanx, dx, tx) {\n    var tuyastatus = global.get(\"tuyastatus\");\n    if (tuyastatus === undefined)\n        tuyastatus = {};\n    if (tuyastatus[dnx] === undefined)\n        tuyastatus[dnx] = {};\n    tuyastatus[dnx][_datanx] = dx;\n    tuyastatus[dnx]._t = tx;\n    global.set(\"tuyastatus\", tuyastatus);\n    // info message\n    warmsg = {\n        payload: [\"RX: '\" + dnx + \"'/'\" + _datanx + \"' \", dx]\n    };\n}\n\n// clean data (object, array) using JSON.stringify, to get a string for DB\nfunction formatData(data) {\n    var clean = JSON.stringify(data);\n    if (clean[0] === '\"')\n        clean = clean.substring(1).slice(0, -1);\n//    return clean.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n//    return clean.replace(/'/g, '\\\\x27');\n    return clean.replace(/'/g, \"\\\\'\");  \n    }      \n\n// For DB output, string\nfunction formatName(data) {\n    if(data == null) return 'NULL';\n//    return data.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n//    return data.replace(/'/g, '\\\\x27');\n      return data.replace(/'/g, \"\\\\'\");  \n    }      \n\n// true if device is a real device (virtual := cid exists)\nfunction _isreal(mx) {\n    return (mx.payload.data.cid === undefined);\n}\n\n// returns deviceId (real) or cid (virtual), never fails\nfunction _getID(mx) {\n    if (_isreal(mx))\n        return (mx.payload.deviceId);\n    return (mx.payload.data.cid);\n}\n\n// returns data.t or now(), formatted for mySQL, never fails\nfunction _mySQLdatetime(mx) {\n    //datetime format for mySQL: '2020-12-18 20:45:02'\n    // using 'sv' for date format and local timezone\n    if (mx.payload.data.t === undefined)\n        return (new Date().toLocaleString('sv'));\n    return (new Date(Number(mx.payload.data.t) * 1000).toLocaleString('sv'));\n}\n\n// returns val, processed by correct dpprocess[] function, if required, and sets  _dataname\nfunction _processData(odev, mx, adpn, val) {\n    _dataname = \"\";\n\n    var oPx = _callJSONMethod(alld, \"__getODps\", odev, adpn);\n    \n    if (oPx === undefined) {\n    // tuyadaeamon internal defined fields for all devices - standard process optional, no warning\n        if  (adpn !== \"_connected\")   // extra internal defined dps\n             node.warn(\"In alldevices missed the '\" + oDev.name + \"':dps[\" + adpn + \"] definition.\");\n        _dataname = adpn;\n        return (val);\n    }\n    _dataname = (oPx.name === undefined) ? adpn : oPx.name;\n\n    if ((oPx.typefield === undefined)||(oPx.typefield === 'NONE'))\n        return (val); // no process\n    if (datadecode[oPx.typefield] === undefined) {\n        node.warn(\"Not found \" + oPx.typefield + \" decode function() for '\" + _dataname + \"': data unchanged.\");\n        return (val);\n        }\n    try {\n        return datadecode[oPx.typefield](val);\n        } catch (error) {\n                node.warn(\"Error in \" + oPx.typefield + \" decode function on value (\" + val + \"): \" + error);\n                return (val);\n                }\n    \n}\n\n// get the device object from alldevices, if it don't exist return undefined + warn\nfunction _getODevice(all, mx) {\n    var o;\n    if (_isreal(mx)) {\n        o = _callJSONMethod(all, \"__getODev\", msg.payload.deviceId, \"real\");\n        if (o === undefined) {\n            o = _callJSONMethod(all, \"__getODev\", msg.payload.deviceId, \"fake\");\n        }\n        if (o === undefined) {\n            node.warn(\"ERROR: ADD to alldevices the real/fake deviceId: \" + mx.payload.deviceId + \" (\" + mx.payload.deviceName + \")\");\n        }\n    } else {\n        o = _callJSONMethod(all, \"__getODev\", mx.payload.data.cid, \"virtual\");\n        if (o === undefined) {\n            node.warn(\"ERROR: ADD to alldevices the virtual cid: \" + mx.payload.data.cid + \" [gateway: \" + mx.payload.deviceId + \"]\");\n        }\n    }\n    return (o);\n}\n\n//  detects some fatal errors in message structure\nfunction _badMsg(mx) {\n    if ((mx.payload.deviceId === undefined) && (mx.payload.data.cid === undefined)) {\n        node.warn(\"ERROR: OUT message without payload.deviceID or payload.data.cid: mandatory\");\n        return true;\n    }\n    if (mx.payload.data === undefined) {\n        node.warn(\"ERROR: OUT message without payload.data  (deviceID:\" + mx.payload.deviceId + \")\");\n        return true;\n    }\n    if (typeof mx.payload.data === 'string')\n        return false;\n    if (mx.payload.data.dps === undefined) {\n        node.warn(\"ERROR: OUT message without payload.data.dps (deviceID:\" + mx.payload.deviceId + \")\");\n        return true;\n    }\n    return false;\n}\n\n// ---------------------  main\n// sends any message to DB (in msg.topic), updates tuyastatus\nvar warmsg = null; // info debug (1)\nmsg.topic = \"\"; // sql query (2)\n\nif (_badMsg(msg))\n    return ([null, null]); //error sended, abort\n\noDev = _getODevice(alld, msg);\nif (oDev === undefined)\n    return ([null, null]); //error sended,  abort\n\nvar dname = _callJSONMethod(alld, \"__getDevName\", oDev);\n// now processes dp=value couples\nif (msg.payload.data.dps !== undefined) {\n    Object.entries(msg.payload.data.dps).forEach(([key, value]) => {\n        warmsg = null;\n        if ((value !== undefined) && (value !== null)) {\n            var pdata = _processData(oDev, msg, key, value);\n            msg.topic += \" INSERT INTO `messages` (`timestamp`, `device-id`, `device-name`, `dps`, `dp-name`, `data`, `value`)\\n\";\n            msg.topic += \" VALUES ('\" + _mySQLdatetime(msg) + \"', '\" + _getID(msg) + \"', '\" + formatName(dname) +\n      \t\t\t\"','\" + key + \"', '\" + formatName(_dataname) + \"', '\" + formatData(value) + \"', '\" + formatData(pdata) + \"') ;\\n\";\n            if (_dataname !== undefined) {\n                // timestamp as seconds\n                var tx = msg.payload.data.dps.t;\n                if (tx === undefined)\n                    tx = Math.floor(Date.now() / 1000);\n                _addToStatus(dname, _dataname, pdata, tx);\n                // send data in info too\n                warmsg['info']={};\n                warmsg['info']['device'] =dname ;\n                warmsg['info']['property'] =_dataname ;\n                warmsg['infodp'] = key ;\n                warmsg['info']['value'] =pdata ;\n                node.send([warmsg, null]);  // SQL are added\n            }\n        }\n    });\n} else {\n    if (msg.payload.data == \"json obj data unvalid\") {\n        node.warn(\"ERROR from '\" + dname + \"': not JSON data but 'json obj data unvalid': operation not allowed?.\");\n    } else {\n        // maybe here it is possible to deduce the value send: see\n        var buff = Buffer.from(msg.payload.data);\n        node.warn(\"ERROR from '\" + dname + \"': not JSON data but HEX:\" + buff.toString('hex') + \"  ('\" + msg.payload.data + \"')\");\n    }\n}\n\nif (msg.topic !== \"\") // some processed, SQL exists\n    return ([null, msg]);\n","outputs":2,"noerr":0,"initialize":"","finalize":"","x":650,"y":680,"wires":[["2caa595d.2a0106","2e4937fc.2ef1f8"],["9550d41.fdbe628"]]},{"id":"9550d41.fdbe628","type":"function","z":"173260fb.d021ff","name":"*RX DB query filter","func":"// kills unwanted DB queries\n// -----------------------------------------\n// use:\n// msg.payload.deviceId  (device|gateway)\n// msg.payload.data.cid  (for virtual devices)\n// msg.payload.data.dps[dp]   single dp\n\n// kills malformated messages\nif((msg.payload.data === undefined) || (msg.payload.data.dps === undefined))  return (null);\n//\n// filter example: \n// kills all TRIGGERS messages (see tuyaTRIGGER)\n if(msg.payload.deviceId  == \"bfa355aa196ae597****\") { // from tuya_bridge (real)\n    if (msg.payload.data.dps[\"102\"] != undefined)    // select trigger (dp == 102)\n         return(null);\n    }\n    \n// if(msg.payload.deviceId === \"_system\"  ) return null;  \n//  more....\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":950,"y":680,"wires":[["1a711832.f93bb8"]],"info":"On installation and test:\n  Best don't filer any message.\nOn production:\n  Better to filter not useful events.\n  _________________________________\n  \n See the example filter:\n Test can be done on \n     ` msg.payload.deviceId         for real devices\n       msg.payload.data.dps[<dpx>]  for specific events`\n  \n   "},{"id":"9fe80f7e.f3f7e","type":"link in","z":"173260fb.d021ff","name":"to logging","links":["28d20fae.6061b","2ec83963.a7d146","2fb79388.82d8cc","68d21677.32a9c8","798c4138.06176","db455c46.e4ac7","edf84736.d76338","54d03d6e.945994","850094a2.860328","7b505949.7ba1e8","bbd1da58.dba9c8","fabf158b.0d82a8"],"x":220,"y":620,"wires":[["fe1a20ab.104ce"]],"icon":"font-awesome/fa-expand","l":true,"info":"entry point for messages from devices like:\n````\nfunction _sendOUT(deviceid, key,value){\n// builds a fake OUT message \nvar newMsg = { \"payload\":{\n      \"deviceId\": deviceid,  \n // for virtual change:\"deviceId\": gatewayId;\n      \"data\": {\n          \"t\": Math.floor( Date.now() / 1000 );\n // for virtual add:\"cid\": deviceid;\n          \"dps\":{\n              [key]:value\n          }}}};\nreturn newMsg;  \n}\n````\nOutput:\n - updates `global.tuyastatus[dev-name][attribute-name] = standard units`\n - adds a record to 'messages' DB table (filtered by `tuyaDAEMON.'DB messages filter`' node )\n - fires EVNTRIGGERXXX  (see `tuyaTRIGGERS.'event trigger'` node)"},{"id":"c991322e.a484e","type":"function","z":"173260fb.d021ff","name":"*format  command","func":"\n// Data codification is function of the device and dps: here you can add new encode functions().\n// To add a new data format:\n// 1)  Add a new encoding function() here in the array dataencode, using a new 'TYPE_NAME'\n// 2)  Add the dual decode function()) to \"OUT data process\" node.\n// 3)  Add the new 'TYPE_NAME' in the DB tuyathone.lookupdecode table  (if you use tuyaDAEMON toolkit)\n// 4)  now you can use the new 'TYPE_NAME' as typefield  in global.alldevices\n// note tuya always BE\n// version 1.1 (use of _callJSONMethod)\nvar dataencode = {\n\n   BYTESMALLFLOAT: function (value) {\n      // transforms temperature to byte: 19.5Â° => 195 => C3H\n      // required by thermostat\n      var x = value;\n      if (typeof value === 'string')\n         x = Number.parseFloat(value);\n      if (Number.isNaN(x)) {\n         throw \"'value' is not a number!\";\n      }\n      return ~~(x * 10.0);\n   },\n\n   BOOLEANONOFF: function (value) {\n      // transforms 'ON'/'OFF' to boolean  true/false (very tolerant :  see https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons)\n      // it|en: can be localized for internationalization\n      if ((value == 0) || (value == null) || (value.toUpperCase() === \"OFF\") || (value.toUpperCase() === \"FALSE\") || (value.toUpperCase() === \"NO\"))\n         return false;\n      return true;\n   },\n\n   BOOLEANOPENCLOSE: function (value) {\n      // transforms 'OPEN'/'CLOSE' to boolean  true/false\n      // it|en: can be localized for internationalization\n      if ((value == 0) || (value == null) || (value.toUpperCase() === \"CLOSE\") || (value.toUpperCase() === \"CHIUSA\"))\n         return false;\n      return true;\n   },\n\n   ENUMONOFFHOLD: function (value) {\n      // transforms 'OFF'/'ON'/'HOLD' to string '0'/'1'/'2'\n      // it|en: can be localized for internationalization\n      if ((value == 0) || (value == null) || (value.toUpperCase() === \"OFF\") || (value.toUpperCase() === \"SPENTO\") || (value.toUpperCase() === \"NO\"))\n         return \"0\";\n      if ((value == 1) || (value.toUpperCase() === \"ON\") || (value.toUpperCase() === \"ACCESO\") || (value.toUpperCase() === \"YES\"))\n         return \"1\";\n    return \"2\";\n   },\n\n   STRUCTARGETTEMP: function (value) {\n      // transform the JSON structure:\n      //   {\"count\":4,\n      //    \"changes\":[{\"time\":\"00:00\",\"temp\":15.5},\n      //              {\"time\":\"07:00\",\"temp\":20},\n      //              {\"time\":\"16:30\",\"temp\":21},\n      //              {\"time\":\"21:00\",\"temp\":16.5}]}\n      // to  base64(Uint8Array[17])\n      // required by thermostat\n\n      function hmTomin(hm) { // local function\n         pieces = hm.split(':');\n         return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n      }\n      function mult10(value) {\n         return ~~(Number.parseFloat(value) * 10.0)\n      }\n\n      var o = value;\n      if (typeof value === 'string')\n         o = JSON.parse(value);\n      node.warn(\"in code \" + value);\n      if (o.count !== undefined) {\n         var buf = Buffer.alloc(o.count * 4 + 1);\n\n         buf.writeInt8(o.count, 0);\n         for (var i = 0; i < o.count; i++) {\n            buf.writeInt16BE(hmTomin(o.changes[i].time), i * 4 + 1);\n            buf.writeInt16BE(mult10(o.changes[i].temp), i * 4 + 3);\n         }\n         return buf.toString('base64');\n      } else {\n         throw \"'value' is not a {time,T}[4] struct\";\n      }\n   },\n\n   ARRAY8INT: function (value) {\n      // Transforms a UInt8Array, e.g.[17,16,16,16,15,15,17,18,19,19,18,18,18,18,17,16,17,18,18,0,0,0,0,0]\n      // as object or JSON string\n      // to  coded64 data => ERAQEA8PERITExISEhIREBESEgAAAAAA\n      // required by thermostat\n      var o = value;\n      if (typeof value === 'string')\n         o = JSON.parse(value);\n      if (Array.isArray(o)) {\n         b = Buffer.from(o);\n         return b.toString('base64');\n      } else {\n         throw \"'value' is not a (json) array !\";\n      }\n   },\n\n   STRUCTTIMEHMS: function (value) {\n      //  Transforms a time \"HH:MM:SS\"\n      //  in coded data base64(Uint16Array[3])\n      //  tentative, on work\n      pieces = value.split(':');\n      var buf = Buffer.alloc(6);\n      buf.writeInt16LE(parseInt(pieces[0]), 0);\n      buf.writeInt16LE(parseInt(pieces[2]), 2);\n      buf.writeInt16LE(parseInt(pieces[4]), 4);\n      return buf.toString('base64');\n   },\n\n   STRUCTCOLOUR: function (value) {\n      // accepts: JSON or object\n      // encode:\n      //      {   \"hex\":\"RRGGBBHHHHSSVV\" }\n      //  or: {   \"r\": RR,\n      //          \"g\": GG,\n      //          \"b\": BB\n      //        ( \"h\":HHHH,\n      //          \"s\": SS,\n      //          \"v\": VV )  }\n      // 100% = 0x64\n      //  required by humidifier led\n      var o = value;\n      if (typeof value === 'string')\n         o = JSON.parse(value);\n      if ((o.hex !== undefined) && (typeof o.hex === 'string') && (o.hex.length == 14))\n         return (o.hex);\n      if ((o.r === undefined) || (o.g === undefined) || (o.b === undefined)) {\n         throw \"'value' is not valid hex|rgb object!\";\n      }\n      var buf = Buffer.alloc(7);\n      buf.writeUInt8(o.r, 0);\n      buf.writeUInt8(o.g, 1);\n      buf.writeUInt8(o.b, 2);\n      if (o.h !== undefined) {\n         buf.writeUInt16BE(o.h, 3);\n         buf.writeUInt8(o.s, 5);\n         buf.writeUInt8(o.v, 6);\n      } else {\n         buf.writeUInt16BE(0, 3);\n         buf.writeUInt8(255, 5); //fixed ?\n         buf.writeUInt8(255, 6); //fixed ?\n      }\n      return buf.toString('hex');\n   },\n   ENUMHIGHGOODLOW: function(value){\n     // transforms 'LOW'/'GOOD'/'HIGH' to string '0'/'1'/'2'\n      // it|en: can be localized for internationalization\n      // required by switch\n      if ((value == 0) || (value == null) || (value.toUpperCase() === \"LOW\") || (value.toUpperCase() === \"BASSA\"))\n         return \"0\";\n      if ((value.toUpperCase() === \"HIGH\") || (value == 2)|| (value.toUpperCase() === \"ALTA\"))\n         return \"2\";\n      return \"1\";\n    },\n    RECMODE: function(value){\n     // transforms 'continuous'/'events' to string '1'/'2'\n      // it|en: can be localized for internationalization\n      // required by switch\n      if ((value == 1)|| (value.toUpperCase() === \"EVENTS\")|| (value.toUpperCase() === \"EVENTI\"))\n         return \"1\";\n      return \"2\";\n    },\n    STRUCTINCH:  function(value){\n      var o = value;\n      if (typeof value === 'string')\n         o = JSON.parse(value);\n      var buf = Buffer.alloc(3);\n      buf.writeUInt8((o.inching)?1:0, 0);\n      buf.writeUInt16BE(o.delay, 1);\n      return buf.toString('base64');\n      },\n      \n     STRUCTRAND:  function(value){\n      function hmTomin(hm) { // local function\n         pieces = hm.split(':');\n         return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n      }\n       function dayscode(val) {\n          result = 0;\n          mask  = 1;\n          for (var i=0;i<7;i++){\n              result |= (val.charAt(i) == '-')? 0:mask;\n              mask = mask << 1;             \n              }\n          return(result);\n       }\n      var o = value;\n      if (typeof value === 'string')\n         o = JSON.parse(value);\n      var buf = Buffer.alloc(6*o.length);\n      for(let i= 0; i < o.length; i++){\n          buf.writeUInt8((o[i].active)?1:0, i*6+0);\n          buf.writeUInt8(dayscode(o[i].days), i*6+1);\n          buf.writeUInt16BE(hmTomin(o[i].start),i*6+ 2);\n          buf.writeUInt16BE(hmTomin(o[i].end), i*6+4);\n          }\n      return buf.toString('base64');\n      },\n\n       \n     STRUCTREPEAT:  function(value){\n      function hmTomin(hm) { // local function\n         pieces = hm.split(':');\n         return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n      }\n       function dayscode(val) {\n          result = 0;\n          mask  = 1;\n          for (var i=0;i<7;i++){\n              result |= (val.charAt(i) == '-')? 0:mask;\n              mask = mask << 1;             \n              }\n          return(result);\n       }\n       \n      var o = value;\n      if (typeof value === 'string')\n         o = JSON.parse(value);\n      var buf = Buffer.alloc(10*o.length);\n      for(let i= 0; i < o.length; i++){\n          buf.writeUInt8((o[i].active)?1:0,i*10+0);\n          buf.writeUInt8(dayscode(o[i].days), i*10+1);\n          buf.writeUInt16BE(hmTomin(o[i].start), i*10+2);\n          buf.writeUInt16BE(hmTomin(o[i].end), i*10+4);\n          buf.writeUInt16BE(hmTomin(o[i].on), i*10+6);\n          buf.writeUInt16BE(hmTomin(o[i].off),i*10+ 8);\n          }\n      return buf.toString('base64');\n    },\n\n    SDSPACES: function(value){\n        node.warn(\"ERROR: SDSPACES only decode()\")\n        return (value);\n    }\n\n\n};\n// -------------------------------------------------- do not change\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n   // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n   var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n      var func = new Function(wrap(obj[fname])); // ignore the node-red â  warning\n   return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\n// true if device is a real device (virtual == cid exists)\nfunction _isreal(odev) {\n   return (odev.cid === undefined);\n}\n\n// returns deviceId (real) or cid (virtual), never fails\nfunction _getID(odev) {\n   return (odev.cid === undefined ? odev.id : odev.cid);\n}\n\n// true if is a GET command  (GET == msg.payload.value not exists)\nfunction _isget(mx) {\n   return (mx.payload.value === undefined);\n}\n\n// true if is a SET command  (SET == msg.value  exists)\nfunction _isset(mx) {\n   return ((mx.payload.property) && (mx.payload.value !== undefined));\n}\n\nfunction _getOdp(o) {\n   var p;\n   if (Array.isArray(o.dps)) {\n      p = o.dps.find(data => data.name == msg.payload.property); // msg.payload.property is name ?\n      if (p === undefined)\n         p = o.dps.find(data => data.dp == msg.payload.property); // is number, or string ?\n   }\n   return (p);\n}\n\n// returns now(), formatted for mySQL, never fails\nfunction _mySQLdatetime() {\n   //datetime format for mySQL: '2020-12-18 20:45:02'\n   // using 'sv' for date format (but local timezone)\n   return (new Date().toLocaleString('sv'));\n}\n\n// For DB output, object/string\nfunction formatData(data) {\n   if (data == null)\n      return 'NULL';\n   var clean = JSON.stringify(data);\n   if (clean[0] === '\"')\n      clean = clean.substring(1).slice(0, -1);\n   //    return clean.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n   //    return clean.replace(/'/g, '\\\\x27');\n   return clean.replace(/'/g, \"\\\\'\");\n}\n\n// For DB output, string\nfunction formatName(data) {\n   if (data == null)\n      return 'NULL';\n   //    return data.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n   //    return data.replace(/'/g, '\\\\x27');\n   return data.replace(/'/g, \"\\\\'\");\n}\n\n// ---------------------  main function\n// Builds IN messages (commands SET/GET) for devices.\n// updates the DB\n// format: see 'IN  commands' link node.\nvar alld = global.get(\"alldevices\");\nvar req = {};\nvar warn = null;\nvar query = {};\n\n//\nif ((msg.payload === undefined) || (!msg.payload.device)) {\n   node.warn([\"ERROR: malformed command message\", msg]);\n   return [null, null, null, null];\n}\n\nvar o = _callJSONMethod(alld, \"__getODev\", msg.payload.device);\n\nif (o === undefined) {\n   node.warn(\"ERROR: add to alldevices the device: '\" + msg.payload.device + \"'\");\n   return [null, null, null, null];\n}\n\n// test connected == false?\nvar cnx = _callJSONMethod(alld, \"__getConnectName\", o);\nvar dnx = _callJSONMethod(alld, \"__getDevName\", o);\n\nif (cnx !== undefined) {\n   var tuyastatus = global.get(\"tuyastatus\")\n      if ((typeof tuyastatus[cnx][\"_connected\"] !== 'undefined')\n          && (tuyastatus[cnx][\"_connected\"] === false)) {\n            node.warn(\"Operation not performed: '\" + cnx + \"' is not connected.\");\n            return ([null, null, null, null]);\n         }\n} else {\n   node.warn(\"ERROR: add to 'alldevices' the gateway '\" + o.gateway + \"' (used by '\" + dnx + \"')\");\n   return [null, null, null, null];\n}\n\n// \"optional 'capability' for devices:[ one or more of 'SET','GET','SCHEMA','MULTIPLE', NONE','ALL'] (default ALL)\",\nvar cap;\nif (typeof o.capability !== 'undefined')\n   cap = Array.from(o.capability);\nif ((cap === undefined) || (cap.length < 1))\n   cap = [\"ALL\"]; // the default is ALL\n\n//------------------------- fake devices build warn message and DB update only\n\nif (alld.fake.includes(o)) {\n   var pf = _getOdp(o);\n   // not found or o.dps don't exists\n   if (pf === undefined) { // not found\n      node.warn(\"In alldevices add to '\" + dnx + \"' the data point: '\" + msg.payload.property + \"'\");\n      pf = {\n         dp: \"none\"\n      }; //fallback\n      pf.dp = msg.payload.property;\n   }\n\n   query.topic = \" INSERT INTO `messages` (`timestamp`, `action`, `device-id`, `device-name`, `dps`, `dp-name`, `data`, `value`) \";\n   query.topic += \" VALUES ('\" + _mySQLdatetime() + \"', 'TX' , '\" + _getID(o) + \"', '\" + formatName(dnx) + \"','\" + pf.dp + \"', '\" + formatName(msg.payload.property) + \"', \" + (_isset(msg) ? \"'\" + formatData(msg.payload.value) + \"'\" : \"NULL\") + \", \" + (_isset(msg) ? \"'\" + formatData(msg.payload.value) + \"'\" : \"NULL\") + \" );\";\n   msg.to = o.id;\n   // the warning message\n   if (_isset(msg)) {\n      if (!(cap.includes(\"SET\") || cap.includes(\"ALL\"))) {\n         node.warn(\"SET commands not allowed by the '\" + dnx + \"'\");\n         return [null, null, null, null];\n      }\n      warn = {\n         payload: [\"TX SET: '\" + dnx + \"'/'\" + msg.payload.property + \"'\", msg.payload.value],\n         to: o.id\n      }\n   } else {\n      if (!(cap.includes(\"GET\") || cap.includes(\"ALL\"))) {\n         node.warn(\"GET commands not allowed by the '\" + dnx + \"'\");\n         return [null, null, null, null];\n      }\n      warn = {\n         payload: \"TX GET:'\" + dnx + \"'/'\" + msg.payload.property + \"'\",\n         to: o.id\n      }\n   }\n   // outputs: tuya/fake/info/db\n   return [null, msg, warn, query];\n} //--------------------------- end fake\n\nreq.payload = {};\nif (_isreal(o)) {\n   // if it is real\n   req.to = o.id;\n} else {\n   // if it is virtual\n   req.payload.devId = o.cid; // uses cid for virtual devices\n   req.to = o.gateway;\n}\n\nreq.topic = \"msg for \" + dnx;\n\nif (cap.includes(\"NONE\")) {\n   node.warn(\"GET/SET operations not allowed because the '\" + dnx + \"' is not accessible by user.\");\n   return [null, null, null, null];\n}\n\nif (_isget(msg)) {\n   req.payload.operation = \"GET\";\n   if (msg.payload.property === undefined) // is get schema\n      if (cap.includes(\"SCHEMA\") || cap.includes(\"ALL\")) {\n         req.payload.schema = true;\n         query.topic = \" INSERT INTO `messages` (`timestamp`, `action`,`device-id`, `device-name`, `dps`, `dp-name` )\";\n         query.topic += \" VALUES ('\" + _mySQLdatetime() + \"','TX', '\" + _getID(o) + \"', '\" + formatName(dnx) + \"','SCHEMA','SCHEMA') ;\";\n         query[\"payload\"] = {\n            deviceId: _getID(o)\n         };\n         return ([req, null, {\n                  payload: \"TX: SCHEMA from '\" + dnx + \"'\",\n                  to: req.to\n               }, query]);\n      } else {\n         node.warn(\"SCHEMA GET not allowed by the '\" + dnx + \"'\");\n         return [null, null, null, null];\n      }\n   //\n   if (!(cap.includes(\"GET\") || cap.includes(\"ALL\"))) {\n      node.warn(\"GET commands not allowed by the '\" + dnx + \"'\");\n      return [null, null, null, null];\n   } // --------- SCHEMA ends\n}\n\n// common\nif (!msg.payload.property) {\n   node.warn([\"malformed command message\", msg]);\n   return [null, null, null, null];\n}\n\nif (_isset(msg)) {\n  if (msg.payload.property.toUpperCase() === \"MULTIPLE\")\n      if (cap.includes(\"MULTIPLE\") || cap.includes(\"ALL\")) {\n         req.payload.multiple = true;\n         try{\n         if (typeof(msg.payload.value) === 'string')\n            req.payload.data = JSON.parse(msg.payload.value);\n         else\n            req.payload.data = msg.payload.value;\n         } catch(error){\n             node.warn(\"Error in MULTIPLE: bad value (\" + msg.payload.value + \") \" + error);\n             }\n         //\n         query.topic = \" INSERT INTO `messages` (`timestamp`, `action`,`device-id`, `device-name`, `dps`, `dp-name`, `data`)\";\n         query.topic += \" VALUES ('\" + _mySQLdatetime() + \"','TX', '\" + _getID(o) + \"', '\" + formatName(dnx) + \"','MULTIPLE','MULTIPLE', '\" + formatData(msg.payload.value) + \"') ;\";\n         query[\"payload\"] = {\n            deviceId: _getID(o)\n         };\n         return ([req, null, {\n                  payload: [\"TX MULTIPLE: to '\" + dnx + \"'\", msg.payload.value],\n                  to: req.to\n               }, query]);\n      } else {\n         node.warn(\"MULTIPLE SET not allowed by the '\" + dnx + \"'\");\n         return [null, null, null, null];\n      } // ------ MULTIPLE ends\n   //\n   if (!(cap.includes(\"SET\") || cap.includes(\"ALL\"))) {\n      node.warn(\"SET commands not allowed by the '\" + dnx + \"'\");\n      return [null, null, null, null];\n   }\n}\n\nvar p = _getOdp(o);\n// not found or o.dps don't exists\nif (p === undefined) { // not found\n   node.warn(\"In alldevices add to '\" + dnx + \"' the data point: '\" + msg.payload.property + \"'\");\n   p = {\n      dp: \"none\"\n   }; //fallback\n   p.dp = msg.payload.property;\n}\n\n// \"comment02\":\"optional 'capability' for dps, one of: 'RO' |'WO'|'WW'|'RW' |'PUSH'|'TRG' (default RW)\",\nvar capp = (typeof p.capability !== 'undefined') ? p.capability : \"RW\";\nswitch (capp) {\ncase \"PUSH\":\n   node.warn(\"Can not SET/GET the PUSH value of '\" + dnx + '\".\"' + msg.payload.property + \"'\");\n   return [null, null, null, null];\ncase \"RO\":\n   if (_isset(msg)) {\n      node.warn(\"Can not SET the Read Only value of '\" + dnx + '\".\"' + msg.payload.property + \"'\");\n      return [null, null, null, null];\n   }\n   break;\ncase \"WO\":\n   if (_isget(msg)) {\n      node.warn(\"Can not GET the Write Only value of '\" + dnx + '\".\"' + msg.payload.property + \"'\");\n      return [null, null, null, null];\n   }\n   break;\ncase \"GW\":\n   if (_isset(msg)) {\n      node.warn(\"Can not SET the GW value of '\" + dnx + '\".\"' + msg.payload.property + \"'\");\n      return [null, null, null, null];\n   }\n   delete req.payload.operation;\n   msg.payload.value = null;\n   break;\ncase \"WW\":\n   if (_isget(msg)) {\n      delete req.payload.operation;\n      msg.payload.value = null;\n   }\n   break;\ncase \"TRG\":\n   node.warn(\"Reserved: '\" + dnx + '\".\"' + msg.payload.property + \"' is used with TRIGGER\");\n   return [null, null, null, null];\n}\nreq.payload.dps = p.dp.toString(); // dps always string: \"101\" or \"_connected\"\n// data encoding\nif ((msg.payload.value === \"\") || (msg.payload.value === null) || (msg.payload.value === 'NULL')) { // note 0 is ok\n   req.payload.set = null;\n} else {\n   if (_isset(msg)) {\n      if ((!p.typefield) || (p.typefield === 'NONE') || (p.typefield === 'NULL')) { // not ENCODE FUNCTION\n         try {\n            switch (p.type) { //forcing\n            case 'boolean':\n               req.payload.set = ((msg.payload.value == true) || (msg.payload.value === 'true'));\n               break;\n            case 'int':\n            case 'enum':\n               req.payload.set = Number(msg.payload.value);\n               break;\n            case 'string':\n               req.payload.set = msg.payload.value.toString();\n               break;\n            default: //  else default conversion\n               if (msg.payload.value === \"false\")  req.payload.set = false; else\n                 if (msg.payload.value === \"true\")  req.payload.set = true; else\n                   req.payload.set = isNaN(Number(msg.payload.value)) ? msg.payload.value : Number(msg.payload.value);\n            }\n         } catch (error) {\n            node.warn(\"Error in conversion from value(\" + msg.payload.value + \") to type'\" + p.type + \"': \" + error);\n         }\n      } else {\n         if (!dataencode[p.typefield]) {\n            node.warn(\"Not found the encode.['\" + p.typefield + \"'] function() required by \" + dnx + '\".\"' + msg.payload.property + \"': data unchanged.\");\n            req.payload.set = msg.payload.value;\n         } else {\n            try {\n               req.payload.set = dataencode[p.typefield](msg.payload.value);\n            } catch (error) {\n               node.warn(\"Error in \" + p.typefield + \" encode function on value (\" + msg.payload.value + \"): \" + error);\n               req.payload.set = null;\n            }\n         }\n      }\n   }\n}\n// outputs: tuya/fake/info/db\n\n// builds the DB  log\nquery.topic = \" INSERT INTO `messages` (`timestamp`, `action`, `device-id`, `device-name`, `dps`, `dp-name`, `data`, `value`) \";\nquery.topic += \" VALUES ('\" + _mySQLdatetime() + \"', 'TX' , '\" + _getID(o) + \"', '\" + formatName(dnx) + \"','\" + req.payload.dps + \"', '\" + formatName(msg.payload.property) + \"', \" + (_isset(msg) ? \"'\" + formatData(req.payload.set) + \"'\" : \"NULL\") + \", \" + (_isset(msg) ? \"'\" + formatData(msg.payload.value) + \"'\" : \"NULL\") + \" );\";\n\n// the warning message\nif (_isset(msg))\n   warn = {\n      payload: [\"TX SET: '\" + dnx + \"'/'\" + msg.payload.property + \"'\", msg.payload.value],\n      to: req.to\n   };\nelse\n   warn = {\n      payload: \"TX GET:'\" + dnx + \"'/'\" + msg.payload.property + \"'\",\n      to: req.to\n   };\nreturn ([req, null, warn, query]);\n","outputs":4,"noerr":0,"initialize":"","finalize":"","x":390,"y":260,"wires":[["5777b120.3dc3e"],["18817677.061b9a"],["4244626d.05ecbc"],["70d88fb4.7fcc2"]]},{"id":"2ec83963.a7d146","type":"link out","z":"173260fb.d021ff","name":"","links":["9fe80f7e.f3f7e"],"x":1155,"y":380,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"d4a32280.a4dc8","type":"switch","z":"173260fb.d021ff","name":"*real device selector","property":"to","propertyType":"msg","rules":[{"t":"eq","v":"bf8c4fd0c03********","vt":"str"},{"t":"eq","v":"bfb073b1********","vt":"str"},{"t":"eq","v":"56685573d*******","vt":"str"},{"t":"eq","v":"5668557******","vt":"str"},{"t":"eq","v":"56685573******","vt":"str"},{"t":"eq","v":"55430160********","vt":"str"},{"t":"eq","v":"bf0b2ef3********","vt":"str"},{"t":"eq","v":"0843537260******","vt":"str"},{"t":"eq","v":"bfbe31dc672657857cxsi0","vt":"str"},{"t":"eq","v":"bfa355aa196a*********","vt":"str"},{"t":"eq","v":"bfa1bdeb107d*******","vt":"str"},{"t":"eq","v":"42027807d8*****","vt":"str"}],"checkall":"true","repair":false,"outputs":12,"x":660,"y":120,"wires":[["305e7686.63b0fa"],["dfd320c0.b4f74"],[],[],[],[],[],[],[],["3db19556.7e04fa"],["cb5af4dc.7cb258"],["12896b89.d95c84"]]},{"id":"8a1da02d.424ae","type":"link in","z":"173260fb.d021ff","name":"IN  commands","links":["25e4f27d.911f4e","2abb8b42.fb0014","b9bfe83e.88b628","bb0a853c.789078","58c718a1.bbd748"],"x":190,"y":260,"wires":[["c991322e.a484e"]],"l":true,"info":"Unique entry point for commands from application flows.\n\nFor a great incapsulation, external application flows can use only `usr-device-name`, `usr-property-name` and `usr-decoded-data`, as defined in global.alldevices. (see `tuyaDAEMON.'format command'` node and `global.alldevices,(real|virtual)[dname][pname].typefield`)).\n\n\n`msg.payload` for **SET** command (sends a new value to a device: usually the device stores it and sends back the modified value):\n````\n    {\n        \"device\": \"tuya_bridge\",    // sr-device-name  (accepts also id|cid, only  for test), case-sensitive\n        \"property\": \"on reset\",     //  usr-propery-name (accepts also dps value, only for test), case-sensitive\n           \"value\": \"ON\"            //  user-value, as required by encode()\n    }\n````\n\n`msg.payload` for **GET** command (refresh a parameter in **global.tuyastatus** asking the actual value from a device):\n````\n    {\n        \"device\": \"tuya_bridge\",  //  usr-device-name  (accepts also id|cid, only  for test), case-sensitive\n        \"property\": \"on reset\",     //  usr-propery-name (accepts also dps value, only for test), case-sensitive\n    }\n````\n`msg.payload` for **GET schema** command (massive refresh of **global.tuyastatus** from a device):\n````\n    {\n        \"device\": \"tuya_bridge\",        //  usr-device-name  (accepts also id|cid, only  for test). case-sensitive\n    }\n````\n\n`msg.payload` for **SET multiple** command (_deprecated because uses dps index and coded data_):\n````\n    {\n        \"device\": \"tuya_bridge\",            //  usr-device-name  (accepts also id|cid, only  for test). case-sensitive\n      \"property\": \"MULTIPLE\",               // reserved name\n         \"value\":  {\"1\":true, \"101\":\"100\"}  //  object, unprocessed, as required by device\n    }\n````\n\n**Commands handling**\n\n- In general, **tuyaDEAMON CORE** send ALL commands for real and virtual devices.\n- The commands for _fake devices_ are available from a _link OUT node_, so they can be processed by related fake_commands **node-red** modules.\n\n\n"},{"id":"cff32cc3.68b48","type":"comment","z":"173260fb.d021ff","name":"OUT msg process","info":"_tuyaDAEMON process chain for messages coming from all device._\n\nInput: msg from any `smart-tuya-device` node or internally generated.\n\nOuput: \n  - the global.tuyastatus object is updated.\n  - a log of every received data is stored in the 'messages' DB table.\n  - info, trace and warning messages are output on the debug pad.\n  \nThe user can control the info and trace messages and select the stored records.","x":230,"y":580,"wires":[]},{"id":"305e7686.63b0fa","type":"link out","z":"173260fb.d021ff","name":"to bridge device","links":["69321d9a.30b7d4"],"x":935,"y":20,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"e05b4c.e495e4b8","type":"comment","z":"d02ad611.d94bc8","name":"Device:   tuya_bridge  (WiFi switch)","info":"","x":200,"y":40,"wires":[]},{"id":"95e6a79a.32bea8","type":"inject","z":"d02ad611.d94bc8","name":"test  SET: tuya_bridge switch  ON [1]","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"tuya_bridge\",\"property\":\"relay\",\"value\":\"ON\"}","payloadType":"json","x":240,"y":120,"wires":[["2abb8b42.fb0014"]]},{"id":"2abb8b42.fb0014","type":"link out","z":"d02ad611.d94bc8","name":"","links":["8a1da02d.424ae"],"x":535,"y":80,"wires":[]},{"id":"9ecc1854.252ad8","type":"inject","z":"d02ad611.d94bc8","name":"test SET: tuya_bridge 'on reset' [101] HOLD","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"tuya_bridge\",\"property\":\"restart status\",\"value\":\"memory\"}","payloadType":"json","x":260,"y":200,"wires":[["2abb8b42.fb0014"]]},{"id":"1a9b7af5.924e85","type":"debug","z":"173260fb.d021ff","d":true,"name":"trace:  msg IN for tuya devices","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":630,"y":400,"wires":[]},{"id":"bc933c53.b4bd9","type":"debug","z":"173260fb.d021ff","d":true,"name":"trace: msg OUT from tuya devices","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":620,"y":440,"wires":[]},{"id":"b25c688d.705df8","type":"link in","z":"173260fb.d021ff","name":"low level IN","links":["ac99922.9f3c17"],"x":190,"y":120,"wires":[["5777b120.3dc3e"]],"l":true,"info":"Low level entry point, payload is send directly to `tuya-smart-device` node.\nFor test, extensions etc.\n\nIN device messages (commands):\n \n SET single\n ````\n      {\n      \"to\":\"60a823fffeb5b90d\",  // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n      // virtual devices, add cid:    \"devId\": \"60a453fffeb1b908\",\n          \"dps\":103,\n          \"set\":220  // BOOLEAN, INT/ENUM, STRING      \n          }\n      }\n````\n SET multiple\n````\n      {\n      \"to\":\"60a823fffeb5b90d\",  // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n      // virtual devices, add cid:    \"devId\": \"60a453fffeb1b908\",\n          \"multiple\":true,\n          \"data\": {\n             103:220  // dps:value \n             }\n          }\n      }\n````\n\n GET single\n````\n      {\n      \"to\":\"60a823fffeb5b90d\",  // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n    // virtual devices, add cid:    \"devId\": \"60a453fffeb1b908\",\n          \"operation\":\"GET\",\n          \"dps\":103\n          }\n      }\n````\nGET schema\n````\n      {\n      \"to\":\"60a823fffeb5b90d\",  // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n    // virtual devices, add cid:    \"devId\": \"60a453fffeb1b908\",\n          \"operation\":\"GET\",\n          \"schema\"=true\n          }\n      }\n````\n \n"},{"id":"ce43c90.8027338","type":"comment","z":"d02ad611.d94bc8","name":"TEST FOR UNKNOW BINARY base64 DATA","info":"1) Find unknow messages in DB log\n\n2) If messages are binary data encoded base64 (like \"EQ8AAAAAAA==\"), copy it into msg.payload.\n\n3) The output can help you to find the rigth data use.\n\n4) if required add a custom encode() function to node \"format  command\" and decode() function to node \"updates global.tuyastatus, formats SQL\" and update also flow.alldevices.","x":230,"y":820,"wires":[]},{"id":"f46ed967.b7ce48","type":"function","z":"d02ad611.d94bc8","name":"tests the payload string","func":"//  in msg.payload te string\n\nb = Buffer.from(msg.payload, \"base64\");\n\nnode.warn(\"As Hex string: \"+b.toString(\"hex\"));\n\nnode.warn(\"As bytes: [\"+new Uint8Array(b)+\"]\");\n\nvar n =    ~~(b.length / Uint16Array.BYTES_PER_ELEMENT);\nconst uint16arr = new Uint16Array(\n  b.buffer,\n  b.byteOffset,\n  n);\nnode.warn(\"As Int16LE: [\"+uint16arr+\"]\");\n\n//  builds ArrayBuffer\nvar ab = new ArrayBuffer(b.length);\nvar barray = new Uint8Array(ab);\n    for (var i = 0; i < b.length; ++i) {\n        barray[i] = b[i];\n    }\n//  puts int16BE    \nvar view = new DataView(ab);\nvar outs =\"\";\nfor (var j = 0; j < n; j++ ){\n   outs += view.getInt16(j * 2, false) +\", \";\n   }\nnode.warn(\"As Int16BE: [\"+outs.substring(0, outs.length - 2)+\"]\");\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":550,"y":860,"wires":[["2175d19f.9d277e"]]},{"id":"2175d19f.9d277e","type":"debug","z":"d02ad611.d94bc8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":850,"y":860,"wires":[]},{"id":"71181748.95d248","type":"inject","z":"d02ad611.d94bc8","name":"termosifone 2, lunedi,  121","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"ARIE2gUWAAoAPw==","payloadType":"str","x":230,"y":860,"wires":[["f46ed967.b7ce48"]],"info":"Set in msg.payload the received string:\n   eg:  AAAAABE8Pjk1KiEdKzcoMS4fHB8AAAAAAAAAAAAAAA=="},{"id":"e25f8186.a5e4d","type":"comment","z":"173260fb.d021ff","name":"global alldevices","info":"**'global.alldevice': a DB implemented as JSON tree object for fast access.**\n\n_The goal of `'global.alldevice'` structure is to store in a unique place all information required by tuyaDAEMON to get a full insulation layer from the tuya communication details and to have a safe preventive control on allowed operations._\n\nThis data structure must be user-maintained, containing info on all connected tuya devices.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices","x":220,"y":400,"wires":[]},{"id":"619df12c.348e4","type":"status","z":"173260fb.d021ff","name":"spy status","scope":["dfd320c0.b4f74"],"x":1260,"y":60,"wires":[["5426b54d.99298c"]]},{"id":"7330cf81.3a32d","type":"comment","z":"173260fb.d021ff","name":"_system DEVICE MONITOR","info":"Connection monitor\n\nThis nodes handle the `\"_connected\"` property in global.tuyastatus, added to all real devices only.\n\n- This property can be used by your applications, and it is used by CORE and by the `'system'` fake device, to produce _ALARM events_.\n\n- If you don't are interest about `'system'` and `\"_connected\"` you can disable/delete this tuyaDAEMON section.\n\n- Adding a new sevice, add 2 nodes, and update the list in the 'catch' node.","x":1320,"y":540,"wires":[]},{"id":"ce964c66.57f1c","type":"inject","z":"d02ad611.d94bc8","name":"test: GET tuya_bridge 'on reset' [101]","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"tuya_bridge\",\"property\":\"restart status\"}","payloadType":"json","x":240,"y":240,"wires":[["2abb8b42.fb0014"]]},{"id":"798c4138.06176","type":"link out","z":"638c6657.ce65c8","name":"to logging","links":["9fe80f7e.f3f7e"],"x":975,"y":180,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"ebf1518e.eb3e2","type":"comment","z":"638c6657.ce65c8","name":"tuyaTRIGGERS ","info":"## TRIGGER tuyaDEAMON module\n\n_A real device WiFI, having  a big unused numerical parameter, say a 'counter', writable for both **Tuya** and **node-red**, is all the required hardware to implement a robust bilateral event communication (**TRIGGER**)._\n\nsee   https://github.com/msillano/tuyaDAEMON/blob/main/tuyaTRIGGER/README.md","x":140,"y":60,"wires":[]},{"id":"69321d9a.30b7d4","type":"link in","z":"638c6657.ce65c8","name":"to tuya_bridge","links":["305e7686.63b0fa","5024d2e0.b05cec","d6c8adeb.cd279","fc22adad.2f985","18d062e0.0b631d","83ab4822.a4d028","5b00e866.1ee048","790c7224.74435c","a3dfd8c8.7dac98"],"x":210,"y":180,"wires":[["2c0a4e62.c8adf2"]],"icon":"font-awesome/fa-expand","l":true},{"id":"5024d2e0.b05cec","type":"link out","z":"638c6657.ce65c8","name":"to send","links":["69321d9a.30b7d4"],"x":1235,"y":220,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"bfddb028.1da3","type":"debug","z":"638c6657.ce65c8","d":true,"name":"trace: msg OUT from tuya_bridge","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":660,"y":360,"wires":[]},{"id":"aea82682.f3bef8","type":"status","z":"638c6657.ce65c8","name":"spy status","scope":["bd44880d.8cdda8"],"x":660,"y":120,"wires":[["fd3a31f5.8912d"]]},{"id":"2c0a4e62.c8adf2","type":"switch","z":"638c6657.ce65c8","name":"do nothing","property":"payload","propertyType":"msg","rules":[{"t":"neq","v":"null","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":335,"y":180,"wires":[["2710cd5f.1eb562","c81edba3.cbcd58"]],"l":false},{"id":"2710cd5f.1eb562","type":"debug","z":"638c6657.ce65c8","d":true,"name":"trace: msg IN for tuya_bridge","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":680,"y":320,"wires":[]},{"id":"8b585752.c9b818","type":"switch","z":"638c6657.ce65c8","name":"TUYATRGXXX","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"btwn","v":"1001","vt":"num","v2":"4999","v2t":"num"},{"t":"lt","v":"1000","vt":"num"}],"checkall":"true","repair":false,"outputs":2,"x":920,"y":260,"wires":[["aba38dbb.f8b33","9efb8156.f33d4"],["6da77dc2.b387a4"]],"info":"selects all TRIGGERS from tuya cloud (values: 801-1999), to more prosesses\nselect test pig values (0-799) (optional)\n\n"},{"id":"63e6d5d.0a5da2c","type":"link out","z":"638c6657.ce65c8","name":"connection pool","links":["c90b7eb2.07595"],"x":975,"y":120,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"5426b54d.99298c","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"bfb073b1b789b*******","type":"str"},{"name":"deviceID","value":"bfb073b1b789b5994cro7p","type":"str"}],"x":1430,"y":60,"wires":[["81103bac.696bc8"]]},{"id":"fd3a31f5.8912d","type":"subflow:ee953c15.ada29","z":"638c6657.ce65c8","name":"","env":[{"name":"deviceId","value":"bf8c4fd0c030********","type":"str"},{"name":"deviceID","value":"bfa355aa196ae5975cy6ii","type":"str"}],"x":850,"y":120,"wires":[["63e6d5d.0a5da2c"]]},{"id":"d62f5a18.fe10b8","type":"debug","z":"173260fb.d021ff","name":"RX  info","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":700,"y":480,"wires":[]},{"id":"4244626d.05ecbc","type":"debug","z":"173260fb.d021ff","name":"TX info","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":700,"y":360,"wires":[]},{"id":"154e84b8.8c7b0b","type":"comment","z":"173260fb.d021ff","name":"Debug pad options","info":"**Disable unwonted trace and info messages on debug pad.**\n\n - Disable unwonted debug nodes.\n  \n - To filter only some info messages, modify the the code in function node: _'info message filter'_ \n\n - To reduce the records sended to DB, edit the code in function nodes: _'*TX DB messages filter'_  and _'*RX DB messages filter'_\n \n - Warn messages are alway sended.\n \n If you like to get a better run, as a temporary solution, you can do some modifications to the tuyapi ver 5.3.1 code, as advised in [issue#389](https://github.com/codetheweb/tuyapi/issues/389)  \n \n","x":710,"y":320,"wires":[]},{"id":"3b2c654f.efb8fa","type":"comment","z":"d02ad611.d94bc8","name":"_system test","info":"","x":710,"y":40,"wires":[]},{"id":"4170e71.70b8518","type":"file","z":"173260fb.d021ff","name":"save path","filename":"D:\\xampp\\htdocs\\tuyadaemontoolkit\\devicedata\\alldevice.json","appendNewline":false,"createDir":true,"overwriteFile":"true","encoding":"utf8","x":320,"y":500,"wires":[[]]},{"id":"7a540832.656648","type":"inject","z":"173260fb.d021ff","name":"SAVE ","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"$globalContext(\"alldevices\")\t","payloadType":"jsonata","x":190,"y":500,"wires":[["4170e71.70b8518"]]},{"id":"81a9b329.092b1","type":"link out","z":"173260fb.d021ff","name":"low level OUT","links":["a9aac6e5.70f988","3baeae11.41ef52"],"x":620,"y":580,"wires":[],"l":true,"info":"Low level output, all messages as sended by devices.\n\nThe messages are unprocessed, directly from `tuya-smart-device` node. \n\n_Used by_:  `tuyaTRIGGERS.'event trigger'` node\n\n_See also_: `'to logging'` input link node for the OUT msg structure.\n\nOUT msg structures:\n\nexample: msg (real)\n ````\n        {\n        _msgid: \"12342f3fd.8697fc\"\n        _event: \"node:12343963.a7d846\"\n        payload: object\n           deviceId: \"123455aa196ae5975cy6ii\"\n           deviceName: \"*tuya_bridge\" \n           data: object\n              t: 1609234903  // timestamp, in seconds.\n              dps: object\n                 102: 1020   // array of dp:value\n        }\n```` \n\nexample msg: (virtual)\n````\n        {\n        _msgid: \"12346a44.e81238\"\n        payload: object\n           deviceId: \"123473b1b789b4994cro7p\"\n           deviceName: \"Zigbee Gateway\"\n           data: object\n              cid: \"12348d00856a1c15\"\n              t: 1609235292\n              dps: object\n                 102: 1020   // array of dp:value\n        }             \n````\n"},{"id":"d22f53a4.c54b9","type":"inject","z":"173260fb.d021ff","name":"auto","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"","payloadType":"date","x":295,"y":1060,"wires":[["2a358b0d.e48944"]],"icon":"node-red/trigger.svg","l":false},{"id":"2a358b0d.e48944","type":"function","z":"173260fb.d021ff","name":"start timestamp","func":"\n// =======================  main version 1.1\n// local function to iniect in node \"to logging\"\nfunction _sendSys(key,value){\n// builds a fake OUT message \nvar newMsg = { \"payload\":{\n      \"deviceId\": \"_system\",\n      \"data\": {\n         \"dps\":{\n              [key]:value\n          }}}};\nreturn newMsg;  \n}\n\n// returns data.t or now(), formatted for mySQL, never fails\n// datetime format for mySQL: '2020-12-18 20:45:02' using 'sv' for date format + local timezone\nfunction _mySQLdatetime(mx = null) {\n   if ((mx == null) || (mx.payload.data.t === undefined))\n      return (new Date().toLocaleString('sv'));\n   return (new Date(Number(mx.payload.data.t) * 1000).toLocaleString('sv'));\n}\n\nreturn  _sendSys(\"_laststart\", _mySQLdatetime());\n\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n\n// initializes tuyastatus._system\n function getSysObj(alldevices){\n return   alldevices.fake.find(device => device.id === \"_system\");\n }\n \n function getDevUsrName(odev){\n  if  (odev !== undefined) return(odev.name);\n  return (odev.id);   \n }\n\n\nfunction getDpUsrName(dpx, odev){\n  if  ((odev !== undefined) && (Array.isArray(odev.dps))){\n      var dpo = odev.dps.find(dpnt => dpnt.dp === dpx);\n      if ((dpo !== undefined) && (dpo.name !== undefined)) \n         return (dpo.name);\n  }\n  return (dpx);   \n }\n\nvar osys = getSysObj(global.get(\"alldevices\"));\nif (osys === undefined) return;\nvar tuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus == undefined)\n        tuyastatus = {};\nvar sysUsrName = getDevUsrName(osys);\nif (tuyastatus[sysUsrName] == undefined)\n        tuyastatus[sysUsrName] = {};\nvar startUsrName = getDpUsrName(\"_laststart\",osys);\ntuyastatus[sysUsrName][startUsrName] = null ; \nglobal.set(\"tuyastatus\", tuyastatus);\n \n\n","finalize":"","x":440,"y":1060,"wires":[["db455c46.e4ac7"]],"info":"A message at the end of initial setup time (on my PC 7-8s). ready."},{"id":"db455c46.e4ac7","type":"link out","z":"173260fb.d021ff","name":"trigg-start","links":["9fe80f7e.f3f7e","51e7a359.57146c"],"x":575,"y":1060,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"a6a98ae5.79e068","type":"comment","z":"173260fb.d021ff","name":"_system FAKE DEVICE","info":"**SYSTEM is a fake device** \n\n `_system` is a device handled by tuyaDAEMON, and offerts a centralized information point about tuyaDAEMON and devices status.\n\n**The device _system_ is with fallowing capabilities:**\n\ndefined in _tuyaDAEMON_:\n - **_start**: \"2020-12-31 17:56:01\"|null, _the tuyaDAEMON local start time. For the first 8 seconds it is null, to signal the node-red startup._\n - **_ACpower**: true, _if some AC-powerd devices are connected._\n     false, _if all AC powered device are disconnected_\n - **_WiFinet**: true, _if some WiFi devices (not battery-powered) are connected._\n    false, _if all WiFi device are disconnected_\n - **_LANnet**: true, _if a remote server (http://nodered.org) is reachable_\n    false, _otherwise._\n - **_ACunconnected**: array[x], _List of  AC-powered disconnected devices. When == all, the AC ALARM is send._\n - **_WiFiunconnected**: array[x],  _List of WiFi (AC and UPS) disconnected devices. When == all and ACpower == true the WIFI ALARM is send._\n\ndefined in _tuyaTRIGGER_:\n - **_trgPing**: object { count, avg, max, min}, the tuya cloud trigger timing, Do this test in a quiet moment.\n  \nFor users convenice, `system` also present some LINK:\n - **connection event**  _fired every device status change, logged_\n - **AC ALARM**: _sends a msg every change of ACpower_.\n - **WIFI ALARM**: _sends a msg every change of WiFinet, if ACpower is true._\n - **LAN ALARM**: _sends a msg every change of LANnet_.\n \nIn `global.tuyastatus` we can found, using also tuyaTRIGGER, a `_system` object like this:\n````\n    HAL at home: object\n       start: \"2021-01-08 09:32:08\"\n       _ACpower: true\n       _ACunconnected: array[2]\n           0: \"umidificatore\"\n           1: \"Smart IR 3\"\n       _LANnet: true\n       _WiFinet: true\n       _WiFiunconnected: array[2]\n           0: \"umidificatore\"\n           1: \"Smart IR 3\"\n       _trgPing: object\n           count: 4\n           avg: 213\n           max: 260\n           min: 171\n````    \nAnd for any 'real' device (example):           \n\n````\n    Smart IR 1: object\n      _connected: true\n````\n\nnote:  `'system'` is built as an addon: if your application doesn't need those resources, you can disable/delete all _'system' nodes_. Connection events will no longer be processed.","x":480,"y":1000,"wires":[]},{"id":"68e9ad9d.b12ed4","type":"link in","z":"173260fb.d021ff","name":"auto start","links":["edf84736.d76338"],"x":615,"y":940,"wires":[["b5f9b583.aef128"]],"icon":"font-awesome/fa-expand"},{"id":"eaf3e0e8.2c619","type":"function","z":"173260fb.d021ff","name":"WiFi check","func":"\n// ceck  devices  AC and  AC + battery ('UPS'): all unconnected => WiFi down\n// version 1.1 (use of _callJSONMethod)\n// ===================================== do not change\n// --------------- locals\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname])); // ignore â \n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n//\nvar CONN = \"_connected\"; //  dps = CONN, same as name, see also sub-flow \"connected\" function\nvar PWIFI = \"_WiFinet\";\nvar PAC = \"_ACpower\";\nvar ULST = \"_WiFiunconnected\";\nvar tuyastatus;\nvar count = 0;\nvar tot = 0;\nvar arraybad = [];\n\nfunction _sendOUT(value, list) {\n    // builds an artificial OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_system\",\n            \"data\": {\n                \"dps\": {\n                    [PWIFI]: value,\n                    [ULST]: list\n                }\n            }\n        }\n    };\n    return newMsg;\n}\n\nfunction _checkWIFI(o) {\n    if ((o.power === undefined) || (o.power === 'BAT'))\n        return;\n    var stAcc = (o.name ===  undefined? o.id: o.name);     // real, only name/id\n    if (tuyastatus[stAcc] === undefined) return;\n    var usrCONN = _callJSONMethod(alld, \"__getDpsName\", o, CONN);\n    if (tuyastatus[stAcc][usrCONN] === undefined) return; //  _connected not updated\n// ok\n    tot++;\n    if (tuyastatus[stAcc][usrCONN]) {\n        count++;\n    } else {\n        arraybad.push(stAcc);\n    }\n}\n\n// ---------------- main\n// stuff to access data\nvar alld = global.get(\"alldevices\");\nif (alld === undefined)\n    return null;\ntuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined)\n    return null;\n// find object dp\nvar oDev =       _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\nvar sysDevName = _callJSONMethod(alld, \"__getDevName\", oDev);\nvar usrWIFI =    _callJSONMethod(alld, \"__getDpsName\", oDev, PWIFI);\nvar usrAC =      _callJSONMethod(alld, \"__getDpsName\", oDev, PAC);\n\nvar oldlist = flow.get(ULST);\nvar oldPWIFI = flow.get(PWIFI);\n\ncount = 0;\ntot = 0;\n\n// testing:\nalld.real.forEach(element => _checkWIFI(element));\n\n// function outputs:\nif (tot < 1) {\n    node.status({\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"WiFi devices not found\"\n    });\n    return null;\n}\n\nflow.set(ULST, arraybad);\nflow.set(PWIFI, (count > 0));\n\nvar sendnew = (JSON.stringify(oldlist) !== JSON.stringify(arraybad));\nvar sendPWIFI =((count > 0) !== oldPWIFI);\n\nnode.status({\n    fill: (count == 0 ? \"red\" : \"green\"),\n    shape: \"ring\",\n    text: \"WiFi devices ON: \" + count + \"/\" + tot\n});\n\nvar nmsg = _sendOUT((count > 0), JSON.stringify(arraybad));\n\nif (!sendPWIFI) {\n    delete nmsg.payload.data.dps[PWIFI];\n}\n\n// return(update, alarm)\nif (sendnew && (tuyastatus[sysDevName] !== undefined) && (tuyastatus[sysDevName][usrWIFI] === (count == 0)))\n\tif (tuyastatus[sysDevName][usrAC])  // alarm only if AC OK\n        return [nmsg, nmsg];\nif (sendnew)\n    return [nmsg, null];\n    \nreturn [null, null];\n","outputs":2,"noerr":0,"initialize":"/// Code added here will be run once\n// whenever the node is deployed.\n// --------------- locals\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n        var func = new Function(wrap(obj[fname])); // ignore â \n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n// ---------------- main\nvar PWIFI = \"_WiFinet\";\nvar ULST = \"_WiFiunconnected\";\n\n// stuff to access data and initialize tuyastatus\nvar alld = global.get(\"alldevices\");\nif (alld === undefined) return null;\n// find object dp\nvar oDev = _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\nvar sysDevName = _callJSONMethod(alld, \"__getDevName\", oDev);\nvar usrWiFi = _callJSONMethod(alld, \"__getDpsName\", oDev, PWIFI);\nvar usrLWiFi = _callJSONMethod(alld, \"__getDpsName\", oDev, ULST);\n//\ntuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined)\n    tuyastatus = {};\nif (tuyastatus[sysDevName] === undefined)\n    tuyastatus[sysDevName] = {};\n// init\ntuyastatus[sysDevName][usrWiFi] = \"start\";\ntuyastatus[sysDevName][usrLWiFi] = [\"new\"];\n//\nnode.status({\n    fill: \"yellow\",\n    shape: \"dot\",\n    text: \"start\"\n});\nglobal.set(\"tuyastatus\", tuyastatus);\nflow.set(ULST, [\"new\"]);\nflow.set(PWIFI, 'new');\n","finalize":"","x":1250,"y":1000,"wires":[["68d21677.32a9c8"],["9eef7e3e.15a96"]]},{"id":"482cde4d.4c944","type":"delay","z":"173260fb.d021ff","name":"","pauseType":"delay","timeout":"400","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":790,"y":1000,"wires":[["eaf3e0e8.2c619"]]},{"id":"a8d66c9a.4c12b","type":"http request","z":"173260fb.d021ff","name":"Nodered site get","method":"GET","ret":"txt","paytoqs":"ignore","url":"http://nodered.org","tls":"","persist":false,"proxy":"","authType":"","x":1060,"y":1060,"wires":[["ba7ba473.a1dfe8"]]},{"id":"ba7ba473.a1dfe8","type":"function","z":"173260fb.d021ff","name":"LAN check","func":"// checks WEB page\n// version 1.1 (use of _callJSONMethod)\n// ===================================== do not change\nPLAN = \"_LANnet\";\n//\nfunction _sendOUT(key, value) {\n    // builds a fake OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_system\",\n            \"data\": {\n                \"dps\": {\n                    [key]: value\n                }\n            }\n        }\n    };\n    return newMsg;\n}\n\nvar oldlan =flow.get(PLAN);\n// this test must be updated in case of node-red home page change\nvar newlan = (msg.payload.indexOf('is a programming tool for wiring') !== -1);\nif  (oldlan === newlan) return null;\n//\nflow.set(PLAN, newlan);\n//\nif (newlan) {\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"LAN connected\"\n    });\n    return (_sendOUT(PLAN, true));\n} else {\n    node.status({\n        fill: \"red\",\n        shape: \"ring\",\n        text: \"LAN disconnected\"\n    });\n    return (_sendOUT(PLAN, false));\n}\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n// --------------- locals\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n        var func = new Function(wrap(obj[fname])); // ignore â \n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\nPLAN = \"_LANnet\";\n// ---------------- main\n// stuff to access data\nvar alld = global.get(\"alldevices\");\nif (alld === undefined) return null;\n// find object dp\nvar oDev = _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\nvar sysDevName = _callJSONMethod(alld, \"__getDevName\", oDev);\nvar usrLAN = _callJSONMethod(alld, \"__getDpsName\", oDev, PLAN);\n// init\ntuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined)\n    tuyastatus = {};\nif (tuyastatus[sysDevName] === undefined)\n    tuyastatus[sysDevName] = {};\n // default\n tuyastatus[sysDevName][usrLAN] = \"start\";   \n //\nnode.status({\n    fill: \"yellow\",\n    shape: \"dot\",\n    text: \"start\"\n});\nglobal.set(\"tuyastatus\", tuyastatus);\nflow.set(PLAN, \"new\");\n\n","finalize":"","x":1250,"y":1060,"wires":[["f9994459.243578","68d21677.32a9c8"]]},{"id":"68d21677.32a9c8","type":"link out","z":"173260fb.d021ff","name":"","links":["9fe80f7e.f3f7e"],"x":1415,"y":820,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"e266674.29c2098","type":"function","z":"173260fb.d021ff","name":"ACpower check","func":"// devices AC powered + no batteries: all off => AC power down\n// version 1.1 (use of _callJSONMethod)\n// ===================================== do not change\nvar CONN = \"_connected\"; //  dps = CONN, see also sub-flow \"connected\" function\nvar PAC = \"_ACpower\"; // can have friendly name\nvar ULST = \"_ACunconnected\";\n//\nvar tuyastatus;\nvar count = 0;\nvar tot = 0;\nvar arraybad = [];\n// --------------- locals\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname])); // ignore â \n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\nfunction _sendOUT(value, list) {\n    // builds an artificial SET MULTIPLE message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_system\",\n            \"data\": {\n                \"dps\": {\n                    [PAC]: value,\n                    [ULST]: list\n                }\n            }\n        }\n    };\n    return newMsg;\n}\n// called for any real device in alldevices\nfunction _checkAC(o) {\n    if ((o.power === undefined) || (o.power !== 'AC'))\n        return;\n    var usrDev = (o.name === undefined) ? o.id : o.name;\n    if (tuyastatus[usrDev] === undefined) return; // not found\n    var usrCONN = _callJSONMethod(alld, \"__getDpsName\", o, CONN);\n    if (tuyastatus[usrDev][usrCONN] === undefined) return; //  _connected not updated\n    // ok, test\n    tot++;\n    if (tuyastatus[usrDev][usrCONN]) {\n        count++;\n    } else {\n        arraybad.push(usrDev);\n    }\n}\n\n\n// ---------------- main\n\n// stuff to access data\nvar alld = global.get(\"alldevices\");\nif (alld === undefined)\n    return null;\ntuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined)\n    return null;\n// find object dp\nvar oDev =       _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\nvar sysDevName = _callJSONMethod(alld, \"__getDevName\", oDev);\nvar usrPAC =     _callJSONMethod(alld, \"__getDpsName\", oDev, PAC);\n\nvar oldlist = flow.get(ULST);\nvar oldPAC = flow.get(PAC);\ncount = 0;\ntot = 0;\n\n// testing:\nalld.real.forEach(element => _checkAC(element));\nflow.set(ULST, arraybad);\nflow.set(PAC, (count > 0));\n\n// case: no devices - no send\nif (tot < 1) {\n    node.status({\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"AC devices not found\"\n    });\n    return null;\n}\n// conditions to send\nvar sendnew =  (JSON.stringify(oldlist) !== JSON.stringify(arraybad));\nvar sendPAC =((count > 0) !== oldPAC);\n\n// set status & msg\nnode.status({\n    fill: (count == 0 ? \"red\" : \"green\"),\n    shape: \"ring\",\n    text: \"AC devices ON: \" + count + \"/\" + tot\n});\nvar nmsg = _sendOUT((count > 0), JSON.stringify(arraybad));\nif (!sendPAC) {\n    delete nmsg.payload.data.dps[PAC];\n}\n\n// return(update, alarm)\nif ((tuyastatus[sysDevName] != undefined) && sendnew && (tuyastatus[sysDevName][usrPAC] === (count == 0)))\n    return [nmsg, nmsg];\nif (sendnew)\n    return [nmsg, null];\n\nreturn [null, null];\n","outputs":2,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n// --------------- locals\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n        var func = new Function(wrap(obj[fname])); // ignore â \n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n// ---------------- main\nvar PAC = \"_ACpower\"; // can have friendly name\nvar ULST = \"_ACunconnected\";\n// stuff to access data\nvar alld = global.get(\"alldevices\");\nif (alld === undefined)\n    return null;\n// find object dp\nvar oDev = _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\nvar sysDevName = _callJSONMethod(alld, \"__getDevName\", oDev);\nvar usrAC = _callJSONMethod(alld, \"__getDpsName\", oDev, PAC);\nvar usrLAC = _callJSONMethod(alld, \"__getDpsName\", oDev, ULST);\n//\ntuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined)\n    tuyastatus = {};\nif (tuyastatus[sysDevName] === undefined)\n    tuyastatus[sysDevName] = {};\n// init\ntuyastatus[sysDevName][usrAC] = \"start\";\ntuyastatus[sysDevName][usrLAC] = [\"new\"];\n//\nnode.status({\n    fill: \"yellow\",\n    shape: \"dot\",\n    text: \"start\"\n});\nglobal.set(\"tuyastatus\", tuyastatus);\nflow.set(ULST, [\"new\"]);\nflow.set(PAC, \"new\");","finalize":"","x":1260,"y":940,"wires":[["68d21677.32a9c8"],["58cf0889.35af68"]]},{"id":"9eef7e3e.15a96","type":"link out","z":"173260fb.d021ff","name":"WIFI ALARM","links":[],"x":1610,"y":1000,"wires":[],"l":true,"info":"TRIGGER for custom flows.\n\nFired at any change."},{"id":"58cf0889.35af68","type":"link out","z":"173260fb.d021ff","name":"AC ALARM","links":[],"x":1610,"y":940,"wires":[],"l":true,"info":"TRIGGER for custom flows.\n\nFired at any change."},{"id":"f9994459.243578","type":"link out","z":"173260fb.d021ff","name":"LAN ALARM","links":[],"x":1610,"y":1060,"wires":[],"l":true,"info":"TRIGGER for custom flows.\n\nFired at any change."},{"id":"f9a629eb.f4f498","type":"comment","z":"173260fb.d021ff","name":"tuyaDAEMON CORE","info":"","x":200,"y":40,"wires":[]},{"id":"81103bac.696bc8","type":"function","z":"173260fb.d021ff","name":"filter and upadate","func":"// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname])); // ignore â \n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\nvar CONN = \"_connected\";\n// stuff to access data\nvar alld = global.get(\"alldevices\");\nif (alld === undefined) return null;\ntuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined) return null;\nvar xdev = tuyastatus[msg.payload.deviceName];\nif (xdev === undefined) return null;\n// access key\nvar oDev =       _callJSONMethod(alld, \"__getODev\", msg.payload.deviceName, \"real\");\nvar usrCon =     _callJSONMethod(alld, \"__getDpsName\", oDev, CONN);\n// testing:\n\nvar oldconnected = xdev[usrCon];\nvar nowconnected = msg.payload.data.dps._connected;\n    // node.warn(\"test: connected \" +dev.name+\" new: \"+nowconnected+\" old: \"+oldconnected );\n    // filters only real connection change events.\n    if (nowconnected !== oldconnected) {\n        xdev[usrCon] = nowconnected;\n        global.set(\"tuyastatus\", tuyastatus);\n        return (msg);\n    }\nreturn (null);\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1670,"y":300,"wires":[["edf84736.d76338"]]},{"id":"2caa595d.2a0106","type":"function","z":"173260fb.d021ff","name":"*Info messages filter","func":"// kills unwanted tuyaDEAMON info messages \n// -----------------------------------------\n// add test as required, use only the payload string.\n//\n// filter example: \n// kills all TRIGGERS messages (see tuyaTRIGGER) note: changes if the names change.\n// payload: \"RX STATUS: 'tuya_bridge'/'reserved (trigger)' = 0\"\n if(msg.payload[0].startsWith(\"RX: 'tuya_bridge'\") && (msg.infodp == 7) )\n         return(null);\n         \n//  more....\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":900,"y":580,"wires":[["d62f5a18.fe10b8"]],"info":"On installation and test:\n  Best don't filer any message.\nOn production:\n  Better to filter not useful events.\n  _________________________________\n  \n See the example filter:\n Test can be done on \n     ` msg.payload.deviceId         for real devices\n       msg.payload.data.dps[<dpx>]  for specific events`\n  \n   "},{"id":"c90b7eb2.07595","type":"link in","z":"173260fb.d021ff","name":"from more connected","links":["63e6d5d.0a5da2c"],"x":1495,"y":20,"wires":[["81103bac.696bc8"]],"icon":"font-awesome/fa-expand"},{"id":"18817677.061b9a","type":"link out","z":"173260fb.d021ff","name":"fake cmds ","links":["3d5351ac.12b92e","85849e54.4b055","ed7caa46.78c218","369ab28b.348ebe"],"x":690,"y":260,"wires":[],"icon":"font-awesome/fa-expand","l":true,"info":"OUTPUT for commands to fake devices, unprocessed by tuiaDAEMON CORE.\n\nMessages are as sended (see `IN commands` node) plus\n   `msg.to = iDdevice`, added to speedup."},{"id":"70d88fb4.7fcc2","type":"function","z":"173260fb.d021ff","name":"*TX DB query filter","func":"// kills unwanted DB queries\n// -----------------------------------------\n// add test as required, use:\n// msg.payload.deviceId  (device|cid)\n// msg.topic = SQL query\n\n\n// if ( msg.payload.deviceId == \"system\") return null;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":950,"y":640,"wires":[["1a711832.f93bb8"]],"info":"On installation and test:\n  Best don't filer any message.\nOn production:\n  Better to filter not useful events.\n  _________________________________\n  \n See the example filter:\n Test can be done on \n     ` msg.payload.deviceId         for real devices\n       msg.payload.data.dps[<dpx>]  for specific events`\n  \n   "},{"id":"edf84736.d76338","type":"link out","z":"173260fb.d021ff","name":"Ev.conn.","links":["68e9ad9d.b12ed4","9fe80f7e.f3f7e"],"x":1635,"y":380,"wires":[],"icon":"font-awesome/fa-expand","info":"TRIGGER internal/external.\n\nFired at any change of devices connection status.\nThis event is logged and fires an update of AC/LAN/AC properties in _system"},{"id":"85849e54.4b055","type":"link in","z":"173260fb.d021ff","name":"cmd IN","links":["18817677.061b9a"],"x":775,"y":880,"wires":[["39b988f0.76c6b8"]],"icon":"font-awesome/fa-expand"},{"id":"39b988f0.76c6b8","type":"function","z":"173260fb.d021ff","name":"pick and execute","func":"// Implementation of GET/SET/SCHEMA/MULTIPLE  commands \n// for 'abstract' device \"_system\"\n// accepts only GET: fires a data refresh.\n// absorb all msg.\n// version 1.1 (use of _callJSONMethod)\n\n// --------------- locals\nvar alld = global.get(\"alldevices\");\n\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname]));       // ignore â \n    return func.call(null).call(obj, a, b, c, d);    //invoke the function using arguments\n}\n\n// test: _system GET command? \nfunction _isGetCommand (idDev, msx) {\n return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value === undefined));\n}\n\n// ------------- main\n//  partial implementation of _system GET (== 'update now globalstatus') for\n//  _LANnet, _ACpower, _ACunconnected, _WiFinet, _WiFiunconnected\n//  any output fires a flow that updates globalstatus\n\nif (_isGetCommand(\"_system\", msg)) {  // a GET\n// find object dp\n    var oDev = _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\n    var oPx  = _callJSONMethod(alld, \"__getODps\", oDev,  msg.payload.property);\n// outputs: /AC/WiFi/Lan/\n    switch (oPx.dp){\n      case \"_ACpower\":\n      case \"_ACunconnected\":\n            return([msg,null, null]);\n      case \"_WiFinet\":\n      case \"_WiFiunconnected\":\n             return([null,msg, null]);\n      case \"_LANnet\":\n            return([null,null, msg]);\n   }\n// not found: no error.  More _system commands  can exist, in other flows\n}\nreturn([null,null, null]);\n","outputs":3,"noerr":0,"initialize":"","finalize":"","x":910,"y":880,"wires":[["e266674.29c2098"],["eaf3e0e8.2c619"],["a8d66c9a.4c12b"]]},{"id":"642996df.e68388","type":"inject","z":"638c6657.ce65c8","name":"START PING","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":410,"y":640,"wires":[["8f6b2a1d.3ddf58"]]},{"id":"d6c8adeb.cd279","type":"link out","z":"638c6657.ce65c8","name":"to send","links":["69321d9a.30b7d4"],"x":1235,"y":540,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"faeef0bb.0924b","type":"function","z":"638c6657.ce65c8","name":"ACK  process","func":"var delta;\n\n// test on all tuya_bridge messages\n// output:  finish/ reset/more loops\nif  ((msg.payload.tuyatrigger > 699) &&\n     (msg.payload.tuyatrigger < 1000)){\n     // fallback in case of missed  ACK: restart and keep alive\n     flow.set(\"tsstart\", 0);\n     return([null, msg, msg]); \n     }\n\nif(msg.payload.tuyatrigger != 0 ) // not ACK,  nothing to do\n     return([null,null,null]); \n\n// standard 0 ACK,  nothing to do\n    var old = flow.get(\"tsstart\");\n    if (old === 0)  return([null,null,null]);   // not in ping test\n    \n    var back = Date.now();\n    delta = back - old;\n    if ((delta > 2000) || (delta < 20)) { \n// fallback in case of timeout: restart and keep alive\n         flow.set(\"tsstart\", 0);\n         return([null, null, msg]);\n         }\n\n// ok, updates stats\n  var stats = flow.get(\"pingstat\") ; \n //flow.set(\"pingstat\",{\n //     test: 0,\n //     total:0,\n //     min: 100000000000,\n //     max:0\n // set data    \n   stats.sum += delta;\n    if( stats.min > delta)\n         stats.min = delta;\n    if( stats.max < delta)\n         stats.max = delta;\n    stats.test++;  \n    stats.total--;   \n    flow.set(\"pingstat\", stats);\n \n  if (stats.total >0)  {       // more  tests  \n      flow.set(\"tsstart\", 0);\n      return [null, null, msg];\n      }   \n\n// done, does statistics & msg  \n var st = {\n    \"deviceId\":\"_system\",\n    \"data\":{\n       \"dps\":{\n           \"_trgPing\":{\n               \"count\": stats.test,\n               \"avg\": Math.floor(stats.sum/stats.test),\n               \"max\": stats.max,\n               \"min\": stats.min\n           }\n       }\n    }};  \n   msg.payload = st;\n   flow.set(\"tsstart\", 0);\n// sends results  \n   return([msg, null, null]);\n\n","outputs":3,"noerr":0,"initialize":"","finalize":"","x":650,"y":540,"wires":[["2fb79388.82d8cc"],["5bc8ec20.e12ff4"],["8bc0b981.0ca808"]],"outputLabels":["log result","reset0","more"]},{"id":"7231e545.53e66c","type":"link in","z":"638c6657.ce65c8","name":"in msg","links":["6da77dc2.b387a4"],"x":535,"y":540,"wires":[["faeef0bb.0924b"]],"icon":"font-awesome/fa-expand"},{"id":"8bc0b981.0ca808","type":"delay","z":"638c6657.ce65c8","name":"more: delay 3","pauseType":"delay","timeout":"3","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":860,"y":580,"wires":[["2af08fdb.f4934"]]},{"id":"57526a3d.919364","type":"comment","z":"638c6657.ce65c8","name":" _system :  trigger related cmds","info":"device: _system property: _trgPing\n\nThis flow implements a trigger ping test (optional).\nA refresh can be triggered using the inject node or a standard user GET command.\nDo it in a quiet moment to avoid interferences.\n\n","x":220,"y":460,"wires":[]},{"id":"39de0ee1.2f0352","type":"function","z":"638c6657.ce65c8","name":"4","func":"\n flow.set(\"tsstart\", 0);\n flow.set(\"pingstat\",{\n      total:node.name,\n      test: 0,\n      sum:0,\n      min: 100000000000,\n      max:0\n});\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n flow.set(\"tsstart\", 0);","finalize":"","x":750,"y":640,"wires":[["2af08fdb.f4934"]],"info":"Sets node name to required pings number for the test"},{"id":"6c92c626.076118","type":"function","z":"638c6657.ce65c8","name":"_system cmd selector","func":"// selects&executes commands for _system:_trgPing, _trigger\n// version 1.1 (use of _callJSONMethod)\n// --------------- locals\nvar alld = global.get(\"alldevices\");\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname]));       // ignore â \n    return func.call(null).call(obj, a, b, c, d);    //invoke the function using arguments\n}\n\n// test: _system GET command? \nfunction _isGetCommand (idDev, msx) {\n return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value === undefined));\n}\n// test: _system SET command? \nfunction _isSetCommand (idDev, msx) {\n return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value !== undefined));\n}\n\n// ------------- main\n//  partial implementation of _system GET for GET _trgPing SET _trigger\n\nif (_isGetCommand(\"_system\", msg)) {  // a GET\n// find object dp\n    var oDev = _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\n    var oPx  = _callJSONMethod(alld, \"__getODps\", oDev,  msg.payload.property);\n//\n  if (oPx.dp != undefined)  // found\n    switch (oPx.dp){\n          case \"_trgPing\":\n                return([null, msg]);   //to  _trgPing:output 2\n       }\n    } \n    \nif (_isSetCommand(\"_system\", msg)) {  // a SET\n// find object dp\n    var GDev = _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\n    var GoPx  = _callJSONMethod(alld, \"__getODps\", GDev,  msg.payload.property);\n//\n  if (GoPx.dp != undefined)  // found\n    switch (GoPx.dp){\n       case \"_trigger\":\n           msg = {\n             \"payload\": {\n               \"dps\":7, \n               \"set\": parseInt(msg.payload.value)       \n                }\n           };\n           return([msg, null]);   // _to tuya_bridge:output 1\n       }\n    }    \n\n// ignore \nreturn([null]);\n","outputs":2,"noerr":0,"initialize":"","finalize":"","x":260,"y":540,"wires":[["790c7224.74435c","65cdad00.79d0e4"],["8f6b2a1d.3ddf58","f4c153fd.a490d"]],"info":"Select GET/SET/SCHEMA/MULTIPLE  commands \nfor 'fake' device\n\nImplementation:\n\n\"_system\":\"_trgPing\" accepts only GET: fires a data refresh.\n             \nThe stadard GET tuyaDAEMON request\n````\n    msg.payload:{\n        \"device\":\"_system\", \n        \"property\":\"_trgPing\"  \n        } \n````        \nfires a flow that implements the command.\n"},{"id":"8f6b2a1d.3ddf58","type":"delay","z":"638c6657.ce65c8","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":600,"y":640,"wires":[["39de0ee1.2f0352"]]},{"id":"5bc8ec20.e12ff4","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"reset: trigger0","env":[{"name":"TRGnumber","value":"0","type":"str"}],"x":1060,"y":540,"wires":[["d6c8adeb.cd279"]]},{"id":"2fb79388.82d8cc","type":"link out","z":"638c6657.ce65c8","name":"end: to log","links":["9fe80f7e.f3f7e"],"x":795,"y":480,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"c81edba3.cbcd58","type":"delay","z":"638c6657.ce65c8","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"20","nbRateUnits":"10","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":480,"y":180,"wires":[["bd44880d.8cdda8"]],"info":"limit throughput, but allows smooth operations and less connection problems"},{"id":"fe1a20ab.104ce","type":"delay","z":"173260fb.d021ff","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"40","nbRateUnits":"10","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":400,"y":620,"wires":[["81a9b329.092b1","d943c0e6.b7946","bc933c53.b4bd9"]]},{"id":"3d5351ac.12b92e","type":"link in","z":"638c6657.ce65c8","name":"IN cmd","links":["18817677.061b9a"],"x":115,"y":540,"wires":[["6c92c626.076118"]],"icon":"font-awesome/fa-expand"},{"id":"5777b120.3dc3e","type":"delay","z":"173260fb.d021ff","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"30","nbRateUnits":"10","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":400,"y":120,"wires":[["d4a32280.a4dc8","1a9b7af5.924e85"]]},{"id":"9efb8156.f33d4","type":"link out","z":"638c6657.ce65c8","name":"to mirror devices","links":["3246c6c8.f9ed9a","7724fe64.ce399","d3e4089a.6570c8","ae124920.c94578"],"x":1160,"y":280,"wires":[],"icon":"font-awesome/fa-expand","l":true},{"id":"7724fe64.ce399","type":"link in","z":"4bebbdfa.41af64","name":"siren troggers IN","links":["9efb8156.f33d4","470e4807.b4b4f8","8ab4238e.8fc8c"],"x":255,"y":760,"wires":[["9bff7a92.229d98"]]},{"id":"9bff7a92.229d98","type":"switch","z":"4bebbdfa.41af64","name":"smoke detector","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"eq","v":"1800","vt":"str"},{"t":"eq","v":"1810","vt":"str"},{"t":"eq","v":"1820","vt":"str"},{"t":"eq","v":"1830","vt":"str"},{"t":"eq","v":"1840","vt":"str"},{"t":"eq","v":"1850","vt":"str"}],"checkall":"false","repair":false,"outputs":6,"x":420,"y":760,"wires":[["dfbd21ba.05302"],["41bd356c.fc27fc"],["f0d9e484.2247c8"],["50659a72.879d14"],["9c0ddbf6.c9b378"],["cb9729f6.064aa8"]],"info":"for my device\ndp = 102    // countdown"},{"id":"dfbd21ba.05302","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"to log 1800: alarm ON","env":[{"name":"deviceID","value":"317080408caab5*******","type":"str"},{"name":"fakeDP","value":"1800","type":"num"},{"name":"value","value":"ON","type":"str"}],"x":740,"y":640,"wires":[["54d03d6e.945994"]]},{"id":"41bd356c.fc27fc","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"to log 1810: alarm OFF","env":[{"name":"deviceID","value":"317080408ca********","type":"str"},{"name":"fakeDP","value":"1800","type":"num"},{"name":"value","value":"OFF","type":"str"}],"x":750,"y":680,"wires":[["54d03d6e.945994"]]},{"id":"f0d9e484.2247c8","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"to log 1820: battery LOW","env":[{"name":"deviceID","value":"317080408caab*******","type":"str"},{"name":"fakeDP","value":"1820","type":"num"},{"name":"value","value":"LOW","type":"str"}],"x":750,"y":720,"wires":[["54d03d6e.945994"]]},{"id":"54d03d6e.945994","type":"link out","z":"4bebbdfa.41af64","name":"to logging","links":["9fe80f7e.f3f7e"],"x":955,"y":760,"wires":[]},{"id":"d6618ecb.a3d0b","type":"comment","z":"4bebbdfa.41af64","name":"converts TUYATRG to device changes","info":"Switch node to select incoming TRIGGER from Tuya (status update)\nThe selected TUYATRG are converted to device/property/value and sended to tuyaDAEMON ('to logging' link) for standard processing","x":410,"y":680,"wires":[]},{"id":"71493ceb.b6f104","type":"function","z":"4bebbdfa.41af64","name":"*pick and execute","func":"// Implementation of GET/SET/SCHEMA/MULTIPLE  commands\n// for an 'abstract' device\n//    1) verify incoming command\n//    2) update the global.tuyadevice (if required)\n//    3) one output for every TRIGGER to Tuya cloud\n//\n// smoke detector accepts only SET, absorb all msg.\n// version 1.1 (use of _callJSONMethod)\n// --------------- locals\nvar alld = global.get(\"alldevices\");\n\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n        var func = new Function(wrap(obj[fname])); // ignore â \n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\n// test: idDev GET command?\nfunction _isGetCommand(idDev, msx) {\n    return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value === undefined));\n}\n\n// test: idDev SET command?\nfunction _isSetCommand(idDev, msx) {\n    return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value !== undefined));\n}\n\n//  set (and create, if required) global.tuyastatus structure from: dev-name, dp-name, value\nfunction _setGlobalValue(devname, dpname, val) {\n    if ((devname === undefined) || (dpname === undefined) || (val === undefined))\n        return;\n    var tuyastatus = global.get(\"tuyastatus\");\n    if (tuyastatus == undefined)\n        tuyastatus = {};\n    if (tuyastatus[devname] == undefined)\n        tuyastatus[devname] = {};\n    tuyastatus[devname][dpname] = val;\n    global.set(\"tuyastatus\", tuyastatus);\n}\n\n// ------------- main\n// select and execute all commands for 'smoke detector'\n// accepts only SET. final: absorb all bad msg + error.\n\n// mapping msg to outputs\nconst DEVID = \"317080408caab5*****\";\n//\nif (_isSetCommand(DEVID, msg)) { // test: is SET\n    // -----------  get obj-dev and obj-dp\n    // find object dp\n    var oDev = _callJSONMethod(alld, \"__getODev\", DEVID, \"fake\");\n    var oPx = _callJSONMethod(alld, \"__getODps\", oDev, msg.payload.property);\n    //\n    if (oPx !== undefined)\n        switch (oPx.dp) {\n        case \"1840\":\n            // -----------  select by value - tolerant, accepts 'OFF','NO', 0, \"0\", \"\", [],[0],[[]], null, undefined :  see https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\n            //  language en/it\n            if ((msg.payload.value == null) || (msg.payload.value == false) || (msg.payload.value.toUpperCase() === \"OFF\") || (msg.payload.value.toUpperCase() === \"NO\"))\n                return ([null, msg]); // output#2\n            //  else is ON\n            return ([msg]); // output#1\n        }\n    //\n}\n\n// default: warning, bad command\nif (msg.to === DEVID) {\n    node.warn([\"The command '\" + msg.payload.property + \"=\" + msg.payload.value + \"' is unknown for smoke detector device.'\" + msg.payload.device + \"'(1)\", odev]);\n}\n// total 3 outputs\n","outputs":2,"noerr":0,"initialize":"","finalize":"","x":410,"y":940,"wires":[["6c452e2f.f77e"],["51abfb8.0f92a04"]]},{"id":"369ab28b.348ebe","type":"link in","z":"4bebbdfa.41af64","name":"siren commands IN","links":["18817677.061b9a"],"x":255,"y":940,"wires":[["71493ceb.b6f104"]]},{"id":"6c452e2f.f77e","type":"subflow:66ca1554.e4c85c","z":"4bebbdfa.41af64","name":"5800 SET silence ON","env":[{"name":"TRGnumber","value":"5800","type":"str"}],"x":760,"y":900,"wires":[["83ab4822.a4d028"]]},{"id":"83ab4822.a4d028","type":"link out","z":"4bebbdfa.41af64","name":"to send","links":["69321d9a.30b7d4"],"x":955,"y":940,"wires":[]},{"id":"51abfb8.0f92a04","type":"subflow:66ca1554.e4c85c","z":"4bebbdfa.41af64","name":"5810 SET silence OFF","env":[{"name":"TRGnumber","value":"2810","type":"str"}],"x":760,"y":940,"wires":[["83ab4822.a4d028"]]},{"id":"67189163.f24ea","type":"comment","z":"4bebbdfa.41af64","name":"converts SET requests to REDTRG (for Tuya)","info":"For 'mirror' and 'fake' devices:\nThis custom flow decodes user command relatives to a device:\n\nBased on device(/propery(/value)) this flow can:\n  - do local processing\n  - send REDTRG to Tuya-cloud\n  - produce a WARNING","x":430,"y":880,"wires":[]},{"id":"f1dc63d6.6e4b5","type":"comment","z":"4bebbdfa.41af64","name":"MIRROR DEVICE smoke detector","info":"\nsee https://github.com/msillano/tuyaDAEMON/wiki/mirror-device-'Smoke_Detector':-case-study","x":240,"y":620,"wires":[]},{"id":"aba38dbb.f8b33","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"send ACK","env":[{"name":"TRGnumber","value":"0","type":"str"}],"x":1120,"y":220,"wires":[["5024d2e0.b05cec"]]},{"id":"242c3b02.88b314","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"ping: trigger1000","env":[{"name":"TRGnumber","value":"1000","type":"str"}],"x":1110,"y":640,"wires":[["d6c8adeb.cd279"]]},{"id":"2af08fdb.f4934","type":"function","z":"638c6657.ce65c8","name":"start time","func":"\nflow.set(\"tsstart\",Date.now());\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":920,"y":640,"wires":[["242c3b02.88b314"]]},{"id":"30ac034a.029d3c","type":"change","z":"638c6657.ce65c8","name":"dp convert","rules":[{"t":"set","p":"payload.tuyatrigger","pt":"msg","to":"payload.data.dps[\"7\"]","tot":"msg"},{"t":"set","p":"payload.data","pt":"msg","to":"{}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":710,"y":260,"wires":[["8b585752.c9b818"]]},{"id":"6da77dc2.b387a4","type":"link out","z":"638c6657.ce65c8","name":"to ping test","links":["7231e545.53e66c"],"x":1075,"y":340,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"1029af2.b1d2451","type":"trigger","z":"173260fb.d021ff","name":"","op1":"","op2":"ok","op1type":"nul","op2type":"str","duration":"2","extend":true,"overrideDelay":false,"units":"s","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":780,"y":1060,"wires":[["a8d66c9a.4c12b"]]},{"id":"98d8b5ff.95d078","type":"inject","z":"d02ad611.d94bc8","name":"test  SET: tuya_bridge switch  OFF [1]","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"tuya_bridge\",\"property\":\"relay\",\"value\":\"OFF\"}","payloadType":"json","x":240,"y":160,"wires":[["2abb8b42.fb0014"]]},{"id":"ff19fbce.18c7b8","type":"inject","z":"d02ad611.d94bc8","name":"test  GET SYSTEM: ACpower","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"_system\",\"property\":\"_ACpower\"}","payloadType":"json","x":760,"y":80,"wires":[["25e4f27d.911f4e"]]},{"id":"bc2781c7.c8bf1","type":"inject","z":"d02ad611.d94bc8","name":"test  GET SYSTEM: WiFinet","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"_system\",\"property\":\"_WiFinet\"}","payloadType":"json","x":760,"y":160,"wires":[["25e4f27d.911f4e"]]},{"id":"de2910d6.38337","type":"inject","z":"d02ad611.d94bc8","name":"test  GET SYSTEM: WiFiunconnected","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"_system\",\"property\":\"_WiFiunconnected\"}","payloadType":"json","x":790,"y":200,"wires":[["25e4f27d.911f4e"]]},{"id":"1b2b3b98.f41f14","type":"inject","z":"d02ad611.d94bc8","name":"test  GET SYSTEM: LANnet","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"_system\",\"property\":\"_LANnet\"}","payloadType":"json","x":760,"y":240,"wires":[["25e4f27d.911f4e"]]},{"id":"1016d7ab.1925e8","type":"inject","z":"d02ad611.d94bc8","name":"test  GET SYSTEM: ACunconnecter","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"_system\",\"property\":\"_ACunconnected\"}","payloadType":"json","x":780,"y":120,"wires":[["25e4f27d.911f4e"]]},{"id":"ba032158.cbd06","type":"inject","z":"d02ad611.d94bc8","name":"test  GET SYSTEM: trgPing","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"_system\",\"property\":\"_trgPing\"}","payloadType":"json","x":750,"y":280,"wires":[["25e4f27d.911f4e"]]},{"id":"25e4f27d.911f4e","type":"link out","z":"d02ad611.d94bc8","name":"","links":["8a1da02d.424ae"],"x":1095,"y":80,"wires":[]},{"id":"cf1237ea.b909e8","type":"comment","z":"638c6657.ce65c8","name":"Debug pad options","info":"**Disable unwonted trace messages on debug pad.**\n\n - Disable unwonted debug nodes.\n  \n ","x":370,"y":320,"wires":[]},{"id":"50659a72.879d14","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"to log 1830: battery OK","env":[{"name":"deviceID","value":"317080408ca******","type":"str"},{"name":"fakeDP","value":"1820","type":"num"},{"name":"value","value":"OK","type":"str"}],"x":750,"y":760,"wires":[["54d03d6e.945994"]]},{"id":"ecbcb8a7.3bfe28","type":"switch","z":"b10f9b24.3fb858","name":"TRIGGER selector","property":"payload.data.dps[\"102\"]","propertyType":"msg","rules":[{"t":"eq","v":"1810","vt":"str"},{"t":"eq","v":"<more triggers>","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":370,"y":200,"wires":[["3aff7447.b8e14c"],["16ac8a5a.d699e6"]],"info":"for my device\ndp = 102    // countdown"},{"id":"6d46880b.ff93a8","type":"subflow:66ca1554.e4c85c","z":"b10f9b24.3fb858","name":"send ACK","env":[{"name":"TRGnumber","value":"0","type":"str"}],"x":340,"y":140,"wires":[["38b9c7dd.edfd08"]]},{"id":"3aff7447.b8e14c","type":"link out","z":"b10f9b24.3fb858","name":"TRIGGER1810","links":[],"x":600,"y":180,"wires":[],"l":true},{"id":"16ac8a5a.d699e6","type":"link out","z":"b10f9b24.3fb858","name":"more triggers...","links":[],"x":600,"y":220,"wires":[],"l":true},{"id":"93a3390b.661618","type":"comment","z":"b10f9b24.3fb858","name":"tuyaTRIGGER for node-red users","info":"# tuyaTRIGGER for node-red users\n\n_This flow enables node-red users to add remote control and voice control to their projects in a simple way._\n\n![](./../../pics/tuyadaemon06.jpg)\n\nIt uses the `tuya cloud` and only `one switch` device: because _Smartlife_ app and the use of  _Tuya cloud_ are free, only you need to buy the device (USD 8-10), used as dual port register. Requires WiFi.\n\nOn your _smartlife_ app you can create up to 100 buttons to activate your TRIGGER (e.g. 1800, 1810... 1890), you can enable up to 20 other users and you get worldwide remote control over your node-red flows. Button names and icons are customizable.\n\nIf you want, Googlehome can also add _voice control_ to your TRIGGER.\n\nThis is a downsizing of [tuyaTRIGGER](https://github.com/msillano/tuyaDAEMON/tree/main/tuyaTRIGGER), created to _integrate node-red into the tuya ecosystem for home automation_. Watch it for more details on devices tested for this use.\n\n- Install in node-red the node (I use 'manage pallette'): [node-red-contrib-tuya-smart-device](https://github.com/vinodsr/node-red-contrib-tuya-smart-device)\n- To use this node, you need the 'id' and 'key' of your device: see [here](https://github.com/codetheweb/tuyapi/blob/master/docs/SETUP.md)\n-_note: based on switch used, you may must change the 'data point' used by the counter: change it in nodes 'send ACK' and 'trigger selector'._\n","x":210,"y":80,"wires":[]},{"id":"d6f44262.bcd7","type":"status","z":"173260fb.d021ff","name":"spy status","scope":["1a711832.f93bb8"],"x":1260,"y":700,"wires":[["b9b5886c.153d98"]]},{"id":"b9b5886c.153d98","type":"function","z":"173260fb.d021ff","name":"DB check","func":"// checks DB status\n// version 1.1 (use of _callJSONMethod)\n// ===================================== do not change\nPDB = \"_Dbase\";\n//\nfunction _sendOUT(key, value) {\n    // builds a fake OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_system\",\n            \"data\": {\n                \"dps\": {\n                    [key]: value\n                }\n            }\n        }\n    };\n    return newMsg;\n}\n\n// ---------------- main\n// catch bad\nif (msg.status === undefined) return null;\n//\nvar olddb =flow.get(PDB);\nvar newdb = ((msg.status.text == \"connected\") || (msg.status.text == \"OK\"));\nif  (olddb == newdb) return null;\n//\nflow.set(PDB, newdb);\n//\nif(newdb) {\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"DB connected\"\n    });\n    return (_sendOUT(PDB, true));\n} else {\n    node.status({\n        fill: \"red\",\n        shape: \"ring\",\n        text: \"DB disconnected\"\n    });\n    return (_sendOUT(PDB, false));\n}\nreturn null;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n// --------------- locals\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n        var func = new Function(wrap(obj[fname])); // ignore â \n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\nPDB = \"_Dbase\";\n// ---------------- main\n// stuff to access data\nvar alld = global.get(\"alldevices\");\nif (alld === undefined)\n    return null;\n// find object dp\nvar oDev = _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\nvar sysDevName = _callJSONMethod(alld, \"__getDevName\", oDev);\nvar usrDB = _callJSONMethod(alld, \"__getDpsName\", oDev, PDB);\n//\ntuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined)\n    tuyastatus = {};\nif (tuyastatus[sysDevName] === undefined)\n    tuyastatus[sysDevName] = {};\n// default\ntuyastatus[sysDevName][usrDB] = null;\n//\nnode.status({\n    fill: \"yellow\",\n    shape: \"dot\",\n    text: \"start\"\n});\nglobal.set(\"tuyastatus\", tuyastatus);\nflow.set(PDB, \"new\");\n","finalize":"","x":1240,"y":880,"wires":[["68d21677.32a9c8","d6451e16.628bb"]]},{"id":"d6451e16.628bb","type":"link out","z":"173260fb.d021ff","name":"DB ALARM","links":[],"x":1610,"y":880,"wires":[],"l":true,"info":"TRIGGER for custom flows.\n\nFired at any change."},{"id":"3ef71ed3.e31082","type":"link out","z":"173260fb.d021ff","name":"start DEAMON","links":[],"x":1600,"y":820,"wires":[],"l":true},{"id":"51e7a359.57146c","type":"link in","z":"173260fb.d021ff","name":"","links":["db455c46.e4ac7"],"x":1475,"y":820,"wires":[["3ef71ed3.e31082"]],"icon":"font-awesome/fa-expand"},{"id":"b5f9b583.aef128","type":"trigger","z":"173260fb.d021ff","name":"","op1":"1","op2":"0","op1type":"str","op2type":"str","duration":"1500","extend":true,"overrideDelay":false,"units":"ms","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":800,"y":940,"wires":[["482cde4d.4c944","1029af2.b1d2451","e266674.29c2098"]]},{"id":"d4e3723.2ce099","type":"inject","z":"d02ad611.d94bc8","name":"test GET: tuya_bridge switch ","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"device\":\"tuya_bridge\",\"property\":\"relay\"}","payloadType":"json","x":220,"y":80,"wires":[["2abb8b42.fb0014"]]},{"id":"181b544f.5bb98c","type":"http in","z":"173260fb.d021ff","name":"REST tuyaDAEMON","url":"/tuyaDAEMON","method":"get","upload":false,"swaggerDoc":"","x":190,"y":780,"wires":[["6fe3ccb.d4ab534"]]},{"id":"e166ce71.eb209","type":"change","z":"173260fb.d021ff","name":"Set Headers","rules":[{"t":"set","p":"headers","pt":"msg","to":"{}","tot":"json"},{"t":"set","p":"headers.content-type","pt":"msg","to":"application/json","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":710,"y":800,"wires":[["834eb8f4.e36dd8"]]},{"id":"834eb8f4.e36dd8","type":"http response","z":"173260fb.d021ff","name":"HTTP response","statusCode":"","headers":{},"x":880,"y":800,"wires":[]},{"id":"6fe3ccb.d4ab534","type":"function","z":"173260fb.d021ff","name":"interface","func":"//  for applications, fast processing, immediate answer.... \n//  Return JSON; data or status.\n//  GET, SCHEMA: solved from tuyastaus, returns data (not stored in log)\n//  SET, MULTIPLE: sended to tuyaDEAMON, returns 'status:sended' (stored in log)\n//-------------------------------- local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n   // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n   var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n      var func = new Function(wrap(obj[fname])); // ignore the node-red â  warning\n   return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\n\n\nvar comm = {};\nvar tuyastatus = global.get(\"tuyastatus\");\nif (msg.payload.device === undefined){     // back devices list immediate\n             msg.payload = [];\n             if (tuyastatus !== undefined) \n                 msg.payload = Object.keys(tuyastatus);\n             return ([msg, null]);\n       }\nif ((tuyastatus !== undefined) && (msg.payload.device !== undefined) && (tuyastatus[msg.payload.device] !== undefined)) { // ok device field\n \n   if ((msg.payload.property === undefined) &&(msg.payload.value === undefined)) {  //----- is SCHEMA\n         var jdat = JSON.stringify(tuyastatus[msg.payload.device]);\n         msg.payload = jdat ;\n         return ([msg, null]);\n      }\n      \n   if ((msg.payload.property !== undefined) && (msg.payload.property.toUpperCase() === 'MULTIPLE') \n            && (msg.payload.value !== undefined)) {\n         comm['payload'] = msg.payload;\n         node.send([null, comm]);\n         msg.payload = {\"status\": \"sended\"};\n         return [msg, null];\n      }\n     if ((msg.payload.property !== undefined) &&\n        (tuyastatus[msg.payload.device][msg.payload.property] === undefined)){  //------ maybe is ID?\n         var alld = global.get(\"alldevices\");\n         var o = _callJSONMethod(alld, \"__getODev\", msg.payload.device);\n         var p = _callJSONMethod(alld, \"__getODps\", o, msg.payload.property );\n         if ((p !== undefined) &&  (p.name !== undefined))\n                msg.payload.property  = p.name ;  // converted to name\n      }\n\n   if ((msg.payload.property !== undefined) && (msg.payload.value === undefined)) { // -------- is GET, read data from tuyastatus\n         msg.payload['value'] = tuyastatus[msg.payload.device][msg.payload.property];\n         var jdat2 = JSON.stringify(msg.payload);\n         msg.payload = jdat2;\n         return ([msg, null]);\n         } \n   if ((msg.payload.property !== undefined) && (msg.payload.value !== undefined)) { \n                                                      //--------------------------------------- is SET, process it\n         comm['payload'] = msg.payload;\n         node.send([null, comm]);\n         msg.payload = {\"status\": \"sended\"};\n         return [msg, null];\n         }\n    //--------------------------- the property does not exist ??\n   \n// ======================  if here, only PROPERTY error\nnode.warn(\"REST ERROR: not found the property (\"+msg.payload.property + \") in '\"+ msg.payload.device+\"'\");\nmsg.payload = { \"status\": \"ERROR: not found the property (\"+msg.payload.property + \") in '\"+ msg.payload.device+\"'\" };\nreturn [msg, null];\n} // ok device ends\n// ======================  if here, only DEVICE ERROR\nnode.warn(\"REST ERROR: not found the device '\"+ msg.payload.device+\"'\");\nmsg.payload = { \"status\": \"ERROR: not found the device '\"+msg.payload.device+\"'\" };\nreturn [msg, null];\n\n\n","outputs":2,"noerr":0,"initialize":"","finalize":"","x":420,"y":780,"wires":[["e166ce71.eb209"],["58c718a1.bbd748"]]},{"id":"58c718a1.bbd748","type":"link out","z":"173260fb.d021ff","name":"","links":["8a1da02d.424ae"],"x":535,"y":840,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"b1eb4c66.e29de","type":"http in","z":"173260fb.d021ff","name":"REST tuyaDAEMONdebug","url":"/tuyaDAEMONdebug","method":"get","upload":false,"swaggerDoc":"","x":210,"y":900,"wires":[["65eb2aa.067dfd4"]]},{"id":"65eb2aa.067dfd4","type":"function","z":"173260fb.d021ff","name":"automata","func":"\n//  for debug, all request sended to devices,\n//  asyncronous, wait device answer or timout (set here and in external trigger node)\n//  Return JSON, data or status.\nvar timeout = 4; // in sec, less than 'REST timeout'  node\nvar restautoma = flow.get('restautoma');\nswitch (restautoma) {\ncase '_wait':\n   if ((msg.req !== undefined) && (msg.payload !== undefined))  { // HTTP message\n      if (msg.payload.device === undefined){     // back devices list immediate\n              // immediate answer\n             msg.payload = [];\n             var tuyastatus = global.get(\"tuyastatus\");\n             if (tuyastatus !== undefined) \n                 msg.payload = Object.keys(tuyastatus);\n            return ([null, msg]);\n       } else {            // send request, set timeout\n        var comm = {};\n        comm['payload'] = msg.payload;\n        flow.set('restautoma', msg);\n        flow.set('restt', Math.floor(Date.now() / 1000));\n        return ([comm, null]);\n      }\n   }\n\n   break;\ndefault:\n   // uses payload.info in info messages\n   if ((msg.info !== undefined) && (msg.info.device !== undefined)) {\n       if ((typeof restautoma === 'object') && (restautoma.req !== undefined) && (restautoma.payload.device !== undefined)){\n//          node.warn([\"from automa\",restautoma, msg]);\n         if (restautoma.payload.device === msg.info.device){\n          if ((restautoma.payload.property === undefined)&& (restautoma.payload.value === undefined)) {  // is schema, ok\n                  var tuystatus = global.get(\"tuyastatus\");\n                  restautoma.payload = JSON.stringify(tuystatus[restautoma.payload.device]);\n                  flow.set('restautoma', '_wait');\n                  return ([null, restautoma]);\n          }\n           if ((restautoma.payload.property == msg.info.property) || (restautoma.payload.property == msg.infodp) || (restautoma.payload.property === 'MULTIPLE')) {\n             var jdat = JSON.stringify(msg.info);\n             restautoma.payload = jdat;\n             flow.set('restautoma', '_wait');\n             return ([null, restautoma]);\n            }\n         }\n       }\n   }\n\n}\n\n// test timeout, if not wait\n\nif (restautoma !== '_wait') {\n    var start = flow.get('restt');\n    if (((Math.floor(Date.now() / 1000)) - start) > timeout) { // OK exit for timeout\n        flow.set('restautoma', '_wait');\n        if ((typeof restautoma === 'object') && (restautoma.req !== undefined)) {  \n           restautoma.payload = { \"status\": \"request aborted for timeout\" };\n           return ([null, restautoma]);\n           }\n    }\n}\n\n//noting to do\nreturn ([null, null]);\n","outputs":2,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n flow.set ('restautoma', \"_wait\");","finalize":"","x":420,"y":900,"wires":[["58c718a1.bbd748","f6a0c8d.8dbb038"],["e166ce71.eb209"]]},{"id":"f6a0c8d.8dbb038","type":"trigger","z":"173260fb.d021ff","name":"REST timeaut 5s","op1":"test","op2":"test timeout","op1type":"str","op2type":"str","duration":"6","extend":false,"overrideDelay":false,"units":"s","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":310,"y":840,"wires":[["43c696e5.7b82d8"]]},{"id":"b61594cf.7ccae8","type":"link in","z":"173260fb.d021ff","name":"http","links":["43c696e5.7b82d8","2e4937fc.2ef1f8"],"x":275,"y":940,"wires":[["65eb2aa.067dfd4"]],"icon":"font-awesome/fa-expand"},{"id":"43c696e5.7b82d8","type":"link out","z":"173260fb.d021ff","name":"","links":["b61594cf.7ccae8"],"x":455,"y":840,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"2e4937fc.2ef1f8","type":"link out","z":"173260fb.d021ff","name":"","links":["b61594cf.7ccae8"],"x":715,"y":620,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"60906ab.8e27094","type":"comment","z":"173260fb.d021ff","name":"REST HTTP interface","info":"The **tuyaDAEMOM REST** is implemented using two interfaces, for different pourposes.\n\n1) **/tuyaDEAMON:** this is the production interface.\n\n2) **/tuyaDEAMONdebug:** this is the development interface.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-REST","x":240,"y":740,"wires":[]},{"id":"d943c0e6.b7946","type":"function","z":"173260fb.d021ff","name":"*bad msg filter","func":"// some messages can be useless\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":460,"y":680,"wires":[["a878b58e.e4ea08"]]},{"id":"de4b43ad.27e31","type":"catch","z":"173260fb.d021ff","name":"*catch device and LAN errors","scope":["482cde4d.4c944","a8d66c9a.4c12b","dfd320c0.b4f74","e543af34.b2468","5c8eb6e4.500348","ba1d97f9.86c698","5a17a058.f17be","b7a9fedf.ac7dd","cb5af4dc.7cb258","fdc6a9ae.1533a8","61c5fb6c.c4fad4","3db19556.7e04fa","12896b89.d95c84"],"uncaught":false,"x":1320,"y":500,"wires":[[]]},{"id":"f3a399b4.d43028","type":"comment","z":"4bebbdfa.41af64","name":"MIRROR DEVICE 'Door_Sensor'","info":"mirror device 'door sensor' input messages","x":230,"y":1020,"wires":[]},{"id":"8d12f398.d07e","type":"switch","z":"4bebbdfa.41af64","name":"main door","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"eq","v":"1030","vt":"str"},{"t":"eq","v":"1040","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":400,"y":1100,"wires":[["a873b4f2.725588"],["e5ca8ffd.7b59d"]],"info":"for my device\ndp = 102    // countdown"},{"id":"e5ca8ffd.7b59d","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1040: inject door open ON","env":[{"name":"deviceID","value":"04208127d8b********","type":"str"},{"name":"fakeDP","value":"1030","type":"num"},{"name":"value","value":"true","type":"bool"}],"x":770,"y":1120,"wires":[["7b505949.7ba1e8"]]},{"id":"a873b4f2.725588","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1030: inject door open OFF","env":[{"name":"deviceID","value":"04208127d8bfc*****","type":"str"},{"name":"fakeDP","value":"1030","type":"num"},{"name":"value","value":"false","type":"bool"}],"x":780,"y":1080,"wires":[["7b505949.7ba1e8"]]},{"id":"d3e4089a.6570c8","type":"link in","z":"4bebbdfa.41af64","name":"siren troggers IN","links":["9efb8156.f33d4","470e4807.b4b4f8","8ab4238e.8fc8c"],"x":255,"y":1100,"wires":[["8d12f398.d07e"]]},{"id":"7b505949.7ba1e8","type":"link out","z":"4bebbdfa.41af64","name":"to logging","links":["9fe80f7e.f3f7e"],"x":955,"y":1100,"wires":[]},{"id":"598a86b4.d36608","type":"comment","z":"4bebbdfa.41af64","name":"MIRROR DEVICE 'PIR_Sensor'","info":"mirror device 'PIR sensor': input messages","x":230,"y":1160,"wires":[]},{"id":"1724d873.b02078","type":"switch","z":"4bebbdfa.41af64","name":"PIR living","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"eq","v":"1010","vt":"str"},{"t":"eq","v":"1020","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":400,"y":1240,"wires":[["9703837e.8a885"],["70807d28.e60d84"]],"info":"for my device\ndp = 102    // countdown"},{"id":"3246c6c8.f9ed9a","type":"link in","z":"4bebbdfa.41af64","name":"siren troggers IN","links":["9efb8156.f33d4","470e4807.b4b4f8","8ab4238e.8fc8c"],"x":255,"y":1240,"wires":[["1724d873.b02078"]]},{"id":"bbd1da58.dba9c8","type":"link out","z":"4bebbdfa.41af64","name":"to logging","links":["9fe80f7e.f3f7e"],"x":955,"y":1240,"wires":[]},{"id":"9703837e.8a885","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1010: inject PIR alarm OFF","env":[{"name":"deviceID","value":"733710408ca********","type":"str"},{"name":"fakeDP","value":"1010","type":"str"},{"name":"value","value":"false","type":"bool"}],"x":780,"y":1220,"wires":[["bbd1da58.dba9c8"]]},{"id":"70807d28.e60d84","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1020: inject PIR alarm ON","env":[{"name":"deviceID","value":"733710408caab5*******","type":"str"},{"name":"fakeDP","value":"1010","type":"num"},{"name":"value","value":"true","type":"bool"}],"x":770,"y":1260,"wires":[["bbd1da58.dba9c8"]]},{"id":"790c7224.74435c","type":"link out","z":"638c6657.ce65c8","name":"to send","links":["69321d9a.30b7d4"],"x":435,"y":540,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"65cdad00.79d0e4","type":"subflow:81d3b584.14c888","z":"638c6657.ce65c8","name":"","env":[{"name":"deviceID","value":"_system","type":"str"},{"name":"fakeDP","value":"_trigger","type":"str"},{"name":"value","value":" @msg.payload.set","type":"str"}],"x":490,"y":440,"wires":[["fabf158b.0d82a8"]]},{"id":"fabf158b.0d82a8","type":"link out","z":"638c6657.ce65c8","name":"to logging","links":["9fe80f7e.f3f7e"],"x":635,"y":440,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"f4c153fd.a490d","type":"subflow:81d3b584.14c888","z":"638c6657.ce65c8","name":"","env":[{"name":"deviceID","value":"_system","type":"str"},{"name":"fakeDP","value":"_trgPing","type":"str"},{"name":"value","value":"started","type":"str"}],"x":490,"y":480,"wires":[["fabf158b.0d82a8"]]},{"id":"aafcb0e8.31487","type":"status","z":"173260fb.d021ff","name":"spy status","scope":["3db19556.7e04fa"],"x":1260,"y":380,"wires":[["668d3a7b.f2a8e4"]]},{"id":"668d3a7b.f2a8e4","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"bfa355aa196a*********","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1430,"y":380,"wires":[["81103bac.696bc8"]]},{"id":"1e4b8728.a1b809","type":"status","z":"173260fb.d021ff","name":"spy status","scope":["cb5af4dc.7cb258"],"x":1260,"y":420,"wires":[["3667be8e.cb5972"]]},{"id":"3667be8e.cb5972","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"bfa1bdeb107********","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1430,"y":420,"wires":[["81103bac.696bc8"]]},{"id":"e16b895d.8992a8","type":"config","z":"173260fb.d021ff","name":"*alldevices","properties":[{"p":"alldevices","pt":"global","to":"{\"real\":[{\"id\":\"bfb073b1b789b5994cro7p\",\"name\":\"Zigbee Gateway\",\"power\":\"AC\"},{\"name\":\"siren\",\"id\":\"42027807d8bfc0c5831e\",\"power\":\"UPS\",\"dps\":[{\"dp\":102,\"name\":\"type\",\"type\":\"string\",\"comment_01\":\"Values: '1'..'10'\"},{\"dp\":103,\"name\":\"duration\",\"type\":\"int\",\"comment_01\":\"Values: 0..60 s\"},{\"dp\":104,\"name\":\"alarm\",\"typefield\":\"BOOLEANONOFF\"}]},{\"id\":\"bfa355aa196ae5975cy6ii\",\"name\":\"switch module #1\",\"power\":\"AC\",\"_capability\":[\"GET\",\"SET\",\"MULTIPLE\"],\"dps\":[{\"dp\":1,\"name\":\"switch\",\"_capability\":\"WW\",\"type\":\"boolean\",\"typefield\":\"BOOLEANONOFF\",\"comment_01\":\"true|false  = ON|OFF\",\"comment_02\":\"Toggles when the countdown goes to 0.\"},{\"dp\":101,\"name\":\"on reset\",\"_capability\":\"WW\",\"typefield\":\"ENUMONOFFHOLD\",\"comment_01\":\"0|1|2 = OFF|ON|HOLD\",\"comment_02\":\"The initial switch status, after a reset.\"},{\"dp\":102,\"name\":\"countdown\",\"_capability\":\"RW\",\"type\":\"int\",\"comment_01\":\"0..86500 s  (24H max.)\",\"comment_02\":\"PUSH every (30 * k) s; GET returns last PUSHed value, not the actual count\",\"comment_03\":\"SET(102):0 => the switch does not change\"}]},{\"name\":\"tuya_bridge\",\"id\":\"bf8c4fd0c03067079cplb4\",\"power\":\"AC\",\"dps\":[{\"dp\":1,\"name\":\"relay\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":7,\"name\":\"trigger (reserved)\",\"capability\":\"TRG\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s  (24H max.)\"},{\"dp\":14,\"name\":\"restart status\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: off|on|memory\"},{\"dp\":15,\"name\":\"light mode\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: pos|none|relay\"},{\"dp\":16,\"name\":\"backlight\",\"capability\":\"WW\",\"type\":\"boolean\",\"comment_01\":\"Values: true|false \"},{\"dp\":17,\"name\":\"circulate\",\"capability\":\"WW\",\"typefield\":\"STRUCTREPEAT\"},{\"dp\":18,\"name\":\"random\",\"capability\":\"WW\",\"typefield\":\"STRUCTRAND\"},{\"dp\":19,\"name\":\"inching\",\"capability\":\"WW\",\"typefield\":\"STRUCTINCH\"}]},{\"name\":\"smart breaker #2\",\"id\":\"bfa1bdeb107d379fbckkwv\",\"power\":\"AC\",\"dps\":[{\"dp\":1,\"name\":\"relay\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":9,\"name\":\"countdown\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"},{\"dp\":38,\"name\":\"restart status\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: off|on|memory\"},{\"dp\":40,\"name\":\"light mode\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: pos|none|relay\"},{\"dp\":41,\"name\":\"child lock\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":42,\"name\":\"circulate\",\"capability\":\"WW\",\"typefield\":\"STRUCTREPEAT\"},{\"dp\":43,\"name\":\"random\",\"capability\":\"WW\",\"typefield\":\"STRUCTRAND\"},{\"dp\":44,\"name\":\"inching\",\"capability\":\"WW\",\"typefield\":\"STRUCTINCH\"}]}],\"virtual\":[{\"cid\":\"60a423fffe8e2bef\",\"name\":\"Termosifone 1\",\"gateway\":\"bfb073b1b789b5994cro7p\",\"power\":\"BAT\",\"capability\":[\"SET\"],\"dps\":[{\"dp\":8,\"name\":\"Open windows sensitivity\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":10,\"name\":\"Antifreeze\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":27,\"name\":\"Actual T offset\",\"capability\":\"WO\",\"type\":\"int\",\"comment_01\":\"Values: -6..+6 Â°C\"},{\"dp\":40,\"name\":\"Lock\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":101,\"name\":\"Device\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":102,\"name\":\"Temperature\",\"capability\":\"PUSH\",\"typefield\":\"BYTESMALLFLOAT\"},{\"dp\":103,\"name\":\"Target T\",\"capability\":\"WO\",\"typefield\":\"BYTESMALLFLOAT\"},{\"dp\":105,\"name\":\"unknown01\",\"capability\":\"PUSH\",\"comment_01\":\"Values: 0?\"},{\"dp\":106,\"name\":\"Away mode\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":108,\"name\":\"Day program\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":109,\"name\":\"unknown02\",\"capability\":\"WO\",\"comment_01\":\"Values: unknown\"},{\"dp\":110,\"name\":\"Hist. day target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":112,\"name\":\"Hist. week target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":113,\"name\":\"Hist. month target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":114,\"name\":\"Hist. year target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":115,\"name\":\"Hist. day real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":116,\"name\":\"Hist. week real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":117,\"name\":\"Hist. month real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":118,\"name\":\"Hist. year real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":119,\"name\":\"Hist. day % power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":120,\"name\":\"Hist. week % power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":121,\"name\":\"Hist. month % power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":122,\"name\":\"Hist. year % power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":123,\"name\":\"Monday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":124,\"name\":\"Tuesday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":125,\"name\":\"Friday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":126,\"name\":\"Thursday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":127,\"name\":\"Friday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":128,\"name\":\"Saturday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":129,\"name\":\"Sunday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":130,\"name\":\"Water scale proof\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"}]}],\"fake\":[{\"id\":\"_system\",\"name\":\"HAL@home\",\"comment\":\"fake device, for system status\",\"capability\":[\"SET\",\"GET\"],\"dps\":[{\"dp\":\"_laststart\",\"name\":\"start\"},{\"dp\":\"_trgPing\"},{\"dp\":\"_trigger\"},{\"dp\":\"_Dbase\"},{\"dp\":\"_ACpower\"},{\"dp\":\"_WiFinet\"},{\"dp\":\"_ACunconnected\"},{\"dp\":\"_WiFiunconnected\"},{\"dp\":\"_LANnet\"}]},{\"id\":\"317080408caab521a5d3\",\"name\":\"smoke detector\",\"power\":\"BAT\",\"capability\":[\"SET\"],\"dps\":[{\"dp\":1800,\"name\":\"alarm\",\"capability\":\"PUSH\",\"type\":\"string\",\"comment_01\":\"Values: 'ON'|'OFF'\"},{\"dp\":1820,\"name\":\"battery\",\"capability\":\"PUSH\",\"type\":\"string\",\"comment_01\":\"Values: 'OK'|'LOW'\"},{\"dp\":1840,\"name\":\"silence\",\"capability\":\"WO\",\"type\":\"string\",\"comment_01\":\"Values:  'ON'|'OFF'\"}]}],\"__comment\":\"do not change code ================================= \",\"__getODev\":\"function(id, limit = null){\\n   function _checkobj(list, dx) {\\n     var o;\\n    o = list.find(device => device.name === dx);\\n   if (o === undefined)\\n      o = list.find(device => device.id == dx);\\n   if (o === undefined)\\n      o = list.find(device => device.cid == dx);\\n   return (o);\\n   }\\n    function _okcheck(lim, branch) {\\n      return ((lim === null) || (lim == branch))\\n    }\\n   var odev;\\n   if (id === undefined)\\n      return (odev);\\n   if (_okcheck(limit, 'real'))\\n      odev = _checkobj(this.real, id);\\n   if ((odev == undefined) && _okcheck(limit, 'virtual'))\\n      odev = _checkobj(this.virtual, id);\\n   if ((odev == undefined) && _okcheck(limit, 'fake'))\\n      odev = _checkobj(this.fake, id);\\n   return (odev);\\n}\",\"__getDevName\":\"function(odev) { return (odev.name === undefined ? (odev.cid == undefined ? odev.id : odev.cid) : odev.name);}\",\"__getConnectName\":\"function(odev) {\\n   if (odev.cid === undefined) return(odev.name === undefined ? odev.id : odev.name);\\n   var o_gat = this.real.find(device => device.id === odev.gateway);\\n   if (o_gat === undefined) return o_gat;\\n   return (o_gat.name === undefined ? o_gat.id : o_gat.name);}\",\"__getODps\":\"function(odev, property) {\\n if (Array.isArray(odev.dps)) {\\n  var p = odev.dps.find(data => ((data.name === property) || (data.dp == property))); \\n  return (p);}  \\n  return (undefined);}\",\"__getDpsName\":\"function(odev, property) {\\n if (Array.isArray(odev.dps)) {\\n  var p = odev.dps.find(data => ((data.name === property) || (data.dp == property))); \\n if(p !== undefined)\\n return (p.name == undefined ? p.dp : p.name);}  \\n  return (property);}\"}","tot":"json"}],"active":true,"x":210,"y":440,"wires":[],"info":"To add a new device, or for fine tune an existing one, you must rdit the global.alldevice JSON structure.\n\nFor format and details see '_global.alldevices_' and '_add a new device, step 3_'  comment nodes. "},{"id":"dfd320c0.b4f74","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"Zigbee Gateway","deviceId":"bfb073b1b789b59******","deviceKey":"16a98ab0*******","deviceIp":"","retryTimeout":"100003","findTimeout":"100019","tuyaVersion":"3.1","x":1000,"y":60,"wires":[["2ec83963.a7d146"]],"info":"**tuya_ms_104**   \n\n_tuya bridge for \"WiFi Smart Switch Module MS-104\"_\n\nAfter any command, this device sends (and this node captures) a 'status' message carring only the changed values.\n\nA command can be send by node-red, SmartLife app, Google home, Google voice: in any case this node captures the status message.\n\n_note:_\n If node-red changes the switch state, SmartLife is updated correctly, but Google Home not.\n \n_Input:_\nTo send a command via node-red. the payload structure must be:\n` multiple: true\n  data: object\n    1: true\n    102: 5`\n\n_nb:_\nset **Device Virtual ID** and **Device Key** to a tuya connected and working switch, model M-104 ( see [https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104](https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104))."},{"id":"bd44880d.8cdda8","type":"tuya-smart-device","z":"638c6657.ce65c8","deviceName":"*tuya_bridge","deviceId":"bf8c4fd0c030*******","deviceKey":"b2feff3e0cac7db7","deviceIp":"","retryTimeout":"3000","findTimeout":"3000","tuyaVersion":"3.1","x":670,"y":180,"wires":[["798c4138.06176","bfddb028.1da3","30ac034a.029d3c"]],"info":"**tuya_ms_104**   \n\n_tuya bridge for \"WiFi Smart Switch Module MS-104\"_\n\nAfter any command, this device sends (and this node captures) a 'status' message carring only the changed values.\n\nA command can be send by node-red, SmartLife app, Google home, Google voice: in any case this node captures the status message.\n\n_note:_\n If node-red changes the switch state, SmartLife is updated correctly, but Google Home not.\n \n_Input:_\nTo send a command via node-red. the payload structure can be:\n` multiple: true\n  data: object\n    1: true\n    102: 5`\n\n_nb:_\nset **Device Virtual ID** and **Device Key** to a tuya connected and working switch, model M-104 ( see [https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104](https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104))."},{"id":"38b9c7dd.edfd08","type":"tuya-smart-device","z":"b10f9b24.3fb858","deviceName":"tuya_bridge","deviceId":"here your id","deviceKey":"here your key","deviceIp":"","retryTimeout":"1000","findTimeout":"1000","tuyaVersion":"3.1","x":170,"y":200,"wires":[["ecbcb8a7.3bfe28","6d46880b.ff93a8"]],"info":"**tuya_ms_104**   \n\n_tuya bridge for \"WiFi Smart Switch Module MS-104\"_\n\nAfter any command, this device sends (and this node captures) a 'status' message carring only the changed values.\n\nA command can be send by node-red, SmartLife app, Google home, Google voice: in any case this node captures the status message.\n\n_note:_\n If node-red changes the switch state, SmartLife is updated correctly, but Google Home not.\n \n_Input:_\nTo send a command via node-red. the payload structure can be:\n` multiple: true\n  data: object\n    1: true\n    102: 5`\n\n_nb:_\nset **Device Virtual ID** and **Device Key** to a tuya connected and working switch, model M-104 ( see [https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104](https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104))."},{"id":"cb5af4dc.7cb258","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"smart breaker #2","deviceId":"bfa1bdeb107d37******","deviceKey":"36c80607*****","deviceIp":"","retryTimeout":"100213","findTimeout":"100237","tuyaVersion":"3.1","x":1010,"y":420,"wires":[["2ec83963.a7d146"]],"info":"**tuya_ms_104**   \n\n_tuya bridge for \"WiFi Smart Switch Module MS-104\"_\n\nAfter any command, this device sends (and this node captures) a 'status' message carring only the changed values.\n\nA command can be send by node-red, SmartLife app, Google home, Google voice: in any case this node captures the status message.\n\n_note:_\n If node-red changes the switch state, SmartLife is updated correctly, but Google Home not.\n \n_Input:_\nTo send a command via node-red. the payload structure must be:\n` multiple: true\n  data: object\n    1: true\n    102: 5`\n\n_nb:_\nset **Device Virtual ID** and **Device Key** to a tuya connected and working switch, model M-104 ( see [https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104](https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104))."},{"id":"3db19556.7e04fa","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"switch module#1","deviceId":"bfa355aa196ae5******","deviceKey":"10ad2960ff*******","deviceIp":"","retryTimeout":"100193","findTimeout":"100207","tuyaVersion":"3.1","x":1010,"y":380,"wires":[["2ec83963.a7d146"]],"info":"**tuya_ms_104**   \n\n_tuya bridge for \"WiFi Smart Switch Module MS-104\"_\n\nAfter any command, this device sends (and this node captures) a 'status' message carring only the changed values.\n\nA command can be send by node-red, SmartLife app, Google home, Google voice: in any case this node captures the status message.\n\n_note:_\n If node-red changes the switch state, SmartLife is updated correctly, but Google Home not.\n \n_Input:_\nTo send a command via node-red. the payload structure must be:\n` multiple: true\n  data: object\n    1: true\n    102: 5`\n\n_nb:_\nset **Device Virtual ID** and **Device Key** to a tuya connected and working switch, model M-104 ( see [https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104](https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104))."},{"id":"fa73529d.27681","type":"tuya-smart-device","z":"d02ad611.d94bc8","d":true,"deviceName":"test","deviceId":"bf8c4fd0c03067079cplb4","deviceKey":"71cb03135c51ed75","deviceIp":"","retryTimeout":1000,"findTimeout":1000,"tuyaVersion":"3.1","x":360,"y":1240,"wires":[[]]},{"id":"1a711832.f93bb8","type":"mysql","z":"173260fb.d021ff","mydb":"7e3077c8.ff8e88","name":"*append to DB","x":1280,"y":640,"wires":[[]]},{"id":"12896b89.d95c84","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"siren","deviceId":"42027807d8b******","deviceKey":"70e17a0208a*****","deviceIp":"","retryTimeout":"1000","findTimeout":"1000","tuyaVersion":"3.1","x":970,"y":460,"wires":[["2ec83963.a7d146"]],"info":"**tuya_ms_104**   \n\n_tuya bridge for \"WiFi Smart Switch Module MS-104\"_\n\nAfter any command, this device sends (and this node captures) a 'status' message carring only the changed values.\n\nA command can be send by node-red, SmartLife app, Google home, Google voice: in any case this node captures the status message.\n\n_note:_\n If node-red changes the switch state, SmartLife is updated correctly, but Google Home not.\n \n_Input:_\nTo send a command via node-red. the payload structure must be:\n` multiple: true\n  data: object\n    1: true\n    102: 5`\n\n_nb:_\nset **Device Virtual ID** and **Device Key** to a tuya connected and working switch, model M-104 ( see [https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104](https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104))."},{"id":"f29ebde8.23af8","type":"status","z":"173260fb.d021ff","name":"spy status","scope":["cb5af4dc.7cb258"],"x":1260,"y":460,"wires":[["74afb4e1.2c722c"]]},{"id":"74afb4e1.2c722c","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"4202780*******","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1430,"y":460,"wires":[["81103bac.696bc8"]]},{"id":"9c0ddbf6.c9b378","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"to log 1840: silence ON","env":[{"name":"deviceID","value":"317080408ca*******","type":"str"},{"name":"fakeDP","value":"1840","type":"num"},{"name":"value","value":"ON","type":"str"}],"x":750,"y":800,"wires":[["54d03d6e.945994"]]},{"id":"cb9729f6.064aa8","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"to log 1850: silence OFF","env":[{"name":"deviceID","value":"317080408caa*******","type":"str"},{"name":"fakeDP","value":"1840","type":"num"},{"name":"value","value":"OFF","type":"str"}],"x":750,"y":840,"wires":[["54d03d6e.945994"]]},{"id":"6032a270.4f2c6c","type":"link in","z":"4bebbdfa.41af64","name":"*REDTRG5000","links":[],"x":320,"y":160,"wires":[["7199a556.460d4c"]],"l":true},{"id":"a6aefdcd.f125b","type":"inject","z":"4bebbdfa.41af64","name":"*test  REDTRG5000","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":370,"y":200,"wires":[["7199a556.460d4c"]]},{"id":"22aa17c9.49abf8","type":"link in","z":"4bebbdfa.41af64","name":"*REDTRG5020","links":[],"x":320,"y":240,"wires":[["6f68f3f4.61256c"]],"l":true},{"id":"b42ae860.a855e8","type":"inject","z":"4bebbdfa.41af64","name":"*test  REDTRG5020","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":370,"y":280,"wires":[["6f68f3f4.61256c"]]},{"id":"6f68f3f4.61256c","type":"subflow:66ca1554.e4c85c","z":"4bebbdfa.41af64","name":"*trigger5020","env":[{"name":"TRGnumber","value":"5020","type":"str"}],"x":730,"y":240,"wires":[["a3dfd8c8.7dac98"]]},{"id":"7199a556.460d4c","type":"subflow:66ca1554.e4c85c","z":"4bebbdfa.41af64","name":"*trigger5000","env":[{"name":"TRGnumber","value":"5000","type":"str"}],"x":730,"y":200,"wires":[["a3dfd8c8.7dac98"]]},{"id":"a3dfd8c8.7dac98","type":"link out","z":"4bebbdfa.41af64","name":"to send","links":["69321d9a.30b7d4"],"x":935,"y":200,"wires":[]},{"id":"22565a24.03e246","type":"comment","z":"4bebbdfa.41af64","name":"node_red TRIGGERS  examples","info":"A node-red trigger (REDTRGXXXX) is used to fire _smarlife_ automations.\n\nconvention: reserved values for REDTRG: 2000-2999\n\nexamples: REDTRG2010,  REDTRG2020","x":230,"y":100,"wires":[]},{"id":"c6dc4d8c.42381","type":"switch","z":"4bebbdfa.41af64","name":"*triggers selector","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"eq","v":"1600","vt":"str"},{"t":"eq","v":"1610","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":490,"y":400,"wires":[["b32d7f0c.f5ecc"],["380f1773.23a198"]],"info":"for my device\ndp = 102    // countdown"},{"id":"f3a5a524.c44d88","type":"comment","z":"4bebbdfa.41af64","name":"*Tuya TRIGGERS exit","info":"TRIGGERS from smartlife used to trigger custom user flows in node-red.","x":820,"y":340,"wires":[]},{"id":"b32d7f0c.f5ecc","type":"link out","z":"4bebbdfa.41af64","name":"*TUYATRG1600","links":[],"x":800,"y":380,"wires":[],"l":true},{"id":"380f1773.23a198","type":"link out","z":"4bebbdfa.41af64","name":"*TUYATRG1610","links":[],"x":800,"y":420,"wires":[],"l":true},{"id":"ae124920.c94578","type":"link in","z":"4bebbdfa.41af64","name":"siren troggers IN","links":["9efb8156.f33d4","470e4807.b4b4f8","8ab4238e.8fc8c"],"x":335,"y":400,"wires":[["c6dc4d8c.42381"]]},{"id":"8e2917e2.4c7568","type":"function","z":"4bebbdfa.41af64","name":"event selector","func":"// msg (real)\n//  _msgid: \"3042f3fd.8497fc\"\n//  _event: \"node:2ec83963.a7d146\"\n//  payload: object\n//     deviceId: \"bfa355aa196ae5975******\"\n//     deviceName: \"*tuya_bridge\" \n//     data: object\n//        t: 1609234903\n//        dps: object\n//           102: 1020\n//\n//msg (virtual)\n//   _msgid: \"d0b26a44.e81738\"\n//   payload: object\n//      deviceId: \"bfb073b1b789b********\"\n//      deviceName: \"Zigbee Gateway\"\n//      data: object\n//        cid: \"00158d000*******\"\n//        t: 1609235292\n//        dps: object\n//           103: 19\n\n// select messages to fire your EVNTRIGGERXXX.\n// the condition can be as complex  as required \n//  works with messages from any device: real, virtual, mirror, system\n//\n\n// filter example: \n// Trigger on temperature > 20 Â°C  (from a virtual device)\n if(msg.payload.deviceId == \"bfb073b1b789b5******\")  // from  gateway\n    if(msg.payload.data.cid == \"00158d000*******\")     // device: cid termometer\n       if (msg.payload.data.dps[103] >=  200)          // test on undecoded value\n         return[{payload:\"go\"}];                 // in output#1\n// filter example: \n// Trigger on PIR on (from mirror device)\n if(msg.payload.deviceId == \"733710408caa******\")    // the device\n       if (msg.payload.data.dps[1010] === true)        // test on value\n           return[null, {payload:\"go\"}];         // in output#2\n\n//  more....\nreturn null;","outputs":2,"noerr":0,"initialize":"","finalize":"","x":500,"y":540,"wires":[["7c8df992.97a758"],["93689da9.046aa"]]},{"id":"3baeae11.41ef52","type":"link in","z":"4bebbdfa.41af64","name":"IN msg from real devices","links":["81a9b329.092b1"],"x":335,"y":540,"wires":[["8e2917e2.4c7568"]],"icon":"font-awesome/fa-expand"},{"id":"7c8df992.97a758","type":"link out","z":"4bebbdfa.41af64","name":"EVNTRIGGER00A","links":[],"x":790,"y":520,"wires":[],"l":true},{"id":"93689da9.046aa","type":"link out","z":"4bebbdfa.41af64","name":"EVNTRIGGER00B","links":[],"x":790,"y":560,"wires":[],"l":true},{"id":"dc658867.24d188","type":"comment","z":"4bebbdfa.41af64","name":"asynchronous event TRIGGER exit","info":"TRIGGER buid from tuyaTRIGGER flow and not by tuya-cloud.\n\nBased on local events and conditions, used as accelerators by some user flows.","x":840,"y":480,"wires":[]},{"id":"403e1d37.762004","type":"comment","z":"4bebbdfa.41af64","name":"TRIGGER examples and my MIRROR DEVICES: to be costomized","info":"","x":310,"y":40,"wires":[]},{"id":"d2eac140.a540c","type":"comment","z":"4bebbdfa.41af64","name":"tuya TRIGGERS  examples","info":"A node-red trigger (REDTRGXXXX) is used to fire _smarlife_ automations.\n\nconvention: reserved values for REDTRG: 2000-2999\n\nexamples: REDTRG2010,  REDTRG2020","x":210,"y":340,"wires":[]},{"id":"55cd4cfe.1c5ed4","type":"comment","z":"4bebbdfa.41af64","name":"event TRIGGERS  examples","info":"A node-red trigger (REDTRGXXXX) is used to fire _smarlife_ automations.\n\nconvention: reserved values for REDTRG: 2000-2999\n\nexamples: REDTRG2010,  REDTRG2020","x":220,"y":480,"wires":[]}]