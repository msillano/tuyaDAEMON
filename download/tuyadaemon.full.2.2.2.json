[
    {
        "id": "9926dce981094007",
        "type": "tab",
        "label": "CORE",
        "disabled": false,
        "info": "\nThe **tuyaDAEMON CORE** handles the LOW-LEVEL MQTT communications with devices, via tuyapi, \noffering you a  bidirectional integration with 'real' and 'virtual' Tuya devices.\n\nVersion 2.2.2\n\n   see: https://github.com/msillano/tuyaDAEMON<br>\n   see: https://github.com/msillano/tuyaDAEMON/tree/main/tuyaDAEMON\n\n### Installation\n\n  see [github documentation](https://github.com/msillano/tuyaDAEMON/tree/main/tuyaDAEMON#installation)\n \n### Configuration\n\n  Update the node: `'global CORE config'`: follow the node documentation.\n \n "
    },
    {
        "id": "a5526c71dbbdfc5a",
        "type": "tab",
        "label": "core_SYSTEM",
        "disabled": false,
        "info": "\nSince ver. 2.0 '_sistem' is implemented as a 'fake SW device.\n\n### Features\n\n  - a 'proxy' command to manage communications between multiple instances of tuyaDEAMON on lan.\n  - a centralized information point about tuyaDAEMON and the status of the devices, especially \n     useful in security applications.\n  - 'clean' access to tuyaDAEMON and host PC resources, for automation projects, like  messages, \n     beep, voice, timer, exec, etc.\n  - SYSTEM extends the capability to implement customized automation task using only 'share' \n     structure (example: _beep_loop2 implementation).\n \n For more information <br> see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system\n\n### Installation\n\n  see [github documentation](https://github.com/msillano/tuyaDAEMON/tree/main/tuyaDAEMON#installation)\n \n### Configuration\n\n  User must update the node: `'global SYSTEM config'`: follow the node documentation.\n\n\n"
    },
    {
        "id": "885794d873f674af",
        "type": "tab",
        "label": "core_TRIGGER",
        "disabled": false,
        "info": "\nA 'real' device WiFI, having  a big unused numerical parameter, say a 'counter', writable by both **Tuya-cloud** and **node-red**, is all the required hardware to implement a robust bilateral event communication (**TRIGGER**).\n\nsee: https://github.com/msillano/tuyaDAEMON/tree/main/tuyaTRIGGER/README.md\n\n### Advantages\n *   Bilateral communication between any Tuya device and tuyaDAEMON  (also for devices not compatible with 'tuya-smart-device'  node. e.g. WiFI alarms).\n *   Capability to fire any Tuya 'automation' from tuyaDAEMON, and viceversa, to control from tuya-cloud any application and custom device handled by TuyaDAEMON.\n *   Remote control (wordwide) of tuyaDAEMON.\n\n### more properties\nThis flow add, to native capabilies of the used switch ([switch-1CH](https://github.com/msillano/tuyaDAEMON/blob/main/devices/switch-1CH/device_switch-1CH.pdf)):\n\n_tstPing: to measure the TRIGGER roundtrip time, [see here](https://github.com/msillano/tuyaDAEMON/wiki/tuyaTRIGGER-info#tuyadaemon_trgping).\n\n_testPing24H: long run test, [see here](https://github.com/msillano/tuyaDAEMON/wiki/tuyaTRIGGER-info#tuyadaemon_testping24h).\n\n\n### Customization\nTo use a different hardware:\n - see: https://github.com/msillano/tuyaDAEMON/tree/main/tuyaTRIGGER/README.md\n - see wiki : https://github.com/msillano/tuyaDAEMON/wiki/tuyaTRIGGER-info\n - see node: 'triggerMAP (readme)' details.\n\n\n"
    },
    {
        "id": "18bb68e662c98334",
        "type": "tab",
        "label": "core_MQTT",
        "disabled": false,
        "info": "# tuyaDAEMON.core.MQTT #\nThis flow extends tuyaDEAMON.core with an MQTT broker.\n\n### Advantages\n *   Use of standard MQTT client as UI interface to tuyaDAEMON. I chose [MQTTExplorer](http://mqtt-explorer.com) because it is easy to use, complete, portable.\n \n *   Use of standard MQTT clients applications in smartphones, (my favorite for Android is [IOT MQTT Panel](www.snrlab.in/category/iot) to build specialized interfaces to some tasks (e.g. watering)\n \n *   Interface for the exchange of data and commands with more application and automation systems that use this protocol. Using TRIGGER, we can remotely control tuyaDAEMON and the connected systems. \n \n### Installation\n \n  note: **tuyadaemon.core.MQTT** can be installed (and tested) even without any Tuya device.\n  \n - Download last version and import it in node-red tuyaDAEMON, using a new flow.\n - Or enable the flow, if it is present.\n\n### Configuration\n\n  See the node: `'global MQTT config'`: follow the node documentation.\n\n"
    },
    {
        "id": "33917e45a4084979",
        "type": "tab",
        "label": "mirror_devices",
        "disabled": false,
        "info": "TRIIGER use examples\r\n\r\nTo be customized by the user.",
        "env": []
    },
    {
        "id": "e1c6cc8a.2f92a",
        "type": "subflow",
        "name": "REFRESH",
        "info": "\nUse this subflow to drive devices with `REFRESH` capability.\n\nIt acts like a filter on device msg, intercepts and implements two pseudo-DP to handle the REFRESH:\n\n - SET  `_refreshCycle` ` off | time [s]` : off/on polling\n - GET  `_refreshCycle` : back last value\n  \n - SET `_refresh`  `dummy` : immediate REFRESH\n-  GET `_refresh`  ignored\n\n### Parameters\n\n   <dl class=\"message-properties\">\n        <dt>deviceId\n            <span class=\"property-type\">string (credential)</span>\n        </dt>\n        <dd>   The ID of the wired Tuya device (same as in `core.global.alldevices`).\n        </dd>\n         <dt>Max_time\n            <span class=\"property-type\">number|string|@string</span>\n        </dt>\n        <dd>  Timeout [s] for `_refreshCycle`, without `stop` message. \n \n- Use '0' for forever (requires 'stop').\n- Default: `global.MAXREFRESH`, a common value for all devices. \n- uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n   - **early binding**:  a number, e.g. `60`\n   - **late binding**: a string starting with 'global.' | 'flow.' | 'msg.' e.g. `global.MAXREFRESH`\n   - **evalued value**: a string starting with '@', e.g. `@global.get('MAXREFRESH')*3`\n        </dd>\n      <dt>REFRESH_message\n            <span class=\"property-type\">JSON</span>\n        </dt>\n        <dd>  \n        Low level `Refresh message` to meet device qirk (single, repeat).  One  off (examples) :\n* BASIC: `{\"operation\": \"REFRESH\"}`; (default)\n* ONE: `{\"operation\": \"REFRESH\", \"dps\":20}`;\n* MANY: `{\"operation\": \"REFRESH\", \"requestedDPS\":[1,18,19,20]}`;\n* SCHEMA: = `{\"operation\": \"REFRESH\", \"schema\":true}`;  \n        </dd>\n \n </dl>\n \n### Inputs\n\nAll low level messages for a device.\n\n### Outputs\n\n1. To device: all input messages, less `_refresh` and `_refreshCycle`, \nplus `'REFRESH'` messages for the device.\n\n2. To logging: some log messages.\n\n### Details\n\nSome devices (e.g. 'AC power meter') convert and send data (PUSH) at very low frequence, and a GET returns the last PUSHed data.\nBut sometime, e.g. when the UI is open, it is better to uptate the interface at a faster rate (smartLife app uses 5s).\nIf the device implements the REFRESH command, the user can send two pseudoDP:\n1. `_refresh`: to convert now and GET an immediate value (PUSH).\n2. `_refreshCycle`: to start a automatic PUSH cycle, with an user defined rate, until a 'stop' command or until 'Max_time' has expired.\n\nnote: add in `global.alldevices` the device.capability '`REFRESH`', else ERROR message.\n\n### References\nsee [REFRESH operation](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#refresh-operation).\nFor the native documentation see [tuyapi](https://codetheweb.github.io/tuyapi/index.html#tuyadevicerefresh) and [node-red-contrib-tuya-smart-device](https://github.com/vinodsr/node-red-contrib-tuya-smart-device#input-format)<br>\n\n",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 60,
                "wires": [
                    {
                        "id": "2542f38785a72b2e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 120,
                "wires": [
                    {
                        "id": "c306cbee.682538",
                        "port": 1
                    },
                    {
                        "id": "c500a325b5d833af",
                        "port": 0
                    }
                ]
            },
            {
                "x": 880,
                "y": 200,
                "wires": [
                    {
                        "id": "c306cbee.682538",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "deviceID",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "Max_time",
                "type": "str",
                "value": "global.MAXREFRESH",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool"
                        ]
                    }
                }
            },
            {
                "name": "REFRESH_message",
                "type": "json",
                "value": " {operation: \"REFRESH\"}",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "msg"
        ],
        "outputLabels": [
            "to device",
            "to logging"
        ],
        "icon": "font-awesome/fa-circle-o-notch"
    },
    {
        "id": "e8e1f4484dbb32d2",
        "type": "subflow",
        "name": "explode",
        "info": "This subflow is a filter that decodes the data structures and push the atomic data as new `dP`s.\r\nUseful for storing atomic data in DB, it is also required to use the `RT/AVG filter` subflow, which manages only atomic data.\r\n\r\n### Parameters\r\n<dl class=\"message-properties\">\r\n    <dt>dp <span class=\"property-type\">string</span> </dt>\r\n    <dd>   the Data Point that produces structures\r\n </dd>\r\n    <dt>decode <span class=\"property-type\">string </span> </dt>\r\n    <dd>   the decode function  (as in 'core.global.alldevices') for the structure.\r\n </dd>\r\n </dd> </dl>\r\n\r\n### Input\r\n\r\n  A message from a `tuya-smart-device` node.\r\n  ````` \r\n  object\r\n     {\r\n    \"payload\": {\r\n        \"deviceId\": <deviceId>,\r\n        \"data\": {\r\n            \"dps\": {\r\n                \"<propertyDP>\":<coded_data>\r\n            }}}\r\n`````\r\n\r\n### Output\r\n  If incoming `dP` is not equal to `parameter.dp`, the msg is sent to output unchanged, else\r\n  the output is same as input, and the data structure is decoded and the atomic data are attributed to new `dP`s added to message.\r\n  Recursive, i.e. it accepts also structures of data structures...\r\n  \r\n _note: works only on structures, not on arrays._\r\n _note: you must add the new atomic `dP`s to `global.alldevices`._\r\n  \r\n````` \r\n  object\r\n     {\r\n    \"payload\": {\r\n        \"deviceId\": <deviceId>,\r\n        \"data\": {\r\n            \"dps\": {\r\n                \"<propertyDP>\":<coded_data>,\r\n                \"_<propertyDP>.<pathname>\":<value>,\r\n                ... more ...\r\n            }}}\r\n`````\r\n### Example\r\nA 'Breaker_DIN' output is:\r\n\r\n      ...    \r\n      \"dps\": {    \r\n            \"6\": \"CNQAAGQAACIAAA==\" }  // coded structure\r\n\r\nUsing the `STRUCTELERT` decode function (in `ENCODE/DECODE user library` node) we get:\r\n\r\n          {\r\n            V: 226\r\n            Leack: 0\r\n            A: 0.1\r\n            W: 0.034\r\n          }\r\n\r\nThe `explode` node does an early decode, and adds the required new `dP`s. The output is:\r\n\r\n        object\r\n          {\r\n          \"payload\": {\r\n              \"deviceId\": <deviceId>,\r\n              \"data\": {\r\n                  \"dps\": {\r\n                      \"6\": \"CNQAAGQAACIAAA==\",  // unchanged\r\n                      \"_6.V\": 226,\r\n                      \"_6.Leack\": 0,\r\n                      \"_6.A\": 0.1,\r\n                      \"_6.W\": 0.034\r\n              }}}\r\n\r\ni.e. `explode` adds 4 new dPs with atomic data, as required by `RT/AWG filter` subflow.\r\n\r\n### References\r\nFor more info [see the wiki](https://github.com/msillano/tuyaDAEMON/wiki/case-study:-433-MHz-weather-station#9-notes-about-explode-subflow).\r\n",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 40,
                "wires": [
                    {
                        "id": "9ccc0e77949a1eab"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 40,
                "wires": [
                    {
                        "id": "9ccc0e77949a1eab",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "dp",
                "type": "num",
                "value": "6"
            },
            {
                "name": "decode",
                "type": "str",
                "value": "STRUCTELERT"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "from device"
        ],
        "outputLabels": [
            "out data"
        ]
    },
    {
        "id": "f2bb4b234e94093b",
        "type": "subflow",
        "name": "RT/AVG filter",
        "info": "This subflow filter for **tuyaDAEMON** allows the processing of individual messages in _real time_, or the creation of an _averaged sampling_, regardless of the device of origin.\n\nFor devices in `'RT' mode`, all messages go directly to the output (no filter).\n\nFor devices in `'AVG' mode`, all messages are stored. A special \"trigger\" message in input triggers the output for a specific device.\n\n### Parameters\n<dl class=\"message-properties\">\n    <dt>deviceID<span class=\"property-type\">string (credential)</span> </dt>\n    <dd>  the device ID, or CID  (mandatory).\n </dd>\n   <dt>decimal digits<span class=\"property-type\">integer</span> </dt>\n    <dd>  the number of digits used in average calculations (mandatory).\n </dd>\n    <dt>dp_exclude<span class=\"property-type\">integer array</span> </dt>\n    <dd> this excluded dPs are sent as-is, default [].\n </dd>\n   <dt>dp_round<span class=\"property-type\">integer</span> </dt>\n    <dd> the dPs in array are sent as integer, default [].\n </dd>\n    <dt>dp_min<span class=\"property-type\">integer</span> </dt>\n    <dd> the dPs in array are sent as minimum, default [].\n </dd>\n\n   <dt>dp_MAX<span class=\"property-type\">integer</span> </dt>\n    <dd>  the dPs in array are sent as maximum, default [].\n </dd></dl>\n\n### Input device msg\n\n  Any message from any device (real, virtual, custom). For details see `CORE.logging` link node.\n\n### Input trigger msg\n\nStructure:\n````\n    message\n        topic    = 'average'            (mandatory)\n\n````\nThe simplest way to generate trigger messages at fixed time intervals is to use of a standard 'input' node, setting `interval` to the required value. As example see the '433 gateway flow'.\n\n\n### Details\n\nThis subflow can handle messages from one device, with a user-defined strategy, and it is designed to allow for a simple upgrade for any existing **tuyaDAEMON** module or device.\n\n**Condition to enable the `AVG` mode for a device**:\n\nIn the flow containg this subflow instance (usually CORE) must be defined:\n\n````\n    global.<deviceid>_AVERAGE = true|false     (mandatory)\n````\n\nThe simplest and user-convenient way to set this value is to add it in the `Global module config`.\n\n\n**Processing `dps` rules in `AVG mode`**:\n - This filter processes messages with one or more `dp`s, but not `dp` which produce a structure as value (see `explode` subflow): put these `dp` in the 'dp_exclude' list. \n - The complete `dp`s list is taken, for any device, from the `global.alldevices` object (see the `CORE.Global CORE config` node).\n - If a 'dp' is in the `dp_exclude` list, it is not stored, but immediately sent to the output without modifications.\n - Only the `dp`s with at least one value stored are present in the triggered output.\n - If the `dp` value '`isNaN()`' (i.e. not numeric) automatically in output is used last value.\n - If the `dp` value is `numeric`, in output we get the `average` of all stored input values (default).\n - The `average` is rounded to an integer if 'dp' is in `dp_round` list, otherwise it is with user-defined `decimal digits`.\n - If a 'dp' is in the `dp_MAX` or `dp_min` list, we get the `maximum` or the `minimum` value instead of the `average`.\n\n\nFor more info [see the wiki](https://github.com/msillano/tuyaDAEMON/wiki/case-study:-433-MHz-weather-station#6-notes-about-rtavg-filter-subflow).\n\n\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "f506ab8ce63f951b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 40,
                "wires": [
                    {
                        "id": "f506ab8ce63f951b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "deviceID",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "decimal digits",
                "type": "num",
                "value": "3",
                "ui": {
                    "type": "spinner"
                }
            },
            {
                "name": "dp_round",
                "type": "json",
                "value": "[]",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            },
            {
                "name": "dp_exclude",
                "type": "json",
                "value": "[]",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            },
            {
                "name": "dp_min",
                "type": "json",
                "value": "[]",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            },
            {
                "name": "dp_MAX",
                "type": "json",
                "value": "[]",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "from device"
        ],
        "outputLabels": [
            "to logging"
        ]
    },
    {
        "id": "ee953c15.ada29",
        "type": "subflow",
        "name": "static retry",
        "info": "Transform the `status` msg from a `tuya-smart-device` node into an _event_ message.\r\n\r\nRequired adding  a new Tuya device (alternative: `dynamic rety` subflow)\r\n\r\n### Parameters\r\n\r\n   <dl class=\"message-properties\">\r\n        <dt>deviceId\r\n            <span class=\"property-type\">string (credential)</span>\r\n        </dt>\r\n        <dd>   The ID of the wired Tuya device (same as in `core.global.alldevices`).\r\n        </dd>\r\n   </dl>\r\n\r\n### Inputs\r\n\r\n From _tuya-smart-device_ `client satus` output.\r\n\r\n### Outputs\r\n\r\n A new event message:\r\n ````\r\n  object\r\n   { \"payload\":{\r\n      \"deviceId\": <deviceID>,\r\n      \"data\": {\r\n          \"dps\":{\r\n            \"_connected\": true|false\r\n          }}}}\r\n ````\r\n \r\n It can ben routed to _logging_ input node of `core` flow.\r\n\r\n### Details\r\n\r\nProcess the `status` output from a tuya-smart-device node. If the connection status changes, it creates an event for standard logging, filtering unecessary messages.\r\n\r\nUse it with Tuya devices always ON. \r\n\r\n\r\nIf the device is disconnected, the reconnect interval, function(findTimeout, retryTimeout), is fixed. It is set in the _tuya-smart-device_ node (default) and modified with the pseudo-dp: \r\n  - SET  `_findTimeout`   Integer [ms]\r\n  - SET  `_retryTimeout`  Integer [ms]\r\n\r\n### References\r\nFor more info see [device control](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#devices-control)\r\n\r\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "6160136.f5f99ec"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 80,
                "wires": [
                    {
                        "id": "6160136.f5f99ec",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "deviceId",
                "type": "str",
                "value": "__PWRD__",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "cred"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "in staus"
        ],
        "outputLabels": [
            "to logging"
        ],
        "icon": "font-awesome/fa-rss-square"
    },
    {
        "id": "15c9daba.b55285",
        "type": "subflow",
        "name": "dynamic retry",
        "info": "Transforms the `status` msg from a _tuya-smart-device_ node into an _event_ message. \nImplements a dynamic retry policy.\n\n### Parameters\n\n   <dl class=\"message-properties\">\n        <dt>deviceId\n            <span class=\"property-type\">string</span>\n        </dt>\n        <dd>   The ID of the wired Tuya device (same as in `core.global.alldevices`).\n        </dd>\n         <dt>MinTimeout\n            <span class=\"property-type\">number | string | @string</span>\n        </dt>\n        <dd>  Low limit for fast retry [ms].\n\n  - uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n    - **early binding**:  a number | string, e.g. `1000`\n    - **late binding**: a string starting with `global.` | `flow.` | `msg.` e.g. `global.fast-connection`\n    - **evalued value**: a string starting with '@', e.g. `@1*1000`\n\n </dd>\n <dt>MaxTimeout <span class=\"property-type\">number | string | @string</span> </dt>\n        <dd>High limit for slow retry [ms].\n\n  - uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n    - **early binding**:  a number | string, e.g. `60000`\n    - **late binding**: a string starting with `global.` | `flow.` | `msg.` e.g. `global.fast-connection`\n    - **evalued value**: a string starting with '@', e.g. `@1*1000`\n\n </dd>\n  </dl>\n\n### Inputs\n\n From _tuya-smart-device_ `client satus` output.\n\n### Outputs\n  1. **event msg**:  a new event message:\n ````\n  object\n   { \"payload\":{\n        \"deviceId\": <deviceID>,\n        \"data\": {\n           \"dps\":{\n              \"_connected\": true|false\n            }}}}\n ````\n \n It can ben routed to `logging` input node of `core` flow.\n\n 2. a **low level SET message**: SET timeout for the device, sent directly to core `low_lev_IN` input node.\n````\n  object\n   { \"payload\":{\n        \"toDev\": idevice,\n        \"payload\": {\n           \"dps\": \"_findTimeout\",\n           \"set\": <dynamic-value>\n           }}}\n````\n\n### Details\nSome devices, usully always ON, requires fast timeout to reconnect soon (see `static retry` subflow), but other devices, sometime OFF, requires a different strategy: `dynamic retry`.\n\n\nThis subflow process the `status` output from a tuya-smart-device node. If the connection status changes, it creates an event for standard logging, filtering unecessary messages.\n\nDynamically optimizes the timeout of Tuya device connection attempts (since `smart-tuya-device-node` 4.0.2):\n- When the device is _connected_, the retry timeout is fast, set to `MinTimeout`.\n- If the device is _disconnected_, the timeout grows randomly until a `MaxTimeout`.\n\n_Example:_\nSet in `smart-tuya-device-node`:\n  - `Interval for retry connection` = 1000 (default, 1 sec).\n  - `Connection search interval` = 1000 \n\nWith the default settings (1s, 60s), the minimum retry interval is approximately _10 seconds_ (affected by many factors).\n\nIf the device is disconnected, the interval increases in random increments to approximately _sec. 60 in 9/10 minutes_ \n\nUse it with Tuya devices often OFF or not in use (e.g. mobile AC plugs).\n\n### References\n\nFor more info see [devices control](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#devices-control)\nFor the native documentation see  [node-red-contrib-tuya-smart-device](https://github.com/vinodsr/node-red-contrib-tuya-smart-device#input-format).<br>\n\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "292158fe075ae5f4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 20,
                "wires": [
                    {
                        "id": "a7c39c7.4e2dd6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 780,
                "y": 80,
                "wires": [
                    {
                        "id": "a7c39c7.4e2dd6",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "deviceId",
                "type": "str",
                "value": "__PWRD__",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "MinTimeout",
                "type": "num",
                "value": "1000",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "MaxTimeout",
                "type": "num",
                "value": "60000",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "from tuya-node.status"
        ],
        "outputLabels": [
            "to logging",
            "to device (low_lev_IN)"
        ],
        "icon": "font-awesome/fa-rss-square"
    },
    {
        "id": "3332031a.de38fc",
        "type": "subflow",
        "name": "driver_PDMtimer001",
        "info": "Driver for MQTT timerPDM-1 (Sonoff)\n\nThis is a direct replacement for `tuya-smart-device` node.\n\nSo the device `_sonoff001`, in `global.alldevices`,  is among the `real` devices.\n\n <dl class=\"message-properties\">\n        <dt>deviceId\n            <span class=\"property-type\">string (credential)</span>\n        </dt>\n        <dd>   The user ID of the MQTT device (same as in `core.global.alldevices`).\n        </dd>\n         <dt>Max_time\n            <span class=\"property-type\">number | string | @string</span>\n        </dt>\n        <dd>  Timeout [s] for `_refreshCycle`, without `stop` message. \n        \n - Use '0' for forever (requires 'stop').     \n - Default: `global.MAXREFRESH`, a common value for all devices. \n - uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n    - **early binding**:  a number | string, e.g. `60000`\n    - **late binding**: a string starting with `global.` | `flow.` | `msg.` e.g. `global.fast-connection`\n    - **evalued value**: a string starting with '@', e.g. `@1*1000`\n</dd></dl>\n\n\n### Installation\n\nI used a `dynamic rety` node, because the device is often disconnected from the mains. \n\nNo configuration is required, apart from the MQTT nodes that must connect with the broker present on the switch.\n\nnote: This subflow implements also `_refresh`  and `_refreshCycle` pseudoDP, so the `REFRESH` node is not required.",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 320,
                "wires": [
                    {
                        "id": "f50b75361e48e28d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1090,
                "y": 300,
                "wires": [
                    {
                        "id": "80d3499e.df2d58",
                        "port": 0
                    },
                    {
                        "id": "7a13d179.a10ed",
                        "port": 0
                    },
                    {
                        "id": "938228d2.f21868",
                        "port": 0
                    },
                    {
                        "id": "9ae04f2.4bac6b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1090,
                "y": 520,
                "wires": [
                    {
                        "id": "8329893d.2679a8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "deviceID",
                "type": "str",
                "value": "__PWRD__",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "Max_time",
                "type": "str",
                "value": "global.MAXREFRESH"
            }
        ],
        "meta": {},
        "color": "#C7E9C0",
        "inputLabels": [
            "message"
        ],
        "outputLabels": [
            "data",
            "state"
        ],
        "status": {
            "x": 1000,
            "y": 600,
            "wires": [
                {
                    "id": "8329893d.2679a8",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "f30e8140.1bed9",
        "type": "subflow",
        "name": "do command",
        "info": "This node creates a command for a device, i.e. the output can go to `core.std_cmds` or `core.fast_cmds` inputs nodes.\n\nGeneral purpose, used to send tuyaDEAMON commands.\n\n### Parameters\n<dl class=\"message-properties\">\n    <dt>remote <span class=\"property-type\">string | @string | NULL</span> </dt>\n    <dd>   the tuyaDEAMON instance (as in _core.global.remotemap_) or NULL.\n        \n - note: NULL => delete 'remote' attribute (i.e. local)\n - uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n      - early binding:  a string, e.g. `foo`\n      - late binding: a string starting with 'global.' | 'flow.' | 'msg.' e.g. `global.instance_name`\n      - evalued value: a string starting with '@', e.g. `@Date.now()`\n- runtime override: from `msg.command.remote` value\n\n </dd>\n    <dt>device <span class=\"property-type\">string | @string | NULL</span> </dt>\n    <dd>   the device user-name or `ID` or `CID` (as in 'core.global.alldevices').\n \n -  note: NULL => delete attribute 'device' (= device list)\n -  uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n     - early binding:  a string, e.g. `core`\n     - late binding: a string starting with 'global.' | 'flow.' | 'msg.' e.g. `global.instance_name`\n     - evalued value: a string starting with '@', e.g. `@Date.now()`\n - runtime override: from `msg.command.device` value\n\n</dd>\n   <dt>property <span class=\"property-type\">string | @string | NULL</span> </dt>\n   <dd>   the data point ID or user.name (string: \"3\" or \"_version\")\n        \n - note: NULL => delete 'property' attribute (= SCHEMA)\n -  uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n     - early binding:  a string, e.g. `_DBase`\n     - late binding: a string starting with 'global.' | 'flow.' | 'msg.' e.g. `global.instance_name`\n     - evalued value: a string starting with '@', e.g. `@Date.now()`\n- runtime override: from `msg.command.property` value\n\n</dd>\n<dt>value<span class=\"property-type\">any | @string | NULL</span></dt>\n<dd>  the new value to SET into the device (unencoded).\n        \n - note: NULL => delete 'value' attribute ( = GET)\n - uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n     - early binding: boolean | number | string | JSON object, as required by DP definition in `global.alldevices`\n     - late binding: a string starting with 'global.' | 'flow.' | 'msg.' e.g. `global.instance_name`\n     - evalued value: a string starting with '@', e.g. `@Date.now()`\n- runtime override: from `msg.command.value` value\n\n</dd> </dl>\n\n### Input\n\n  Any, used only to provoke the output, but values like `msg.command.remote` can override the parameters.\n\n### Output\n\nA standard tuyaDAEMON msg command. \n\n### Details\n\nStandard message structure \n````\nobject\n     {\n        payload :{ \n            remote:   <remote>, \n            device:   <device>,\n            property: <property>,\n            value:    <value>\n        }}\n````\nrules:\n````\nif remote = NULL (or missed) => local instance.\nif device = NULL (or missed) and remote valid => GET remote device list\n   elseif property = NULL (or missed)  => GET device SCHEMA\n      elseif value = NULL (or missed)  => GET property\n         else  => SET property\n````\n###References\nFor more info see [standard tuyaDAEMON command](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-as-event-processor#standard-tuyadaemon-command)\n\n\n\n\n\n",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 60,
                "wires": [
                    {
                        "id": "cb536e9b3a81862a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 60,
                "wires": [
                    {
                        "id": "cf230930.f37938",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "remote",
                "type": "str",
                "value": "NULL",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "device",
                "type": "str",
                "value": "core",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "property",
                "type": "str",
                "value": "version",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "value",
                "type": "str",
                "value": "NULL",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "inputLabels": [
            "trigger"
        ],
        "outputLabels": [
            "message"
        ]
    },
    {
        "id": "81d3b584.14c888",
        "type": "subflow",
        "name": "do logging",
        "info": "This subflow simulates data received from a _real tuya device_, i.e. it builds an 'event' to be sent to the `core.logging` input.\n\nGeneral purpose, used to build events in mirror and fake devices.\n\n### Parameters\n<dl class=\"message-properties\">\n    <dt>remote <span class=\"property-type\">string | @string | NULL</span> </dt>\n    <dd>   the tuyaDEAMON instance (as in _core.global.remotemap_) or NULL.\n        \n - Default: NULL => delete 'remote' (i.e. local)\n - uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n      - early binding:  a string, e.g. `ANDROID`\n      - late binding: a string starting with 'global.' | 'flow.' | 'msg.' e.g. `global.instance_name`\n      - evalued value: a string starting with '@', e.g. `@global.get('instance_name')`\n- runtime override: from `msg.logging.remote` value\n\n </dd>\n    <dt>deviceID <span class=\"property-type\">string | @string (credential)</span> </dt>\n    <dd>   the device user-name or `ID` or `CID` (as in _core.global.alldevices_).\n \n -  uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n     - early binding:  a string, e.g. `core`\n     - late binding: a string starting with 'global.' | 'flow.' | 'msg.' e.g. `global.TUYABRDG`\n     - evalued value: a string starting with '@', e.g. `@\"tuya\"+\"_bridge\"`\n - runtime override: from `msg.logging.deviceID` value\n\n</dd>\n   <dt>propertyDP <span class=\"property-type\">string | @string</span> </dt>\n   <dd>   the data point ID or user.name (string: \"3\" or \"_version\")\n        \n-  uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n     - early binding:  a string, e.g. `foo`\n     - late binding: a string starting with 'global.' | 'flow.' | 'msg.' e.g. `global.COUNTDP`\n     - evalued value: a string starting with '@', e.g. `@global.get()`\n- runtime override: from `msg.logging.propertyDP` value\n\n</dd>\n<dt>value<span class=\"property-type\">any | @string | NULL</span></dt>\n<dd>  the new value from the device.\n        \n- Default: NULL => \"\"\n- uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n     - early binding:  a string, e.g. `foo`\n     - late binding: a string starting with 'global.' | 'flow.' | 'msg.' e.g. `global.instance_name`\n     - evalued value: a string starting with '@', e.g. `@Date.now()`\n- runtime override: from `msg.logging.value` value\n\n</dd> </dl>\n\n### Input\n\n  Any, used only to provoke the output, but values like `msg.logging.remote` can override the parameters.\n\n\n### Output\n\n````` \n  object\n     {\n    \"payload\": {\n        \"remote_from\" : <remote>,       // optional  \n        \"deviceId\": <deviceId>,\n        \"data\": {\n            \"dps\": {\n                \"<propertyDP>\" = <value>\n            }}}\n`````\n### References\nsee [native event format](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-as-event-processor#native-event-format).\n",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 80,
                "wires": [
                    {
                        "id": "4276113107f56397"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 80,
                "wires": [
                    {
                        "id": "6d1b2b8f.c5e554",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "remote",
                "type": "str",
                "value": "NULL",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "deviceID",
                "type": "str",
                "value": "__PWRD__",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "propertyDP",
                "type": "str",
                "value": "required",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "value",
                "type": "str",
                "value": "any value allowed",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#87A980",
        "inputLabels": [
            "trigger"
        ],
        "outputLabels": [
            "message"
        ],
        "icon": "node-red/debug.svg"
    },
    {
        "id": "66ca1554.e4c85c",
        "type": "subflow",
        "name": "REDTRG",
        "info": "Build a REDTRG SET command for the tuya_bridge device. \nUsed in 'mirror' devices.\n\n### Parameters\n\n   <dl class=\"message-properties\">\n        <dt>TRGnumber\n            <span class=\"property-type\">integer | string | @string</span>\n        </dt>\n        <dd>  A count value used as trigger command.\n \n - Uses [late binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042) node (extended), and accepts:\n   - early binding:  a number | string, e.g. `7140`\n   - late binding: a string starting with 'global.' | 'flow.' | 'msg.' e.g. `global.MIRRORGUARD`\n   - evalued value: a string starting with '@', e.g. `@global.get('MIRRORGUARD') + 70 * 2`\n - runtime override: from `msg.TRGnumber` value\n        </dd>\n   </dl>\n\n### Inputs\n\nAny, used only to provoke the output or to override the parameter (`msg.TRGnumber`).\n\n### Outputs\n\nA **low level SET message** for the tuya_bridge device:\n````\n    object\n      {\n       \"payload\": {\n          \"dps\":<COUNTDP>, \n          \"set\": <TRGnumber>     \n          }}\n\n````\nIt can ben routed to `tuya_bridge_IN` input node of `core.trigger` flow.\n\n### Details\n\n- _convention_: REDTRIG nodes and related Tuya-cloud automation are named _REDTRGnnnnn_, where nnnnn is `TRGnumber`. \n\n- _hardware dependency_: the `dp` used is defined by `core.global.COUNTDP`.\n\n### References\n\nThe TRGnumber values are user defined. For the rules and the trigger values ranges, see _triggerMAP_ in `core_trigger` flow.<bR>\nSee also [trigger-info](https://github.com/msillano/tuyaDAEMON/wiki/tuyaTRIGGER-info)\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "da4079ee99ffcd9d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 600,
                "y": 80,
                "wires": [
                    {
                        "id": "f0932848.b39158",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "TRGnumber",
                "type": "str",
                "value": "see triggerMAP",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#A6BBCF",
        "inputLabels": [
            "any msg"
        ],
        "outputLabels": [
            "continue"
        ],
        "icon": "font-awesome/fa-arrow-right"
    },
    {
        "id": "2e55898d.e8af66",
        "type": "mqtt-broker",
        "name": "PDM Ozone timer#1",
        "broker": "192.168.1.12",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "19cea4348c0edc67",
        "type": "MySQLdatabase",
        "name": "local",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "tuyathome",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "93f8bfd.d0c854",
        "type": "MySQLdatabase",
        "name": "remote",
        "host": "192.168.1.4",
        "port": "3306",
        "db": "tuyathome",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "be9a4175af40924e",
        "type": "MySQLdatabase",
        "name": "Mac ",
        "host": "127.0.0.1",
        "port": "8889",
        "db": "tuyathome",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "b1477888b2bc18dd",
        "type": "mqtt-broker",
        "name": "default",
        "broker": "http://localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c306cbee.682538",
        "type": "function",
        "z": "e1c6cc8a.2f92a",
        "name": "REFRESH control",
        "func": "\nconst FASTDP = \"_refreshCycle\";   // set: 'off'| time [s]\nconst REFDP = \"_refresh\";        // set: 'any' ( acts as trigger)\nconst DEVID = env.get(\"deviceID\");\n\nconst USEMSG = env.get(\"REFRESH_message\");\n// Examples: use parameter\nconst REFONLY = { operation: \"REFRESH\" };\nconst REFONE = { operation: \"REFRESH\", dps: 20 };\nconst REFMANY = { operation: \"REFRESH\", requestedDPS: [1, 9, 6, 17, 18, 19, 20] };\nconst REFTEST = { operation: \"REFRESH\", requestedDPS: [18, 19, 20] };\nconst REFSCHEMA = { operation: \"REFRESH\", schema: true };\n// in older version used only REFONLY, because the others do not give appreciable differences,\n// now set by user on device basis\nfunction isNone(value) {\n    if (value) {\n        if (typeof (value) === \"string\") {\n            if (value.toUpperCase() === 'OFF') return true;\n            if (value.toUpperCase() === 'NO') return true;\n            if (value.toUpperCase() === 'NONE') return true;\n        }\n        return false;\n    }\n    return true;\n}\n\nif (DEVID === \"\") {\n    node.warn(\"ERROR [REFRESH] deviceID not set.\");\n    return [null];\n}\n// builds the output message to logging\nvar newMsg = {\n    \"payload\": {\n        \"deviceId\": DEVID,\n        \"deviceName\": \"dummy\", // as device node, not used\n        \"data\": {\n            \"dps\": {}\n        }\n    }\n};\n// outputs: timer/device/logging\n//  node.warn([\"in REFRESH\", msg]);\n// --------------------------------\n// ignores pseudoDP\nif ((msg.payload === undefined) || (msg.payload.dps === undefined)) return [null, msg];\n//\n// test for REFDP  SET/GET case\nif (msg.payload.dps === REFDP) {\n    if (msg.payload.set !== undefined) { // is set\n        newMsg.payload.data.dps[REFDP] = \"sent\";\n        //      node.warn([null, { payload: USEMSG }, newMsg]);\n        return ([null,\n            { payload: USEMSG },\n            newMsg]);\n    } else\n        return [null];   // no GET\n}\n\n//  test for  REFDP MULTIPLE case\nif ((msg.payload.data !== undefined) && (msg.payload.data[REFDP] !== undefined)) {\n    delete msg.payload.data[REFDP];\n    newMsg.payload.data.dps[REFDP] = \"sent\";\n    node.send([null,      // the refresh\n        { payload: USEMSG },\n        newMsg]);\n    return ([null,        // more standard\n        msg]);\n}\n\n// ----------------------------------\n// test for FASTDP  SET/GET case\nif (msg.payload.dps === FASTDP) {\n    if (msg.payload.set !== undefined) { // is set\n        context.set(\"fast\", msg.payload.set);\n        newMsg.payload.data.dps[FASTDP] = msg.payload.set;\n        if (isNone(msg.payload.set)) {\n            return ([{ payload: \"stop\" },\n                null,\n                newMsg]);\n        } else {\n            if (flow.get(\"Max_time\") == 0) {  // forever\n                node.send([{ loop: { duration: msg.payload.set, units: \"Second\" } }, null, null]);\n                return ([{ payload: USEMSG }, null, newMsg]);\n\n            } else {\n                node.warn([\"timeot = \", flow.get(\"Max_time\")]);\n                node.send([{ loop: { duration: msg.payload.set, units: \"Second\", maxtimeout: flow.get(\"Max_time\"), maxtimeoutunits: \"Second\" } }, null, null]);\n                return ([{ payload: USEMSG }, null, newMsg]);\n            }\n        }\n    } else { // is get, back last value\n        newMsg.payload.data.dps[FASTDP] = context.get(\"fast\");\n        return ([null, null, newMsg]);\n    }\n}\n\n// test for FASTDP  MULTIPLE case\nif ((msg.payload.data !== undefined) && (msg.payload.data[FASTDP] !== undefined)) {\n    let fst = msg.payload.data[FASTDP];\n    delete msg.payload.data[FASTDP];\n    context.set(\"fast\", fst);\n    newMsg.payload.data.dps[FASTDP] = fst;\n    if (isNone(fst)) {\n        return ([{ payload: \"stop\" }, null, newMsg]);\n    } else {\n        return ([{\n            payload: USEMSG,\n            loop: { duration: fst, units: \"Second\", maxtimeout: flow.get(\"Max_time\"), maxtimeoutunits: \"Second\" }\n        }, null, newMsg]);\n    }\n}\n\n// test for ALL,  SCHEMA case\n\nif (msg.payload.schema) {\n    newMsg.payload.data.dps[FASTDP] = context.get(\"fast\");\n    return ([null, msg, newMsg]);\n}\n// else do nothing\nreturn [null, msg];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\ncontext.set(\"fast\",0);",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 120,
        "wires": [
            [
                "9eb78521.a29748"
            ],
            [],
            []
        ],
        "info": "CUSTOMIZATION:\n\n- duplicate this node for any new device\n- update in code the deviceId\n  \nsee: [Howto: add a new device to tuyaDAEMON](https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON)"
    },
    {
        "id": "9eb78521.a29748",
        "type": "looptimer-advanced",
        "z": "e1c6cc8a.2f92a",
        "duration": "10",
        "units": "Second",
        "maxloops": "1000000",
        "maxtimeout": "5",
        "maxtimeoutunits": "Minute",
        "name": "",
        "x": 500,
        "y": 80,
        "wires": [
            [
                "c500a325b5d833af"
            ],
            []
        ]
    },
    {
        "id": "2542f38785a72b2e",
        "type": "function",
        "z": "e1c6cc8a.2f92a",
        "name": "late binding",
        "func": "\nfunction _upadateParam(_pname) {\n   var _xvalue = env.get(_pname);\n   if (_xvalue) {\n      let temp = _xvalue.toString().trim();\n      if (temp.startsWith('global.'))\n         _xvalue = global.get(temp.substring(7));\n      else if (temp.startsWith('flow.'))\n         _xvalue = flow.get(\"$parent.\" + temp.substring(5));\n      else if (temp.startsWith('msg.'))\n         _xvalue = msg[temp.substring(4)];\n      // extra eval           \n      else if (temp.startsWith('@'))\n         _xvalue = eval(temp.substring(1));\n   }\n\n   // optional: to set the parameter dynamically with a message.command property, same name\n   //      if((msg.command)&&(msg.command[_pname]))\n   //        _xvalue = msg.command[_pname];\n\n   // save actual value in the (sub)flow context           \n   flow.set(_pname, _xvalue);\n}\n\n// CUSTOMIZE HERE\n// get actual values\n_upadateParam(\"Max_time\");\n// done\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 60,
        "wires": [
            [
                "c306cbee.682538"
            ]
        ],
        "info": "See [Subflows and configuration: late and runtime parameters binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042)\n\nModified:\n- added evalued binding: @&lt;expression>  => eval(&lt;expression>). e.g. `@Date.now()` \n"
    },
    {
        "id": "c500a325b5d833af",
        "type": "function",
        "z": "e1c6cc8a.2f92a",
        "name": "filter",
        "func": "// looptimer-advanced output === input\n// this filters controls messages\nif (msg.payload)\n      return msg;\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9ccc0e77949a1eab",
        "type": "function",
        "z": "e8e1f4484dbb32d2",
        "name": "",
        "func": "let dpx = env.get(\"dp\");\n/*\n====  decodes and explodes structure (recursive) for one dp of a device.\n6: \"CNQAAGQAACIAAA==\" (in) to get atomic:\n_6.V: 226\n_6.Leack: 0\n_6.A: 0.1\n_6.W: 0.034\n*/\n\nfunction is_pure_object(val) {\n    // from https://stackoverflow.com/questions/57227185/how-to-detect-if-a-variable-is-a-pure-javascript-object\n    if (!val)\n        return false;\n    let proto = Object.getPrototypeOf(val);\n    return proto == Object.prototype || proto == null\n}\n// recursive function\nfunction explodeStep(name, data) {\n    Object.entries(data).forEach(([key, value]) => {\n        if (is_pure_object(value))\n            explodeStep(name + \".\" + key, value);\n        else\n            msg.payload.data.dps[name + \".\" + key] = value;\n    });\n}\n\nif ((msg.payload) && (msg.payload.data) && (msg.payload.data.dps) && (msg.payload.data.dps[dpx])) {\n    const data = context.global.datadecode[env.get(\"decode\")](msg.payload.data.dps[dpx]);\n    explodeStep(\"_\" + dpx, data);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f506ab8ce63f951b",
        "type": "function",
        "z": "f2bb4b234e94093b",
        "name": "msgfilter RT/AVG",
        "func": "\nconst DDIGITS = env.get(\"decimal digits\");  // decimal digits on averages (truncate)\nconst DEVID = env.get('deviceID');\n\nvar inObj = null;\n// ------------- devices logging msg process\nif ((msg.payload) && (msg.payload.data)) {\n  // get the device id:\n    if (msg.payload.data.cid) {\n      // is virtual    \n      inObj = context.global.alldevices.getODev(msg.payload.data.cid, \"virtual\");\n    } else {\n      inObj = context.global.alldevices.getODev(msg.payload.deviceId);\n    }\n  // store ? \n  //  node.warn([\"user \"+inObj.id + \" permission: \", global.get(inObj.id + \"_AVERAGE\")]);\n  if ((inObj) && (global.get(inObj.id + \"_AVERAGE\") === undefined))\n    node.error(\"WARNING: global.\" + inObj.id + \"_AVERAGE variable not found!. No AVERAGE process.\");\n  \n  if ((inObj) && (inObj.id != DEVID)) {\n    node.error([\"WARNING: bad ID on message. No AVERAGE process.\"], msg);\n    return (msg);\n    }\n\n  if ((!inObj) || !(global.get(inObj.id + \"_AVERAGE\")))\n    return (msg);\n\n  // test: in array dp_exclude? if yes return msg\n  let dpexclude = env.get('dp_exclude');\n  if (Array.isArray(dpexclude) && (dpexclude.length >= 1)) {\n    dpexclude.forEach(function (edp) {\n      //    node.warn([\"testing \" + edp, msg]);\n      if (msg.payload.data.dps[edp] !== undefined) {\n        let newMsg = RED.util.cloneMessage(msg);\n        newMsg.payload.data.dps = {};\n        newMsg.payload.data.dps[edp] = msg.payload.data.dps[edp];\n        node.send(newMsg);\n        delete msg.payload.data.dps[edp];\n        //            node.warn([\"AVG exclude: \", newMsg, msg]);\n      }\n    });\n  } // endif dpexclude\n  // more dps? store\n  if (Object.keys(msg.payload.data.dps).length > 0) {\n    // node.warn([\"AVG storing\", msg]);\n    let tmp = flow.get(inObj.id) || [];\n    tmp.push(msg);\n    flow.set(inObj.id, tmp);\n  } // endif store\n//  else\n//     node.warn([\"AVG kill\", msg]);\n    return null;\n} // endif devicemsg\n\n\n// ------------- trigger average msg process\nif ( (msg.topic) && (msg.topic == 'average')) {\n  const msgStore = flow.get(DEVID) || [];\n  if (msgStore.length == 0) return null;\n  // \n  let newMsg = RED.util.cloneMessage(msgStore[0]);\n  delete newMsg.payload.data.dps;\n  newMsg.payload.data.dps = {};\n   // node.warn([\"AVG out start\", newMsg, msgStore]);\n  let dsum = {};\n  let dcount = {};\n  // structures initialize      \n  const devObj = context.global.alldevices.getODev(DEVID);\n  devObj.dps.forEach(function (property) {\n    const dpname = property.dp.toString();\n    dsum[dpname] = null;\n    dcount[dpname] = 0;\n    if (env.get(\"dp_min\").includes(dpname))\n      dcount[dpname] = \"min\";\n    if (env.get(\"dp_MAX\").includes(dpname))\n      dcount[dpname] = \"max\";\n\n    //     node.warn([\"in dps step \",devObj,dpname, dsum, dcount]);\n  });\n  //   node.warn([\"init \",devObj,newMsg,dsum,dcount]);\n  // data collect  \n  msgStore.forEach(function (smsg) {\n    Object.keys(smsg.payload.data.dps).forEach(function (key, index) {\n      if ((smsg.payload.data.dps[key]) || (smsg.payload.data.dps[key] === 0)) {\n        if (isNaN(smsg.payload.data.dps[key])) {\n          dsum[key] = smsg.payload.data.dps[key];\n          dcount[key] = -1;\n        } else if ((dcount[key] == \"min\") && ((dsum[key] == null) || (dsum[key] > smsg.payload.data.dps[key]))) {\n          dsum[key] = smsg.payload.data.dps[key];\n        } else if ((dcount[key] == \"max\") && ((dsum[key] == null) || (dsum[key] < smsg.payload.data.dps[key]))) {\n          dsum[key] = smsg.payload.data.dps[key];\n        } else if (dcount[key] === 0) {\n          dsum[key] = smsg.payload.data.dps[key];\n          dcount[key] = 1;\n        } else if ((!isNaN(dcount[key])) && (dcount[key] > 0)) {\n          dsum[key] += smsg.payload.data.dps[key];\n          dcount[key]++;\n        }\n      }\n    });\n  });\n  // output process\n  //  node.warn([\"process \",newMsg,dsum,dcount]);\n  Object.entries(dcount).forEach(function ([key, value]) {\n   if ((value === -1) || (value === \"min\") || (value === \"max\")) {\n      if (dsum[key] !== null)\n        newMsg.payload.data.dps[key] = dsum[key];\n    } else if ((!isNaN(value)) && (value > 0)) {\n      if (env.get('dp_round').includes(key))\n        newMsg.payload.data.dps[key] = Math.round(dsum[key] / value);\n      else\n        newMsg.payload.data.dps[key] = Number((dsum[key] / value).toFixed(DDIGITS));\n    }\n  });\n\n  // node.warn([\"AVG out done\"+ newMsg.payload.deviceId ,newMsg,dsum,dcount]);\n  flow.set(DEVID, []);\n  return newMsg;\n} // endif tiggermsg\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"oThis\", null);\n\n",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "6160136.f5f99ec",
        "type": "function",
        "z": "ee953c15.ada29",
        "name": "connected message - static",
        "func": "// to set global.tuyasyatus.xxxx._connected \n// creates a response for the dp \"_connected\"\n// store value and filter events\n\nvar CONN = \"_connected\";  //  tuyadaemon internal define\n// see also tuyaDAEMON.\"connection check\" function\n// local function\nfunction _sendReal(idevice, value) {\n   // builds a fake OUT message \n   var newMsg = {\n      \"payload\": {\n         \"deviceId\": idevice,\n         \"data\": {\n            \"dps\": {\n               [CONN]: value\n            }\n         }\n      }\n   };\n   return newMsg;\n}\n\n// user set parameter device id (simple)\nvar deviceId = env.get(\"deviceId\");\n\nvar nowconnected;\nif ((msg.payload !== undefined) && (msg.payload.state !== undefined)) {\n   nowconnected = (msg.payload.state == \"CONNECTED\" || msg.payload.state == \"node-red:common.status.connected\");        // can change\n}\nif ((msg.status !== undefined) && (msg.status.text !== undefined)) {\n   nowconnected = (msg.status.text == \"CONNECTED\" || msg.status.text == \"node-red:common.status.connected\");        // can change\n}\nif (nowconnected == undefined) return null;\n// filering \nlet old = context.get(deviceId + \"_con\");\n// node.warn([\"Static retry \",msg, nowconnected, old]);\n// no changes, no message\nif (old === nowconnected) return null;\n\ncontext.set(deviceId + \"_con\", nowconnected);\n// 16/05/2023 to get better control skip start unconnected message\nif ((old === undefined) && (nowconnected == false)) return null;\nif ((old == \"none\") && (nowconnected == false)) return null;\n//\nreturn (_sendReal(deviceId, nowconnected));\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// set the default status _connected to 'none' in tuyastatus\nvar deviceId = env.get(\"deviceId\");\ncontext.set(deviceId+\"_con\",\"none\");",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 80,
        "wires": [
            []
        ],
        "info": "Makes  the _event_ message."
    },
    {
        "id": "a7c39c7.4e2dd6",
        "type": "function",
        "z": "15c9daba.b55285",
        "name": "connected message - dynamic",
        "func": "// to set global.tuyasyatus.xxxx._connected\n\nconst CONN = \"_connected\"; //  pseudoDPs\nconst TMT = \"_findTimeout\";\nconst RMT = \"_retryTimeout\";\n\n// local functions\nfunction _msgLogging(idevice, value) {\n   // builds a fake OUT message\n   var newMsg = {\n      \"payload\": {\n         \"deviceId\": idevice,\n         \"data\": {\n            \"dps\": {\n               [CONN]: value\n            }\n         }\n      }\n   };\n   return newMsg;\n}\n\nfunction _msgTimeoutCommand(idevice, timeout) {\n   var tmtMsg = {\n      \"toDev\": idevice,\n      \"payload\": {\n         \"dps\": TMT,\n         \"set\": timeout\n      }\n   };\n   return tmtMsg;\n}\n\nfunction getRandomArbitrary(min, max) {\n   return Math.random() * (max - min) + min;\n}\n\n// ------------------  main\nconst XfLo = 1.0; // min increment 0%\nconst XfHi = 1.4; // min increment 40%\n// user set parameter device id\nlet deviceId = env.get(\"deviceId\");\nlet Tmin = flow.get(\"MinTimeout\");\nlet TMAX = flow.get(\"MaxTimeout\");\n//\nlet cold = context.get(deviceId + \"_con\");\nlet cnew = cold;\nlet told = context.get(deviceId + \"_time\");\nlet tnew = told;\nlet cMsg = null;\nlet tMsg = null;\n//status.text\nif (msg.payload == undefined) return [null];\nswitch (msg.payload.state) {\n   case \"CONNECTED\":\n      tnew = Tmin;\n      cnew = \"connected\";\n      break;\n   case \"DISCONNECTED\":\n   case \"ERROR\":\n      if (told < TMAX) {\n         tnew = Math.floor(told * getRandomArbitrary(XfLo, XfHi));\n      }\n      cnew = \"connecting\";\n      break;\n   case \"CONNECTING\":\n      cnew = \"connecting\";\n      break;\n}\n//  out: 1. to device\n//       2. to logging\n// node.warn([\"Dynamic retry \",msg, cnew, cold]);\nif (cnew !== cold) {\n   // 16/05/2023 to get better control skip start unconnected message\n   if ((cold !== undefined) && (cold !== \"none\"))\n       cMsg = _msgLogging(deviceId, cnew === \"connected\");\n   context.set(deviceId + \"_con\", cnew);\n}\n\nif (tnew !== told) {\n   tMsg = _msgTimeoutCommand(deviceId, tnew);\n   context.set(deviceId + \"_time\", tnew);\n}\nreturn ([cMsg, tMsg]);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// set the default status _connected to null in tuyastatus\n// creates tuyastatus entry to null.\nlet deviceId = env.get(\"deviceId\");\ncontext.set(deviceId + \"_con\", \"none\");\nlet Tmin = env.get(\"MinTimeout\");\ncontext.set(deviceId + \"_time\", Tmin);\n",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 40,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "292158fe075ae5f4",
        "type": "function",
        "z": "15c9daba.b55285",
        "name": "late binding",
        "func": "\nfunction _upadateParam(_pname) {\n   var _xvalue = env.get(_pname);\n   if (_xvalue) {\n      let temp = _xvalue.toString().trim();\n      if (temp.startsWith('global.'))\n         _xvalue = global.get(temp.substring(7));\n      else if (temp.startsWith('flow.'))\n         _xvalue = flow.get(\"$parent.\" + temp.substring(5));\n      else if (temp.startsWith('msg.'))\n         _xvalue = msg[temp.substring(4)];\n      // extra eval           \n      else if (temp.startsWith('@'))\n         _xvalue = eval(temp.substring(1));\n   }\n\n   // optional: to set the parameter dynamically with a message property, same name\n   //      if((msg.command)&&(msg.command[_pname]))\n   //           _xvalue = msg.command[_pname];\n\n   // save actual value in the (sub)flow context           \n   flow.set(_pname, _xvalue);\n}\n\n// CUSTOMIZE HERE\n// get actual values\n_upadateParam(\"MinTimeout\");\n_upadateParam(\"MaxTimeout\");\n// done\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 40,
        "wires": [
            [
                "a7c39c7.4e2dd6"
            ]
        ],
        "info": "See [Subflows and configuration: late and runtime parameters binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042)\n\nModified:\n- added evalued binding: @&lt;expression>  => eval(&lt;expression>). e.g. `@Date.now()` \n- runtime override: uses `msg.command.xxx`"
    },
    {
        "id": "808a0753.c4e598",
        "type": "mqtt in",
        "z": "3332031a.de38fc",
        "name": "",
        "topic": "/ozone/timerpdm/1/status/info",
        "qos": "0",
        "datatype": "utf8",
        "broker": "2e55898d.e8af66",
        "inputs": 0,
        "x": 580,
        "y": 480,
        "wires": [
            [
                "80d3499e.df2d58"
            ]
        ]
    },
    {
        "id": "c1b5bd9e.0aff1",
        "type": "mqtt out",
        "z": "3332031a.de38fc",
        "name": "MQTT send",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2e55898d.e8af66",
        "x": 650,
        "y": 340,
        "wires": []
    },
    {
        "id": "505b5823.792928",
        "type": "mqtt in",
        "z": "3332031a.de38fc",
        "name": "",
        "topic": "/ozone/timerpdm/1/status/config",
        "qos": "0",
        "datatype": "utf8",
        "broker": "2e55898d.e8af66",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 590,
        "y": 400,
        "wires": [
            [
                "7a13d179.a10ed"
            ]
        ]
    },
    {
        "id": "215fc962.4168a6",
        "type": "mqtt in",
        "z": "3332031a.de38fc",
        "name": "",
        "topic": "/ozone/timerpdm/1/status/output",
        "qos": "2",
        "datatype": "utf8",
        "broker": "2e55898d.e8af66",
        "inputs": 0,
        "x": 590,
        "y": 440,
        "wires": [
            [
                "938228d2.f21868"
            ]
        ]
    },
    {
        "id": "9ae04f2.4bac6b",
        "type": "function",
        "z": "3332031a.de38fc",
        "name": "handle GET operations",
        "func": "// GET: response from tuyastatus.\n\nfunction _getGlobalValue(Dn, Pn){\nvar tuyastatus = global.get(\"tuyastatus\");\nif ((tuyastatus !== undefined) && (tuyastatus[Dn] !== undefined)) { // ok device field\n   if (Pn === \"schema\") \n          return tuyastatus[Dn];\n   return tuyastatus[Dn][Pn];\n   }\nreturn undefined;\n}\n\n// ===========================  main\n\nlet command = msg.payload.operation || 'SET';\n// node.warn([\"in command\", command, msg]);\nconst PREFIX = \"/ozone/timerpdm/1/\";\n\nif (command === 'GET'){\n      // value from tuyastatus, format as device response\n      let oD    = context.global.alldevices.getODev(msg.to);\n      var dName = context.global.alldevices.getDevName(oD);\n      var pName = context.global.alldevices.getDpsName(oD, msg.infodp);\n      var value = _getGlobalValue(dName, pName);\n      if (value !== undefined){\n            var newMsg = { \n               \"payload\":{\n                  \"deviceId\": msg.to,\n                  \"deviceName\": dName,\n                  \"data\": {\n                      \"dps\":{\n                          [msg.payload.dps]: value  \n                  }}}};\n          return newMsg;\n          }\nreturn null;          \n}  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "464d6ade.3318f4",
        "type": "status",
        "z": "3332031a.de38fc",
        "name": "MQTT status",
        "scope": [
            "808a0753.c4e598",
            "c1b5bd9e.0aff1",
            "505b5823.792928",
            "215fc962.4168a6"
        ],
        "x": 530,
        "y": 540,
        "wires": [
            [
                "8329893d.2679a8"
            ]
        ]
    },
    {
        "id": "80d3499e.df2d58",
        "type": "function",
        "z": "3332031a.de38fc",
        "name": "refresh + JSON split ",
        "func": "// based on info msg every 1s\n// rules:\n// - always when 'led' change.\n// - default (tstart == 0): only when 'led' change.\n// else every refreshCicle secons, until flow.Max > 0 \nlet tcount = flow.get(\"tcount\");\nlet cycle = flow.get(\"tstart\");\nlet max = flow.get(\"Max\");\nif (cycle > 0){\n  tcount = ( ++tcount) % cycle;\n  flow.set(\"tcount\",tcount);\n  }\nlet skip = ((cycle === 0) || (tcount !== 0)) ;\n//  timeout\nif (max <= 0)\n    skip = true;\nelse \n    flow.set(\"Max\",--max);\n//  \nlet next = flow.get(\"next\");\nif (next){\n    skip = false;\n    flow.set(\"next\", false);\n    }\n// node.warn({\"tcount\":tcount,\"cycle\":cycle,\"max\":max,\"next\": next});\n//\nvar newMsg = { \n    \"payload\":{\n        \"deviceId\": \"_sonoff001\",\n        \"data\": {\n             \"dps\":{\n            }}}};\n//\nlet odata = JSON.parse(msg.payload);\nif (odata[1] === flow.get(\"lastled\")) {\n   if (skip) return null;\n}\nflow.set(\"lastled\", odata[1]);\nnewMsg.payload.data.dps[\"_info\"] = odata[0];\nswitch(odata[1]){\n  case 0:\n     newMsg.payload.data.dps[\"_led\"] = \"gray\";\n     break;\n  case 1:\n     newMsg.payload.data.dps[\"_led\"] = \"green\";\n     break;\n  case 2:\n     newMsg.payload.data.dps[\"_led\"] = \"red\";\n     break;\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "7a13d179.a10ed",
        "type": "function",
        "z": "3332031a.de38fc",
        "name": "JSON split",
        "func": "\nvar newMsg = { \n    \"payload\":{\n        \"deviceId\": \"_sonoff001\",\n        \"data\": {\n             \"dps\":{\n            }}}};\nlet odata = JSON.parse(msg.payload);\nnewMsg.payload.data.dps[\"_mode\"] = odata[\"mode\"] ==0?\"OFF\":odata[\"mode\"] ==1?\"AUTO\":\"LOOP\";\nnewMsg.payload.data.dps[\"_ONtime\"] = odata[\"ONtime\"];\nnewMsg.payload.data.dps[\"_OFFtime\"] = odata[\"OFFtime\"];\nnewMsg.payload.data.dps[\"_PDM\"] = odata[\"PDM\"];\nnewMsg.payload.data.dps[\"_timezone\"] = odata[\"timezone\"];\n// change\nnewMsg.payload.data.dps[\"_startTime\"] = odata[\"Ttime\"];\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "938228d2.f21868",
        "type": "function",
        "z": "3332031a.de38fc",
        "name": "JSON split",
        "func": "var newMsg = { \n    \"payload\":{\n        \"deviceId\": \"_sonoff001\",\n        \"data\": {\n             \"dps\":{\n            }}}};\nlet odata = JSON.parse(msg.payload);\nnewMsg.payload.data.dps[\"_mode\"] = odata[\"mode\"] ==0?\"OFF\":odata[\"mode\"] ==1?\"AUTO\":\"LOOP\";\nnewMsg.payload.data.dps[\"_PDM\"] = odata[\"PDM\"];\nnewMsg.payload.data.dps[\"_count\"] = odata[\"count\"];\n// name change\nnewMsg.payload.data.dps[\"_clock\"] = odata[\"Time\"];\nnewMsg.payload.data.dps[\"_switch\"] = odata[\"output\"];  //  converted by BOOLEANONOFF\nnewMsg.payload.data.dps[\"_countdown\"] = odata[\"toggle\"];\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node \n",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "c8e74e64.7eafe",
        "type": "function",
        "z": "3332031a.de38fc",
        "name": "SET to MQTT",
        "func": "// SET: format change, and some name/values changes\n\nfunction isNone(value){   // same as in 'REFRESH'\n    if(value){\n        if(typeof(value) === \"string\"){\n            if(value.toUpperCase() === 'OFF') return true;\n            if(value.toUpperCase() === 'NO') return true;\n            if(value.toUpperCase() === 'NONE') return true;\n        }\n    return false;\n    }\nreturn true;\n}\n\nlet command = msg.payload.operation || 'SET';\nconst PREFIX = \"/ozone/timerpdm/1/\";\n\nif (command == 'SET'){\n       switch(msg.payload.dps) {\n           case '_go':    // MQTT commands\n           case '_off':\n           case '_end':\n           case '_send':\n               msg.topic=PREFIX + \"command\";\n               msg.payload = msg.payload.dps.substring(1);\n               flow.set(\"next\", true);\n               return msg;\n           case '_refresh': // name change\n //              msg.payload =\"send\";\n //              msg.topic=PREFIX + \"command\";\n //              node.warn(\"in refresh\");\n               flow.set(\"next\", true);\n  //             return msg;\n               return null;\n           case '_refreshCycle':  // implementation in node 'refresh + JSON split'\n               if (isNone(msg.payload.set))\n                  flow.set(\"tstart\", 0);\n               else {\n                  flow.set(\"tstart\", msg.payload.set);\n                  flow.set(\"Max\", flow.get(\"Max_time\"));\n               }\n               break;\n           case \"_mode\":     // value conversion\n                if (msg.payload.set === 'OFF')  msg.payload.set = 0;\n                if (msg.payload.set === 'AUTO') msg.payload.set = 1;\n                if (msg.payload.set === 'LOOP') msg.payload.set = 2;\n                msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                msg.topic=PREFIX + \"set\";\n                return msg;\n             case \"_startTime\":  // name change\n                 msg.payload.dps = \"+Ttime\";\n                 msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                 msg.topic=PREFIX + \"set\";\n                 return msg;\n             case \"_clock\":  // name change\n                 msg.payload.dps = \"+nowtime\";\n                 msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                 msg.topic=PREFIX + \"set\";\n                 return msg;\n           default:      // MQTT set, not name change, not value conversions\n                 msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                 msg.topic=PREFIX + \"set\";\n                 return msg;\n           }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 340,
        "wires": [
            [
                "c1b5bd9e.0aff1"
            ]
        ]
    },
    {
        "id": "8329893d.2679a8",
        "type": "function",
        "z": "3332031a.de38fc",
        "name": "set state",
        "func": "\n\nreturn [{payload:{state : msg.status.fill === \"green\"?\"CONNECTED\":\"DISCONNECTED\"}},\n        msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 540,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d6db7fef6e584d21",
        "type": "comment",
        "z": "3332031a.de38fc",
        "name": "device_PDMtimer-1",
        "info": "",
        "x": 170,
        "y": 80,
        "wires": []
    },
    {
        "id": "05bb35727f647a7b",
        "type": "inject",
        "z": "3332031a.de38fc",
        "name": "statup only",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 75,
        "y": 200,
        "wires": [
            [
                "841d332b0f486198"
            ]
        ],
        "icon": "node-red/trigger.svg",
        "l": false
    },
    {
        "id": "841d332b0f486198",
        "type": "function",
        "z": "3332031a.de38fc",
        "name": "PDMtimer flow startup",
        "func": "// Run as soon as possible after all 'On Start' and 'Global Config'.\n// note: the run order of all 'Global config' and all 'On Start' is undefined.\n// So, if some 'On Start' function  requires 'Global Config' data, palace it there.\n// --------------------------------------------------- standard\nconst asDEVICE =[\"_sonoff001\"];            // in alldevices, it can have friendly name\nconst asMODULE = \"modules.driver_PDMtimer001\";\nconst VERSION = \"2.2.0\";\n// --------------------------------------------------- standard\nif (!global.get(\"coresetup\")){\n    node.warn(\"CORE STARTUP ERROR: adjust startup delays.\");\n    return([null]);\n}\n// --------------------- init startup for the flow.\nglobal.set(asMODULE,  VERSION);  // update modules\n\n// access stuff\n// --- see also different implementation in 'core.core flow setup' node.\nlet oDev = context.global.alldevices.getODev(asDEVICE, \"real\");\nif (oDev === undefined){\n   node.warn(\"[startup] ERROR: not found the device '\"+asDEVICE+\"' in global.alldevices.\");\n   return;\n}\nvar pmDevName = context.global.alldevices.getDevName(oDev);\n// ---------------- inizializes global tuyastatus\nlet tstatus = \"tuyastatus['\"+ pmDevName+\"']\";\n// init using only _connected (not in alldevices), so does cleanup\nglobal.set(tstatus, {_connected: true});\n// init all GETable dps with default value\noDev.dps.forEach(adp => {\n    if (['RW','WW','GW','RO','UNK','PUSH', undefined].includes(adp.capability)){\n        let dpname = \"['\" + (adp.name ? adp.name:adp.dp)+\"']\";\n        switch (adp.dp){     // some special init:   \n          default:\n             global.set(tstatus+dpname, \"none\");\n        }\n    }\n });\n\n// --------------------------------------------- standard processing ends\n// more flow init required now (and not in 'On Start') by some properties    \n// see: 'On Start'.\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node \nflow.set(\"tstart\", 5);\nflow.set(\"tcount\", 0);\nflow.set(\"Max\", 0);\nflow.set(\"next\", true);\n",
        "finalize": "global.set(\"modules.driver_PDMtimer\", undefined);\n",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "f50b75361e48e28d",
        "type": "function",
        "z": "3332031a.de38fc",
        "name": "late binding",
        "func": "\nfunction _upadateParam(_pname){\n     var  _xvalue = env.get(_pname);\n     if (_xvalue){\n        let temp = _xvalue.toString().trim();\n        if (temp.startsWith('global.'))\n           _xvalue = global.get(temp.substring(7));\n        else if(temp.startsWith('flow.'))\n           _xvalue = flow.get(\"$parent.\"+ temp.substring(5));\n        else if(temp.startsWith('msg.'))\n           _xvalue = msg[temp.substring(4)];\n           // extra eval           \n        else if(temp.startsWith('@'))\n           _xvalue = eval(temp.substring(1));\n      }\n      \n// optional: to set the parameter dynamically with a message property, same name\n//      if((msg.command)&&(msg.command[_pname]))\n//        _xvalue = msg.command[_pname];\n           \n// save actual value in the (sub)flow context           \n      flow.set(_pname, _xvalue);\n      }\n      \n// CUSTOMIZE HERE\n// get actual values\n _upadateParam(\"Max_time\");\n // done\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 320,
        "wires": [
            [
                "c8e74e64.7eafe",
                "9ae04f2.4bac6b"
            ]
        ],
        "info": "See [Subflows and configuration: late and runtime parameters binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042)\n\nModified:\n- added evalued binding: @&lt;expression>  => eval(&lt;expression>). e.g. `@Date.now()` \n"
    },
    {
        "id": "cf230930.f37938",
        "type": "function",
        "z": "f30e8140.1bed9",
        "name": "make msg",
        "func": "\n// builds the object\nvar res = {\n    payload: {\n        remote: flow.get(\"remote\"),\n        device: flow.get(\"device\"),\n        property: flow.get(\"property\"),\n        value: flow.get(\"value\")\n    }\n}\n\n// processes NULL cases    \nif ((!(res.payload.remote)) || (res.payload.remote == 'NULL'))\n    delete (res.payload.remote)\n\nif (res.payload.device == \"NULL\") {\n    delete (res.payload.device);\n    delete (res.payload.property);\n    delete (res.payload.value);\n}\n\nif (res.payload.property == \"NULL\") {\n    delete (res.payload.property);\n    delete (res.payload.value);\n}\n\nif (res.payload.value == \"NULL\")\n    delete (res.payload.value);\n\nreturn res;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 60,
        "wires": [
            []
        ],
        "info": "Implements 'NULL' rules, format output."
    },
    {
        "id": "cb536e9b3a81862a",
        "type": "function",
        "z": "f30e8140.1bed9",
        "name": "late binding",
        "func": "\nfunction _upadateParam(_pname) {\n   var _xvalue = env.get(_pname);\n   if (_xvalue) {\n      let temp = _xvalue.toString().trim();\n      if (temp.startsWith('global.'))\n         _xvalue = global.get(temp.substring(7));\n      else if (temp.startsWith('flow.'))\n         _xvalue = flow.get(\"$parent.\" + temp.substring(5));\n      else if (temp.startsWith('msg.'))\n         _xvalue = msg[temp.substring(4)];\n      // extra eval           \n      else if (temp.startsWith('@'))\n         _xvalue = eval(temp.substring(1));\n   }\n\n   // optional: to set the parameter dynamically with a message property, same name\n   if ((msg.command) && (msg.command[_pname]))\n      _xvalue = msg.command[_pname];\n\n   // save actual value in the (sub)flow context           \n   flow.set(_pname, _xvalue);\n}\n\n// CUSTOMIZE HERE\n// get actual values\n_upadateParam(\"remote\");\n_upadateParam(\"device\");\n_upadateParam(\"property\");\n_upadateParam(\"value\");\n// done\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 60,
        "wires": [
            [
                "cf230930.f37938"
            ]
        ],
        "info": "See [Subflows and configuration: late and runtime parameters binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042)\n\nModified:\n- added evalued binding: @&lt;expression>  => eval(&lt;expression>). e.g. `@Date.now()` \n- runtime override: uses `msg.command.xxx`"
    },
    {
        "id": "6d1b2b8f.c5e554",
        "type": "function",
        "z": "81d3b584.14c888",
        "name": "format logging msg",
        "func": "    // builds a fake OUT message\n   var newMsg = {\n         \"payload\": {\n           \"remote_from\" : flow.get(\"remote\"),\n           \"deviceId\" : flow.get(\"deviceID\"),\n           \"data\":{\n                dps :{}\n                }\n            }\n        }\n  // late binding CUSTOM: special 'NULL' process for 'do Logging' subflow\n   if (newMsg.payload.remote_from === 'NULL')\n         delete(newMsg.payload.remote_from);\n  \n   newMsg.payload.data.dps[flow.get(\"propertyDP\").toString()] = ((flow.get(\"value\") === 'NULL')? \"\" : flow.get(\"value\"));\n\n   return (newMsg);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 80,
        "wires": [
            []
        ],
        "info": "implements 'NULL' rules, format output object."
    },
    {
        "id": "4276113107f56397",
        "type": "function",
        "z": "81d3b584.14c888",
        "name": "late binding",
        "func": "\nfunction _upadateParam(_pname) {\n   var _xvalue = env.get(_pname);\n   if (_xvalue) {\n      const temp = _xvalue.toString().trim();\n      if (temp.startsWith('global.'))\n         _xvalue = global.get(temp.substring(7));\n      else if (temp.startsWith('flow.'))\n         // fom caller flow context        \n         _xvalue = flow.get(\"$parent.\" + temp.substring(5));\n      else if (temp.startsWith('msg.')) {\n         //    _xvalue = msg[temp.substring(4)]; // do  not works if it contains '.'\n         _xvalue = eval(temp);\n      }\n      // extra eval           \n      else if (temp.startsWith('@'))\n         _xvalue = eval(temp.substring(1));\n   }\n   // optional: to set the parameter dynamically with a message property\n   if ((msg.logging) && (msg.logging[_pname]))\n      _xvalue = msg.logging[_pname];\n\n   // save actual value in the (sub)flow context  \n   flow.set(_pname, _xvalue);\n}\n\n_upadateParam(\"remote\");\n_upadateParam(\"deviceID\");\n_upadateParam(\"propertyDP\");\n_upadateParam(\"value\");\n\n// done\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 80,
        "wires": [
            [
                "6d1b2b8f.c5e554"
            ]
        ],
        "info": "See [Subflows and configuration: late and runtime parameters binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042)\n\nModified:\n- added evalued binding: @&lt;expression>  => eval(&lt;expression>). e.g. `@Date.now()` \n- runtime override: uses `msg.logging.xxx`"
    },
    {
        "id": "f0932848.b39158",
        "type": "function",
        "z": "66ca1554.e4c85c",
        "name": "builds  X TRIGGER",
        "func": "const triggerDP = global.get('COUNTDP');  // tuya-bridge countdown\n\nxvalue = flow.get(\"TRGnumber\");\n\nxvalue = Number.isInteger(xvalue)? xvalue: parseInt(xvalue);\n\n//  SET by default\nvar trig = {\n       \"payload\": {\n          \"dps\":triggerDP.toString(),   // String required\n          \"set\": xvalue                 // Integer required\n          }\n}\n\nreturn trig ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            []
        ],
        "info": "Make the low level command for tuya_bridge devices"
    },
    {
        "id": "da4079ee99ffcd9d",
        "type": "function",
        "z": "66ca1554.e4c85c",
        "name": "late binding",
        "func": "\nfunction _upadateParam(_pname){\n     var  _xvalue = env.get(_pname);\n     if (_xvalue){\n        let temp = _xvalue.toString().trim();\n        if (temp.startsWith('global.'))\n           _xvalue = global.get(temp.substring(7));\n        else if(temp.startsWith('flow.'))\n           _xvalue = flow.get(\"$parent.\"+ temp.substring(5));\n        else if(temp.startsWith('msg.'))\n           _xvalue = msg[temp.substring(4)];\n// extra eval           \n        else if(temp.startsWith('@'))\n           _xvalue = eval(temp.substring(1));\n      }\n      \n// optional: to set the parameter dynamically with a message property, same name\n      if(msg[_pname])\n           _xvalue = msg[_pname];\n           \n// save actual value in the (sub)flow context           \n      flow.set(_pname, _xvalue);\n      }\n      \n// CUSTOMIZE HERE\n// get actual values\n _upadateParam(\"TRGnumber\");\n // done\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "f0932848.b39158"
            ]
        ],
        "info": "See [Subflows and configuration: late and runtime parameters binding](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042)\n\nModified:\n- added evalued binding: @&lt;expression>  => eval(&lt;expression>). e.g. `@7000 + 70*2` \n- runtime override: uses `msg.TRGnumber`"
    },
    {
        "id": "6c6aa7eeeadfcbcc",
        "type": "link in",
        "z": "9926dce981094007",
        "name": "logging",
        "links": [
            "171633cbd8d5eb7c",
            "889a37728c02fec3",
            "94d22518d381a7d2",
            "ab4f19b1770e5b5b",
            "d87a65f45d5ec19a",
            "ec6bc4a92ee83d18",
            "dca16029d21c7459",
            "f13597ce36035ee2",
            "f81aafbe0a2b5a31",
            "05fea1027e2695a8",
            "a53af0d5e5df6d7f",
            "f6ac765bbb80fb29",
            "25805a5e251b72e3",
            "caae4605bf6a9215",
            "16841912dc8eb04c",
            "6eb69fb682542266",
            "459b0928e6276c4d",
            "058d38826a56a6cc"
        ],
        "x": 230,
        "y": 1660,
        "wires": [
            [
                "0b580db2485c4794"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": true,
        "info": "Main entry point for tuyaDEAMON events/responses.\n\nGeneral format (from tuya-smart-device node, modified):\n````\nmsg.payload:{     \n        \"remote_from\": undefined|remoteName,      // only from remote instance, see global.remotemap\n        \"deviceId\":    gatewayID|deviceid,          // from virtual devices => \"deviceId\": gatewayId\n        \"deviceName\":  name,                     // from tuya-smart-device node, optional - not used\n        \"data\": {\n            \"t\": Math.floor( Date.now() / 1000 );       // timestamp (sec), from tuya node, optional \n            \"cid\": deviceid;                                 // only from virtual devices, mandatory\n            \"dps\":{\n                \"[dp]\": value                               // encoded, more than one dp in some cases\n                ....\n            }}}}\n````\nwarning: from virtual devices, the `msg.payload.deviceId`is the `gatewayID`, in this case tuyaDAEMON uses the `cid` as `deviceId```. To access `alldevices` use always the method `context.global.alldevices.getODev(msg.payload.deviceId)`;\n\nSince 2.2.2: New format (see [ISSUE#4](https://github.com/msillano/tuyaDAEMON/issues/4)): [event:data]: `{\"online\":[\"a4c138******\",\"a4c1383********\",\"a4c138f******\",\"804b50*******\"],\"offline\":[]}`\n\nFake/custom devices uses a reduced structure:\n````\nmsg.payload:{     \n        \"remote_from\": undefined|SVxx             // only from remote instance, see global.remotemap\n        \"deviceId\":    dev-name|deviceid,        \n        \"data\": {\n            \"dps\":{\n                \"[dp-name|dp]\": value                   // one or many dp, native value can be encoded \n                ....\n            }}}}\n````\n\nCORE processing:\n - fires related 'share' if defined in core.global.alldevices\n - fires actions if user defined in 'mirror' flows.\n\nCORE logging:\n - updates the|many `global.tuyastatus[dev-name][dp-name] = value-decoded`\n - trace on node-red debug.pad\n - send one|many MQTT messages to broker\n - add one|many records to DB\n - send back a HTTP response if started by a REST command.\n\nnote\n - if 't' value is missed, it is addeded by CORE.\n - \"deviceName\" is the `tuya-smart-device` node name, used only locally in the flow, not used by tuyaDAEMON.\n \n"
    },
    {
        "id": "db508a29ec3eecdf",
        "type": "function",
        "z": "9926dce981094007",
        "name": "format  command",
        "func": "\n\n// true if device is a real device (virtual == cid exists)\nfunction _isreal(odev) {\n    return (odev.cid === undefined);\n}\n\n// returns deviceId (real) or cid (virtual), never fails\nfunction _getID(odev) {\n    return (odev.cid === undefined ? odev.id : odev.cid);\n}\n\n// true if is a GET command  (GET == msg.payload.value not exists)\nfunction _isget(mx) {\n    return (mx.payload.value === undefined);\n}\n\n// true if is a SET command  (SET == msg.value  exists)\nfunction _isset(mx) {\n    return ((mx.payload.property) && (mx.payload.value !== undefined));\n}\n\n\n// returns now(), formatted for mySQL, never fails\nfunction _mySQLdatetime() {\n    //datetime format for mySQL: '2020-12-18 20:45:02'\n    // using 'sv' for date format (but local timezone)\n    return (new Date().toLocaleString('sv'));\n}\n\n// For DB output, object/string\nfunction formatData(data) {\n    if (data == null)\n        return 'NULL';\n    var clean = JSON.stringify(data);\n    if (clean[0] === '\"')\n        clean = clean.substring(1).slice(0, -1);\n    //    return clean.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n    //    return clean.replace(/'/g, '\\\\x27');\n    return clean.replace(/'/g, \"\\\\'\");\n}\n\n// For DB output, string\nfunction formatName(data) {\n    if (data == null)\n        return 'NULL';\n    //    return data.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n    //    return data.replace(/'/g, '\\\\x27');\n    return data.toString().replace(/'/g, \"\\\\'\");\n}\n\nfunction _getHome() {\n    return global.get(\"instance_name\");\n}\n\n// ==============================  main function\n\nvar req = {};\nvar warn = null;\nvar query = {};\n//\n//---------------------- some assert. just in case...\n\nif ((!msg.payload)) {\n    node.warn([\"ASSERT fail: msg.payload must exist.\", msg]);\n    return [null];\n}\n\nif ((msg.payload.property) && (typeof (msg.payload.property) !== \"string\")) {\n    node.warn([\"ASSERT fail: msg.payload.property, if it exists, must be a string.\", msg]);\n    return [null];\n}\n\n// no remote, local\nif (msg.payload.remote && (msg.payload.remote === _getHome())) {\n    delete msg.payload.remote;\n}\n\n// extra, local list, using REST ??\nif ((!msg.payload.remote) && (!msg.payload.device) && (!msg.payload.property) && (!msg.payload.value)) {\n    msg.payload.remote = _getHome();\n}\n\n\nif ((!msg.payload.remote) && (!msg.payload.device)) {\n    node.warn([\"ASSERT fail: msg.payload.device must exist in local.\", msg]);\n    return [null];\n}\n\nif ((msg.payload.remote) && (!global.get('modules.core_system'))) {\n    node.warn([\"ASSERT fail: 'remote' requires the 'system' module installed.\", msg]);\n    return [null];\n}\n// ---------------- expand messages for remote\n\nif (msg.payload.remote) {\n    let dx = msg.payload;\n    msg.payload = {};\n    msg.payload.value = dx;\n    msg.payload.device = \"_system\";\n    msg.payload.property = \"_proxy\";\n}\n\n// -----------------------  struff: msg normalization\nvar o = context.global.alldevices.getODev(msg.payload.device);\nvar p = context.global.alldevices.getODps(o, msg.payload.property);\nmsg = context.global.alldevices.normalize(msg, o, p);\nif (msg.error) {\n    node.warn(\"[Std Cmds] \" + msg.error);\n    return ([null]);\n}\nif (msg.warning) {\n    node.warn(\"[Std Cmds] \" + msg.warning);\n    delete msg.warning;\n}\n\n// after normalization:\n//    payload.device:  name | CID | deviceID | err\n//    payload.property: name | dpID | msg.payload.property + warn\n//    infodp: schema | dpID | msg.payload.property\n//    to:     CID | deviceID\n//    toDEV:  gatewayID | deviceID\n//    hide:   exists\n\n//  node.warn([\"[Format Command] std cmd normalized \",msg, o, p]) ;\n\n// -------------- encoding data on place (so also fake can use encode functions)\nvar uVal = null;\n// node.warn(\" data type is \"+typeof(msg.payload.value));\nif (msg.payload.value) {\n    uVal = msg.payload.value;     // for DB\n    // multiple value MUST be encoded, fake can be an object not JSON\n    if ((req.infodp !== \"multiple\") && (!(context.global.alldevices.fake.includes(o) && (typeof (msg.payload.value) === 'object')))) {\n        msg.payload.value = context.global.alldevices.encodeValue(msg.payload.value, p);\n        if (msg.payload.value && msg.payload.value.error) {\n            node.warn(msg.payload.value.error);\n            return [null];\n        }\n    }\n}\n\nvar myId = _getHome();\n// ------------   test: device connected ?\nvar cnx = context.global.alldevices.getConnectName(o);\nvar dnx = context.global.alldevices.getDevName(o);\n\nif (cnx !== undefined) {\n    //  property in PSEUDODP: can be used on disconnected devices  \n    if ((msg.payload.property !== undefined) && (msg.infodp) && !context.global.PSEUDODP.includes(msg.infodp.toUpperCase())) {\n        var tuyastatus = global.get(\"tuyastatus\")\n        if ((tuyastatus[cnx]) && (tuyastatus[cnx][\"_connected\"] === false)) {\n            node.warn(\"WARNING: Operation not performed: '\" + cnx + \"' is not connected.\");\n            return ([null]);\n        }\n    }\n} else {\n    node.warn(\"ERROR: add to 'alldevices' the gateway '\" + o.gateway + \"' (used by '\" + dnx + \"')\");\n    return [null];\n}\n// ----  update structures\nreq[\"payload\"] = {};\nreq[\"to\"] = msg.to;\nreq[\"infodp\"] = msg.infodp;\nquery[\"to\"] = msg.to;\nquery[\"infodp\"] = msg.infodp;\n// from 2.2.0\nquery[\"hide\"] = msg.hide;\n\n// -------------- set default device capabilities\nvar cap;\nif (typeof o.capability !== 'undefined')\n    cap = Array.from(o.capability);\nif ((cap === undefined) || (cap.length < 1))\n    cap = [\"ALL\"]; // the default is ALL\n\nif (p == undefined) {  // to process unknown\n    p = {\n        dp: msg.infondp,\n    };\n}\n\nvar capp = \"RW\";      // default\nif (typeof (p.capability) === \"string\")\n    capp = p.capability;\n//    \nvar skipmsg = {\n    \"from\": msg.toDev || msg.to,\n    \"payload\": {\n        \"deviceId\": msg.toDev || msg.to,\n        \"data\": {\n            \"t\": Math.floor(Date.now() / 1000),\n            \"dps\": {\n                [p.dp]: msg.payload.value\n            }\n        }\n    }\n};\n\n// =============================== SKIP dp:  no capabilities, no trace, separate output\nif (capp === \"SKIP\") {\n//    node.warn([\"trace: SKIP\", p, msg]);\n    if (msg.payload.value === undefined) {\n        node.warn([\"ERROR[Std Cmds]: GET of the 'SKIP' properties is not allowed.\", msg]);\n        return [null];\n    }\n\n    // uses  response skipmsg\n    // virtual    \n    if (o.cid !== undefined)\n        skipmsg.payload.data.cid = o.cid;\n    return [null, null, null, null, skipmsg];\n}\n\n//====================== fake devices: test device capabilities, warn message and DB update only, separate output\nif (context.global.alldevices.fake.includes(o)) {\n    query.topic = \" INSERT INTO `messages` (`timestamp`, `daemon`, `action`, `device-id`, `device-name`, `dps`, `dp-name`, `data`, `value`) \";\n    query.topic += \" VALUES ('\" + _mySQLdatetime() + \"', '\" + myId + \"' ,'TX', '\" + _getID(o) + \"', '\" + formatName(msg.payload.device) + \"','\" + msg.infodp + \"', '\" + formatName(msg.payload.property) + \"', \" + (_isset(msg) ? \"'\" + formatData(msg.payload.value) + \"'\" : \"NULL\") + \", \" + (_isset(msg) ? \"'\" + formatData(uVal) + \"'\" : \"NULL\") + \" );\";\n    // the warning message\n    warn = {\n        payload: null,\n        to: msg.to,\n        infodp: msg.infodp,\n        hide: msg.hide\n    };\n    // special process for remote commands (_system/_proxy):\n    if ((msg.to === \"_system\") && (msg.infodp === \"_proxy\") && (msg.payload.value) && (msg.payload.value.device == undefined)) {  // is LIST\n        warn.payload = msg.payload.value.remote + \": TX: GET device LIST\";\n        warn.infodp = \"LIST\";       // dummy, to not do error\n        node.send([null, null, warn, null]);\n    } else\n        if ((msg.to === \"_system\") && (msg.infodp === \"_proxy\") && (msg.payload.value)) {  // no LIST\n            //  normalize remote msg\n            let ro = context.global.alldevices.getODev(msg.payload.value.device);\n            let rp = context.global.alldevices.getODps(ro, msg.payload.value.property);\n            let rmsg = context.global.alldevices.normalize({ payload: msg.payload.value }, ro, rp);\n            if (rmsg.error) {\n                node.warn(rmsg.error);\n                return ([null]);\n            }\n            if (rmsg.warning) {\n                node.warn(rmsg.warning);\n                delete rmsg.warning;\n            }\n\n            warn.to = rmsg.to;\n            warn.infodp = rmsg.infodp;\n\n\n            // ----------------- info for remote\n            if (_isset(rmsg)) {\n                if (rmsg.infodp && (rmsg.infodp.toUpperCase() === \"MULTIPLE\")) {\n                    //           warn.payload = [msg.payload.value.remote+\": TX: SET MULTIPLE \" + rmsg.payload.device + \"/\" + rmsg.payload.property, rmsg.payload.value];\n                    node.warn([\"ERROR: remote MULTIPLE commands not allowed.\", msg]);\n                    return [null];\n                } else {  // is SET\n                    warn.payload = [msg.payload.value.remote + \": TX: SET \" + rmsg.payload.device + \"/\" + rmsg.payload.property, rmsg.payload.value];\n                }\n            } else {\n                if (rmsg.infodp && (rmsg.infodp.toUpperCase() === \"SCHEMA\")) { // is get schema\n                    warn.payload = [msg.payload.value.remote + \": TX: GET SCHEMA \" + rmsg.payload.device, msg];\n                } else { // is GET\n                    warn.payload = msg.payload.value.remote + \": TX: GET \" + rmsg.payload.device + \"/\" + rmsg.payload.property;\n                }\n            }\n\n            node.send([null, null, warn, null, null]);\n        } // ends SET _system/proxy\n\n    // continue,  is local\n    if (_isset(msg)) {\n        if (msg.infodp.toUpperCase() === \"MULTIPLE\") {\n            if (!(cap.includes(\"MULTIPLE\") || cap.includes(\"ALL\"))) {\n                node.warn(\"ERROR: MULTIPLE commands not allowed by the fake '\" + msg.payload.device + \"'\");\n                skipmsg.payload.data.dps[p.dp] = \"ERROR: MULTIPLE not allowed by device\"\n                return [null, null, null, null, skipmsg];\n            }\n            warn.payload = [\"TX: SET MULTIPLE: fake \" + msg.payload.device, msg.payload.value];\n        } else {\n            if (!(cap.includes(\"SET\") || cap.includes(\"ALL\"))) {\n                node.warn(\"ERROR: SET commands not allowed by the fake '\" + msg.payload.device + \"'\");\n                skipmsg.payload.data.dps[p.dp] = \"ERROR: SET not allowed by device\"\n                return [null, null, null, null, skipmsg];\n            }\n            if (![\"RW\", \"WO\", \"WW\"].includes(capp)) {\n                node.warn([\"ERROR: SET commands not allowed by '\" + msg.payload.property + \"'\", msg]);\n                skipmsg.payload.data.dps[p.dp] = \"ERROR: SET not allowed by this DP\"\n                return [null, null, null, null, skipmsg];\n            }\n            warn.payload = [\"TX: SET fake \" + msg.payload.device + \"/\" + msg.payload.property, msg.payload.value];\n        }\n    } else { // a GET\n        if (msg.infodp.toUpperCase() === \"SCHEMA\") { // is get schema\n            if (!(cap.includes(\"SCHEMA\") || cap.includes(\"ALL\"))) {\n                node.warn(\"ERROR: SCHEMA command not allowed by the fake '\" + msg.payload.device + \"'\");\n                skipmsg.payload.data.dps[p.dp] = \"ERROR: SCHEMA not allowed by device\"\n                return [null, null, null, null, skipmsg];\n            }\n            warn.payload = \"TX: GET SCHEMA: fake \" + msg.payload.device;\n        } else {\n            if (!(cap.includes(\"GET\") || cap.includes(\"ALL\"))) {\n                node.warn(\"ERROR: GET commands not allowed by the fake '\" + msg.payload.device + \"'\");\n                skipmsg.payload.data.dps[p.dp] = \"ERROR: GET not allowed by device\"\n                return [null, null, null, null, skipmsg];\n            }\n            if (![\"RW\", \"RO\", \"GW\", \"WW\"].includes(capp)) {\n                node.warn([\"ERROR: GET commands not allowed by '\" + msg.payload.property + \"'\", msg]);\n                skipmsg.payload.data.dps[p.dp] = \"ERROR: GET not allowed by this DP\"\n                return [null, null, null, null, skipmsg];\n            }\n\n            warn.payload = \"TX: GET fake \" + msg.payload.device + \"/\" + msg.payload.property;\n        }\n\n    } // ends GET\n\n    // node.warn([\"FAKE\",msg,warn, query]);\n    // outputs: tuya/fake/info/db/skip\n    return [null, msg, warn, query, null];\n} //--------------------------- end fake\n\n//====================================== general request\n\nreq[\"toDev\"] = msg.toDev;\nreq.topic = \"msg for \" + msg.payload.device;\n\nif (cap.includes(\"NONE\")) {\n    node.warn(\"ERROR: GET/SET operations not allowed '\" + msg.payload.device + \"' is not accessible by user.\");\n    return [null];\n}\n\n// TEST for REFRESH\nif ((req.infodp === \"_refresh\") || (req.infodp === \"_fastRate\")) {  // pseudoDP for REFRESH\n    if (!(cap.includes(\"REFRESH\") || cap.includes(\"ALL\"))) {\n        node.warn(\"ERROR: REFRESH not allowed by the '\" + msg.payload.device + \"'\");\n        return [null];\n    }\n}\n// ----------------------- SCHEMA + GET\nif (_isget(msg)) {\n    req.payload.operation = \"GET\";\n    if (msg.infodp.toUpperCase() === \"SCHEMA\") // is get schema\n        if (cap.includes(\"SCHEMA\") || cap.includes(\"ALL\")) {\n            req.payload.schema = true;\n            query.topic = \" INSERT INTO `messages` (`timestamp`, `daemon`, `action`, `device-id`, `device-name`, `dps`, `dp-name` )\";\n            query.topic += \" VALUES ('\" + _mySQLdatetime() + \"','\" + myId + \"', 'TX', '\" + msg.to + \"', '\" + formatName(o.name || o.id) + \"','SCHEMA','SCHEMA') ;\";\n            query[\"payload\"] = {\n                deviceId: msg.to\n            };\n            return ([req, null, {\n                payload: \"TX: SCHEMA from \" + msg.payload.device,\n                to: msg.to,\n                infodp: msg.infodp,\n                hide: msg.hide\n            }, query, null]);\n        } else {\n            node.warn(\"ERROR: SCHEMA command not allowed by the '\" + msg.payload.device + \"'\");\n            return [null, null, null, null, null];\n        } // SCHEMA ends\n    //\n    if (!(cap.includes(\"GET\") || cap.includes(\"ALL\"))) {\n        node.warn(\"ERROR: GET commands not allowed by the '\" + msg.payload.device + \"'\");\n        return [null, null, null, null, null];\n    }\n    req.payload.dps = msg.infodp;\n} // ----------------- GET ready\n\nif (_isset(msg)) {   //-------------------- MULTIPLE + SET\n    if (msg.infodp.toUpperCase() === \"MULTIPLE\")\n        if (cap.includes(\"MULTIPLE\") || cap.includes(\"ALL\")) {\n            req.payload.multiple = true;\n            try {\n                if (typeof (msg.payload.value) === 'string')\n                    req.payload.data = JSON.parse(msg.payload.value);\n                else\n                    req.payload.data = msg.payload.value;\n            } catch (error) {\n                node.warn(\"ERROR: MULTIPLE bad value (\" + msg.payload.device + \") \" + error);\n            }\n            //\n            query.topic = \" INSERT INTO `messages` (`timestamp`, `daemon`, `action`,`device-id`, `device-name`, `dps`, `dp-name`, `data`)\";\n            query.topic += \" VALUES ('\" + _mySQLdatetime() + \"', '\" + myId + \"', 'TX', '\" + _getID(o) + \"', '\" + formatName(msg.payload.device) + \"','MULTIPLE','MULTIPLE', '\" + formatData(msg.payload.value) + \"') ;\";\n            query[\"payload\"] = {\n                deviceId: msg.to\n            };\n            return ([req, null, {\n                payload: [\"TX MULTIPLE: to '\" + msg.payload.device + \"': \", msg.payload.value],\n                to: req.to,\n                infodp: req.infodp,\n                hide: msg.hide\n            }, query]);\n        } else {\n            node.warn(\"ERROR: MULTIPLE SET not allowed by the '\" + msg.payload.device + \"'\");\n            return [null, null, null, null];\n        } // ------ MULTIPLE ends\n    //\n    if (!(cap.includes(\"SET\") || cap.includes(\"ALL\"))) {\n        node.warn(\"ERROR: SET commands not allowed by the '\" + msg.payload.device + \"'\");\n        return [null, null, null, null];\n    }\n\n    req.payload.dps = msg.infodp.toString(); // dps always string: \"101\" or \"_connected\"\n    req.payload.set = msg.payload.value;\n}  //  --------------------  SET ends\n\n//\nswitch (capp) {\n    //  \"RW,WW,GW,RO,WO,TRG,PUSH,SKIP,UNK,NULL\",\n    case \"UNK\":\n    case \"RW\":  // ok, nothing to do\n        break;\n    case \"PUSH\":\n        node.warn(\"ERROR: Can not SET/GET the 'PUSH' DP '\" + msg.payload.device + '\".\"' + msg.payload.property + \"'\");\n        return [null, null, null, null];\n    case \"RO\":\n        if (_isset(msg)) {\n            node.warn(\"ERROR: Can not SET the Read Only DP '\" + msg.payload.device + '\".\"' + msg.payload.property + \"'\");\n            return [null, null, null, null];\n        }\n        break;\n    case \"WO\":\n        if (_isget(msg)) {\n            node.warn(\"ERROR: Can not GET the 'WO' DP '\" + msg.payload.device + '\".\"' + msg.payload.property + \"'\");\n            return [null, null, null, null];\n        }\n        if (msg.payload.value === null) {\n            node.warn(\"ERROR: Can not use 'SET:null' for 'WO' DP '\" + msg.payload.device + '\".\"' + msg.payload.property + \"'\");\n            return [null, null, null, null];\n        }\n        break;\n    case \"GW\":\n        if (_isset(msg)) {\n            node.warn(\"ERROR: Can not SET the 'GW' DP '\" + msg.payload.device + '\".\"' + msg.payload.property + \"'\");\n            return [null, null, null, null];\n        }\n        // transforms GET in SET:null\n        delete req.payload.operation;\n        req.payload.set = null;\n        break;\n    case \"WW\":\n        if (_isget(msg)) {\n            // transforms GET in SET:null\n            delete req.payload.operation;\n            req.payload.set = null;\n        }\n        break;\n    case \"TRG\":\n        node.warn(\"ERROR: '\" + msg.payload.device + '\".\"' + msg.payload.property + \"' has 'TRG' capability\");\n        return [null, null, null, null];\n    case \"SKIP\":\n        return [null, null, null, null];\n    default:\n        node.warn(\"ERROR: unknown capability for '\" + msg.payload.device + '\".\"' + msg.payload.property);\n        return [null, null, null, null];\n}\n\n// outputs: tuya/fake/info/db/logging\n// builds the DB  log\nquery.topic = \" INSERT INTO `messages` (`timestamp`, `daemon`, `action`, `device-id`, `device-name`, `dps`, `dp-name`, `data`, `value`) \";\nquery.topic += \" VALUES ('\" + _mySQLdatetime() + \"','\" + myId + \"', 'TX', '\" + _getID(o) + \"', '\" + formatName(msg.payload.device) + \"','\" + req.payload.dps + \"', '\" + formatName(msg.payload.property) + \"', \" + (_isset(msg) ? \"'\" + formatData(req.payload.set) + \"'\" : \"NULL\") + \", \" + (_isset(msg) ? \"'\" + formatData(uVal) + \"'\" : \"NULL\") + \" );\";\n\n// the warning message\nif (_isset(msg))\n    warn = {\n        payload: [\"TX SET: device \" + msg.payload.device + \"/\" + msg.payload.property, msg.payload.value],\n        to: msg.to,\n        infodp: msg.infodp,\n        hide: msg.hide\n    };\nelse\n    warn = {\n        payload: \"TX GET: device \" + msg.payload.device + \"/\" + msg.payload.property,\n        to: msg.to,\n        infodp: msg.infodp,\n        hide: msg.hide\n    };\n\nreturn ([req, null, warn, query]);\n",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1480,
        "wires": [
            [
                "1c9acf743422023d"
            ],
            [
                "d59d2925c7949a60"
            ],
            [
                "8b78950f658c6e23"
            ],
            [
                "f0e5e8beb335d0b4"
            ],
            [
                "0b580db2485c4794"
            ]
        ],
        "outputLabels": [
            "tuya",
            "fake",
            "info",
            "DB",
            "skip"
        ],
        "info": "Standard commands process\n\nsee 'std_cmds' node."
    },
    {
        "id": "d87a65f45d5ec19a",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "to logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 1895,
        "y": 740,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "3c5b3f3fdf018e85",
        "type": "link in",
        "z": "9926dce981094007",
        "name": "std_cmds",
        "links": [
            "c29e36c9b43982f7",
            "e7c4ba9b7d51601d",
            "635758cf7f407cd5",
            "a838f77b.9166c8",
            "f302b04b.6478b",
            "02f14df9c251c497",
            "fbec3d25562e3e2a",
            "b628aa72daf235de",
            "c7992347510c57a8",
            "0263e3a5d46d04db",
            "85335530918380f6",
            "71ce8f74737eb46f",
            "063ac16c1ab07a21",
            "e59aa8c315e74462",
            "17074ca7131094fa",
            "4c3dd357f773ca66",
            "7c949bb.9267764",
            "bebaf198ba0a1cd2",
            "37510f83c59a7f38",
            "fa316c8dab06aab8",
            "76b2fa834194d529",
            "371255b9d130b435",
            "6025e92fa68b2116",
            "7db9919153152908",
            "ba11857305a8d634",
            "05c4ecdb8cd3555d",
            "f68d45a8191ae7d5",
            "b79d9669ece59f4b",
            "8c81b10d20901314",
            "f0044790d1c69a60",
            "507563bc4ec6b05e",
            "e289f817134b4534",
            "eed7f0b65623065c",
            "f294d70eec07e15c",
            "b09f1a6d13a701de",
            "2d4391ebe4ad6677",
            "270b7038e90bdcd9",
            "35fa5039f6513aa4",
            "9cf6b17884bfaaac",
            "8683d16c4601dfe9",
            "a250d073160f1f93",
            "8e3ff028175fc9c8",
            "46205f1e12b0e731"
        ],
        "x": 240,
        "y": 1480,
        "wires": [
            [
                "db508a29ec3eecdf"
            ]
        ],
        "l": true,
        "info": "Main entry point for tuyaDEAMON commands:\n\nFor a great incapsulation, external application can use only `usr-device-name`, `usr-property-name` and `usr-decoded-data`, as defined by [global.alldevices.](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices) \n\n- user-name can change in any moment, so TuyaDAEMON, extensions, fake devices must use the deviceID, dp, and encoded data.\n\n- see also [commands](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-as-event-processor#commands).\n\n`msg.payload` for **SET** command (to set a device status or to trigger an action, in this case value MUST exist but it is discarted)\n````\n{  \"remote\"  : undefined|`SVRxxx`,        //  remote tuyaDEAMON ID, optional: see global.remotemap. \n   \"device\"  : `dev-usr`|`cid`|`id`,      //  device-name.\n   \"property\": `dp-usr`|`pseudoDP`|`dp`,  //  propery-name \n   \"value\"   : `any`|`accepted_value` }   //  uncoded value (see alldevice: 'type' and 'typefiel')\n````\n\n`msg.payload` for **GET** command (to get a value asking the device or using last from **global.tuyastatus** ):\n````\n{  \"remote\"  : undefined|`SVRxxx`,        //  remote tuyaDEAMON ID, optional: see global.remotemap. \n   \"device\"  : `dev-usr`|`cid`|`id`,      //  device-name.\n   \"property\": `dp-usr`|`pseudoDP`|`dp`}  //  propery-name \n````\n\n`msg.payload` for **GET schema** command (send to device or get value from **global.tuyastatus** ):\n````\n{  \"remote\"  : undefined|`SVRxxx`,    //  remote tuyaDEAMON ID, optional: see global.remotemap. \n   \"device\"  : `dev-usr`|`cid`|`id` } //  device-name.\n````\n\n`msg.payload` for **device LIST** from a remote tuyaDAEMON instance:\n````\n{  \"remote\"  : `SVRxxx`,              //  remote tuyaDEAMON ID: see global.remotemap. \n````\n\n`msg.payload` for **SET multiple** command (_deprecated because uses dps index and coded data_):\n````\n{  \"remote\"  : undefined|`SVRxxx`,       //  remote tuyaDEAMON ID, optional: see global.remotemap. \n   \"device\"  : `dev-usr`|`cid`|`id`,     //  device-name.\n   \"property\": `MULTIPLE`,               //  pseudoOP\n   \"value\"   : {dp1:val1, dp2:val2...}}  //  coded values \n````\n\n\n**Commands handling**\nOthers CORE INPUT nodes: \n   -  'fast_cmds'    (no logTX, std msg), \n   -  'fake_cmds_IN' (no logTX, normalized msg),\n   -  'low_level_in' (no logTX, native device msg + pseudoDP), \n   -  'share_in'     (no logTX, share msg).\n\n\n"
    },
    {
        "id": "e10436e0c3478b84",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "OUT msg process",
        "info": "_tuyaDAEMON process chain for messages coming from all device._\n\nInput: msg from any `smart-tuya-device` node or from 'fake' devices or internally generated.\n\nOuput: \n  - the global.tuyastatus object is updated.\n  - a log of every command and received data is stored in the 'messages' DB table.\n  - info, trace and warning messages are output on the debug pad.\n  \nThe user can control the info and trace messages and select the stored records.\n",
        "x": 250,
        "y": 1540,
        "wires": []
    },
    {
        "id": "9114bc51fbe925c0",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "to triggers.tuya_bridge_IN",
        "mode": "link",
        "links": [
            "c9f43698db6a94fd"
        ],
        "x": 1230,
        "y": 340,
        "wires": [],
        "icon": "node-red/arrow-in.svg",
        "l": true,
        "info": "Special, reserved for tuya-bridge device (if present)"
    },
    {
        "id": "a8dae038a2e868c4",
        "type": "debug",
        "z": "9926dce981094007",
        "d": true,
        "name": "*trace: msg OUT from all devices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 1640,
        "wires": [],
        "info": "CUSTOMIZATION\n\n- Enable to see in the debug pad all msg sended from all devices.\n- Normal use: disabled"
    },
    {
        "id": "2915d560219eaa90",
        "type": "link in",
        "z": "9926dce981094007",
        "name": "low_level_IN",
        "links": [
            "c973b93480df3d1a",
            "4ab7da19b068b4a6"
        ],
        "x": 310,
        "y": 1200,
        "wires": [
            [
                "1c9acf743422023d"
            ]
        ],
        "l": true,
        "info": "Low level entry point, payload is send directly to local `tuya-smart-device` node, no log. \nFor Internal use for test, extensions etc.\n\nIN device messages (commands), Tuay protocol, modified:\n \n SET single,\n ````\n      {\n      \"toDev\":\"60a823fffe****\",     // tuyaDAEMON extrension: deviceID|gatewayID\n      \"payload\": {\n          \"devId\": \"60a453fffe*****\",  // cid, only for virtual devices (string)   \n          \"dps\":\"103\",                                // DP or pseudoDP (string)\n          \"set\":220                                 // BOOLEAN, INT/ENUM, STRING   \n          } }\n````\n SET multiple\n````\n      {\n      \"toDev\":\"60a823fff*****\",    // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n          \"devId\": \"60a453fffe******\",         //cid, only if toDev = gatewayID\n          \"multiple\":true,\n          \"data\": {                 \n             \"103\":220,                                     // dps:value (many)\n             ....\n             } } }\n````\n\n GET single\n````\n      {\n      \"toDev\":\"60a823fff******\",   // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n          \"devId\": \"60a453fffe******\",         //cid, only if toDev = gatewayID\n          \"operation\":\"GET\",\n          \"dps\":\"103\"\n          } }\n````\nGET schema\n````\n      {\n      \"toDev\":\"60a823fff******\",      // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n          \"devId\": \"60a453fffe******\",         //cid, only if toDev = gatewayID\n          \"operation\":\"GET\",\n          \"schema\"=true\n          } }\n````\n-----------------------------------------\nsice 2.2.0:\nnew commands for 'tuya-smart-device' node:\n\n CONNECTION operations (_standby)\n  \n In tuyadDAEMON is implemented as a pseudoDP:  see \"pseudo DPs\" node.\n The pseudoDP are handled as standard native device DPS, but a node acts as adapter before post it to a device.\n Valid for all real devices using tuya-smart-devices node.\n````\n  tuyaDAEMON extrension:  (only SET)\n     {\n      \"toDev\":\"60a823fffe****\",     // tuyaDAEMON extrension: deviceID|gatewayID\n      \"payload\": {\n          \"devId\": \"60a453fffe*****\",   // cid, only for virtual devices (string)   \n          \"dps\":\"_standby\",                                           // pseudoDP    \n          \"set\": true|false|\"ON\"|\"OFF\"                         // BOOLEAN, STRING   \n          } }\n\n    native: [see here](https://github.com/vinodsr/node-red-contrib-tuya-smart-device)\n     {\n     \"toDev\":\"60a823fffe****\",      // tuyaDAEMON extrension: deviceID|gatewayID\n     \"payload\": {\n          \"operation\": \"CONTROL\",       \n          \"action\": \"CONNECT\"                    // or \"DISCONNECT\"|\"RECONNECTS\"\n          }}\n````          \n TIMEOUT operations (_findTimeout & _retyTimeout)   \n \n In tuyadDAEMON implemented as two pseudoDP: _findTimeout & _retyTimeout. See \"pseudo DPs\" node. \n Also used in the implementation of \"dynamic rety\" node.\n Valid for all real devices using tuya-smart-devices node.\n````\n tuyaDAEMON extrension:   (only SET)\n     {\n      \"toDev\":\"60a823fffe****\",     // tuyaDAEMON extrension: deviceID|gatewayID\n      \"payload\": {\n          \"devId\": \"60a453fffe*****\",   // cid, only for virtual devices (string)   \n          \"dps\":\"_findTimeout\"|\"_retyTimeout\",                      // pseudoDP    \n          \"set\": 2000                                            // timeout in ms   \n          } }\n         \n          \n  native: [see here](https://github.com/vinodsr/node-red-contrib-tuya-smart-device)\n      {\n      \"to\":\"60a823fff******\",      // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n         \"operation\": \"CONTROL\",       \n         \"action\": \"SET_RETY_TIMEOUT\"                 // or  \"SET_FIND_TIMEOUT\"\n         \"value\": number                                      // timeout in ms\n          }}\n````\n        \n new operation for tuya devices:\n [see](https://codetheweb.github.io/tuyapi/index.html#tuyadevice)\n \n REFRESH operation _refresh & _refreshCycle \n \n  In tuyadDAEMON implemented as two  pseudoDP: _refresh & _refreshCycle  see \"REFRESH\" subflow. \n   \n  Valid for a few real devices that use the tuya-smart-device node and implement REFRESH.\n note: usable only with devices that have a REFRESH node in the CORE flow and the 'REFRESH' capability in global.alldevices. \n Consider it an optional feature: it can be added at a later time.\n````\n tuyaDAEMON extrension:  (only SET)\n     {\n      \"toDev\":\"60a823fffe****\",      // tuyaDAEMON extrension: deviceID|gatewayID\n      \"payload\": {\n          \"devId\": \"60a453fffe*****\",   // cid, only for virtual devices (string)   \n          \"dps\":\"_refresh\",                        // pseudoDP: immediare command    \n          \"set\": any            // required but not used: the SET acts as trigger  \n          } }\n         \ntuyaDAEMON extrension:  (only SET)\n     {\n      \"toDev\":\"60a823fffe****\",     // tuyaDAEMON extrension: deviceID|gatewayID\n      \"payload\": {\n          \"devId\": \"60a453fffe*****\",   // cid, only for virtual devices (string)   \n          \"dps\":_refreshCycle\",                                       // pseudoDP    \n          \"set\": NUM(rate)| false|\"OFF\"                    // ON (rate in s)| OFF   \n          } }\n         \n\nnative: [see here](https://codetheweb.github.io/tuyapi/index.html#tuyadevice)\n      {\n      \"toDev\":\"60a823fffe****\",     // tuyaDAEMON extrension: deviceID|gatewayID\n      \"payload\": { \n         \"devId\": \"60a453fffe*****\",   // cid, only for virtual devices (string)   \n         \"operation\": \"REFRESH\",           // usually used alone or with one of:\n           \"dps\": undefined|dp,                             //refreshs only a dp\n           \"requestedDPS\":[1,9,6,17,18,19,20],               // refresh a dp set\n           \"schema\":true                                      // refresh all dps\n          }}\n````\n  \n\n"
    },
    {
        "id": "dfb4e93898d1796c",
        "type": "debug",
        "z": "9926dce981094007",
        "name": "tuyaDAEMON.core.info",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 1660,
        "wires": []
    },
    {
        "id": "c924699e20869af2",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "Debug pad trace",
        "info": "COSTOMIZATION:\n\n - Disable unwonted trace nodes.\n \n - Warn/ERROR messages are always sent.\n \n \n \n",
        "x": 1840,
        "y": 1680,
        "wires": []
    },
    {
        "id": "5f0ccd77fd06d3a1",
        "type": "file",
        "z": "9926dce981094007",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 460,
        "y": 320,
        "wires": [
            [
                "e8ed692aaefd882f"
            ]
        ]
    },
    {
        "id": "f361a3050a388a21",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "low_level_OUT",
        "links": [
            "3baeae11.41ef52",
            "5ba61f43.db9b9",
            "52af620f.a7e1cc",
            "fcc442c5.729a3",
            "e11a7cec.3edf2"
        ],
        "x": 820,
        "y": 1660,
        "wires": [],
        "l": true,
        "info": "Low level output, all messages as sended by devices.\n\nThe messages are unprocessed, directly from `tuya-smart-device` node. \n\n_Used by_:  `tuyaTRIGGERS.'event trigger'` node\n\n_See also_: `'to logging'` input link node for the OUT msg structure.\n\nOUT msg structures:\n\nexample: msg (real)\n ````\n        {\n        _msgid: \"12342f3fd.8697fc\"\n        _event: \"node:12343963.a7d846\"\n        payload: object\n           deviceId: \"123455aa196ae5975cy6ii\"\n           deviceName: \"*tuya_bridge\" \n           data: object\n              t: 1609234903  // timestamp, in seconds.\n              dps: object\n                 102: 1020   // array of dp:value\n        }\n```` \n\nexample msg: (virtual)\n````\n        {\n        _msgid: \"12346a44.e81238\"\n        payload: object\n           deviceId: \"123473b1b789b4994cro7p\"\n           deviceName: \"Zigbee Gateway\"\n           data: object\n              cid: \"12348d00856a1c15\"\n              t: 1609235292\n              dps: object\n                 102: 1020   // array of dp:value\n        }             \n````\n"
    },
    {
        "id": "7d2865a891b44284",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "tuyaDAEMON CORE  2.2.2",
        "info": "a) Initial configuration: see `*Global CORE` config node.\n\nd) TO RUN new installed core:\n  The 4 devices are here only as example.\n  DISABLE all devices and related nodes to avoid ERROR messages.\n\nc) EXPECTED OUTPUT\nin sidebar, Debug Messages, Filter Messages: all nodes:\n\n````\n16/4/2023, 20:03:44node: tuyaDAEMON.core.info\nmsg.payload : array[2]\n[ \"RX: core/_DBase\", true ]\n16/4/2023, 20:03:49node: tuyaDAEMON.core.info\nmsg.payload : array[2]\n[ \"RX: core/_heartbeat\", \"20:03:49\" ]\n16/4/2023, 20:04:19node: tuyaDAEMON.core.info\nmsg.payload : array[2]\n[ \"RX: core/_heartbeat\", \"20:04:19\" ]\n````\n\nd) troubleshooting\n\nerror in Global JSON structures:\n````\n6/4/2023, 20:43:49node: *Global CORE config\nmsg : error\n\"SyntaxError: Expected ',' or '}' after property value in JSON at position 93\"\n````\nVery frequent. \nWhen editing JSON data in a 'config' node, always check the code using the **\"format JSON\"** button!\n\n------------------------------------\n2.2.2\n- updated installation istructions\n- added new reponse message (see [ISSUE#4](https://github.com/msillano/tuyaDAEMON/issues/4))\n\n2.2.1: Bug list\n\n- Reduced 'power' options to BAT, AC, UPS\nW\n- Bad use of 'Max time' in REFRESCH parameter, replaced by 'Max_time' (MUST be a js variable name)\n",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "4086b355ee31c159",
        "type": "function",
        "z": "9926dce981094007",
        "name": "all: filter&update ",
        "func": "// this node processes \"_connected\" event:\n\nlet tuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined) return null;\n\n// local functions:\nconst CONN = \"_connected\";\n// access key\nconst oDev = context.global.alldevices.getODev(msg.payload.deviceId, \"real\");\nif (oDev === undefined) return null;\nconst dname = context.global.alldevices.getDevName(oDev);\nconst usrCon = context.global.alldevices.getDpsName(oDev, CONN);\n// testing:\nif (tuyastatus[dname] === undefined) tuyastatus[dname] = {};\nlet xdev = tuyastatus[dname];\nconst oldconnected = xdev[usrCon];\nconst nowconnected = msg.payload.data.dps._connected;\n// node.warn([\"Filter: \", dname, usrCon, oldconnected, nowconnected ]);\nif (nowconnected !== oldconnected) {\n    xdev[usrCon] = nowconnected;\n    global.set(\"tuyastatus\", tuyastatus);\n    return (msg);\n}\nreturn (null);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 340,
        "wires": [
            [
                "ec6bc4a92ee83d18"
            ]
        ],
        "info": "Handles `_connected` messages from real devices \r\n   - filters duplicated msgs\r\n   - updates the `global.tuyastatus`\r\n   - sends message to logging. \r\n\r\nThe logging process for the dp `_connected` is special and done by this node: \r\n \r\n  - the 'dp' `_connected` it is NOT required in `global.alldevices`.\r\n  You can add it to some devices if required by some special processing, e.g. 'share'.\r\n"
    },
    {
        "id": "5a71e0bf5007c21e",
        "type": "function",
        "z": "9926dce981094007",
        "name": "Info events filter",
        "func": "// kills unwanted tuyaDEAMON EVENTS messages & MQTT\n\n// some ASSERT, just in case...\nif ((typeof (msg.to) !== \"string\") && (typeof (msg.from) !== \"string\"))\n        node.warn([\"ASSERT fail: in msg the to/from (string) must exist.\", msg]);\nif (typeof (msg.infodp) !== \"string\")\n        node.warn([\"ASSERT fail: in msg the msg.infodp (string) must exist.\", msg]);\n// from 2.2.0\nif (typeof (msg.hide) !== \"string\")\n        node.warn([\"ASSERT fail: in msg the msg.hide (string) must exist.\", msg]);\n\n// ==================== KILL EVENT debug + MQTT:  SYSTEM defined (can be updated)\nswitch (msg.from) {\n        case \"_system\":\n                if (msg.infodp === \"_proxy\") return (null);   //  TRG internal use: REMOTE commands \n                if (msg.infodp === \"_toLogging\") return (null);   //  internal use: REST remote echo\n                if (msg.infodp === \"_zeroTask\") return (null);   //  by definition: fast benchmarks\n                break;\n}\n\n// =================== KILL EVENT debug + MQTT: user defined in alldevices\nif ((!!~msg.hide.indexOf(\"E\")) || (!!~msg.hide.indexOf(\"K\")))\n        return null; // killed\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1720,
        "wires": [
            [
                "dfb4e93898d1796c",
                "19bd7e8a4f4718d0"
            ]
        ],
        "icon": "font-awesome/fa-filter",
        "info": "CUSTOMIZATION:\n\nFilter to reduce info messages on Debug pad.\n\nFiltering action is done usually by the 'hide' device/dp property, under user control.\nSome cases are done by this code, to force default behavior.\n\n- On installation and test:\n  Best don't filter any message.\n- On production:\n  Better to filter not useful events.\n\n_________________________________\n  \nIn the code, filter can be done on: \n       msg.from:            RX info, the deviceId\n       msg.to:              TX info, the deviceId\n       msg.infodp:          the dpId          \n"
    },
    {
        "id": "fbb618a4bd787cde",
        "type": "link in",
        "z": "9926dce981094007",
        "name": "more_devices_IN",
        "links": [
            "3954e84e7c450956"
        ],
        "x": 1640,
        "y": 340,
        "wires": [
            [
                "4086b355ee31c159"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": true,
        "info": "Entry point for real devices not in CORE flow, e.g. tuya-bridge device (if present)\r\n\r\n\r\n A new 'connected' event message (like the output of 'static retry' node):\r\n ````\r\n  object\r\n   { \"payload\":{\r\n      \"deviceId\": <deviceID>,\r\n      \"data\": {\r\n          \"dps\":{\r\n            \"_connected\": true|false\r\n          }}}}\r\n ````"
    },
    {
        "id": "f0e5e8beb335d0b4",
        "type": "function",
        "z": "9926dce981094007",
        "name": "*DB command filter",
        "func": "// CUSTOMIZATION\n\n// to filter and route data to 0..n DB, for logging (TX) or execute sql commands\n// Default using 2 DB:  'local' and 'remote'.\n// 3 outputs: local, no log (for TX and RX events)/ locale + log(for sqlDBlocal)/remote + log(for sqlDBremote)\n\n// Some assert, just in case.....\nif (typeof (msg.to) !== \"string\")\n    node.warn([\"ASSERT fail: in msg the msg.to (string) must exist.\", msg]);\nif (typeof (msg.infodp) !== \"string\")\n    node.warn([\"ASSERT fail: in msg the msg.infodp (string) must exist.\", msg]);\nif (typeof (msg.topic) !== \"string\")\n    node.warn([\"ASSERT fail: in msg the msg.topic (sql string) must exist.\", msg]);\n// from 2.2.0\nif (typeof (msg.hide) !== \"string\")\n    node.warn([\"ASSERT fail: in msg the msg.hide (string) must exist.\", msg]);\n\n// ==================== KILL OR ROUTE DBASE commands: SYSTEM defined \nswitch (msg.to) {\n// extra internal meta-device '_dBase' used by SYSTEM to process SQL user requests    \n    case \"_dbase\":\n        // ==============  HERE select the ROUTE for all SQLdbase commands:\n        // CUSTOMIZE here: new _sqlDBxxx _system properties, new outputs, new database nodes\n        if (msg.infodp === \"_sqlDBlocal\")\n            return [null, msg];          // to local  execute output (2)\n        if (msg.infodp === \"_sqlDBremote\")\n            return [null, null, msg];    // to remote execute output (3)\n        break;\n    case \"_system\":\n        // KILL some log record:                 \n        if (msg.infodp === \"_proxy\") return (null);        //  internal use: REMOTE commands\n        if (msg.infodp === \"_toLogging\") return ([null]);  //  internal: uses REST remote echo\n        if (msg.infodp === \"_zeroTask\") return ([null]);   //  fast benchmarks, killed\n        break;\n}\n\n// ================== KILL OR ROUTE DBASE command record:  user defined in alldevices\nif ((!!~msg.hide.indexOf(\"T\")) || (!!~msg.hide.indexOf(\"K\"))) return null;      // killed\n\n// =================== here optional routing code for standard commands\n\n//  --- default output (1) for all command records, no routing\nreturn [msg];  // defaut: local, no-log",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1840,
        "wires": [
            [
                "a52c684e49bcf90f"
            ],
            [
                "42f3d4c9c57bdd18"
            ],
            [
                "421da91399e0941d"
            ]
        ],
        "outputLabels": [
            " local command",
            " remote command",
            "log to local"
        ],
        "icon": "font-awesome/fa-filter",
        "info": "\nCUSTOMIZATION:\n\n1) To kill all DB record for a device or dp (better to use the \"hide\" property in global.alldevices)\n2) To route commands in more than one DB\n3) To implement new commands to use more than two DB.\n\nnote: this NOT requires _system, but it implements some features\n    required by _system, processing \"_sqlBDxxxx\" commands.\n\n- update the code for any change in  _system \"_sqlBDxxxx\" commands. "
    },
    {
        "id": "ec6bc4a92ee83d18",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "conn events",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc",
            "bd4fcb1929151666"
        ],
        "x": 2170,
        "y": 340,
        "wires": [],
        "icon": "node-red/arrow-in.svg",
        "l": true,
        "info": "TRIGGER internal/external.\n\nFired at any change of devices connection status.\nThis event is logged and fires an update also in some properties of _system"
    },
    {
        "id": "76e28ca8c3d5a4e2",
        "type": "delay",
        "z": "9926dce981094007",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "30",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 900,
        "wires": [
            [
                "7dd86199cd720eb3",
                "94bcced9ebabd77e"
            ]
        ],
        "info": "limit throughput, but allows smooth operations and less connection problems\n\nnote: node not usable for fast rates: internal delay limit about 690/10s"
    },
    {
        "id": "ec723c28a548f69c",
        "type": "status",
        "z": "9926dce981094007",
        "name": "*All DB status",
        "scope": [
            "42f3d4c9c57bdd18",
            "a52c684e49bcf90f",
            "421da91399e0941d"
        ],
        "x": 1230,
        "y": 2000,
        "wires": [
            [
                "31f875d51478d0bd"
            ]
        ],
        "info": "CUSTOMIZATION:\n\nAdd here all DB node used (now 3)\n"
    },
    {
        "id": "9057ed1d0106ebe8",
        "type": "function",
        "z": "9926dce981094007",
        "name": "DB check",
        "func": "// checks DB status\n// version 1.1 (use of _call_library)\n// ===================================== do not change\nconst PDB = \"_DBase\";\n//\nfunction _sendOUT(key, value) {\n    // builds a fake OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_core\",\n            \"data\": {\n                \"dps\": {\n                    [key]: value\n                }\n            }\n        }\n    };\n    return newMsg;\n}\n\n// ---------------- main\n// catch bad\nif (msg.status === undefined) return null;\n//\nif (msg.status.text === undefined) return (null);\n//\nvar olddb = flow.get(PDB);\nvar newdb = ((msg.status.text == \"connected\") || (msg.status.text == \"OK\"));\nif (olddb == newdb) return null;\n//\nflow.set(PDB, newdb);\n//\nif (newdb) {\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"DB connected\"\n    });\n    return (_sendOUT(PDB, true));\n} else {\n    node.status({\n        fill: \"red\",\n        shape: \"ring\",\n        text: \"DB disconnected\"\n    });\n    return (_sendOUT(PDB, false));\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nPDB = \"_DBase\";\n\nnode.status({\n    fill: \"yellow\",\n    shape: \"dot\",\n    text: \"start\"\n});\nflow.set(PDB, \"new\");\n",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 2000,
        "wires": [
            [
                "11fea863e24f2f0b",
                "ab4f19b1770e5b5b"
            ]
        ]
    },
    {
        "id": "11fea863e24f2f0b",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "DB_ALARM",
        "mode": "link",
        "links": [],
        "x": 2010,
        "y": 2000,
        "wires": [],
        "l": true,
        "info": "TRIGGER for user flows (actually not used by tuyaDAEMON).\n\nFired at any DB status change. "
    },
    {
        "id": "f27805636174f08f",
        "type": "http in",
        "z": "9926dce981094007",
        "name": "REST tuyaDAEMON",
        "url": "/tuyaDAEMON",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 1860,
        "wires": [
            [
                "a8feea7f9c012ae1"
            ]
        ]
    },
    {
        "id": "029d30dca35db6f3",
        "type": "change",
        "z": "9926dce981094007",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "application/json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 1940,
        "wires": [
            [
                "94c1199397729857"
            ]
        ]
    },
    {
        "id": "94c1199397729857",
        "type": "http response",
        "z": "9926dce981094007",
        "name": "HTTP response",
        "statusCode": "",
        "headers": {},
        "x": 1240,
        "y": 1940,
        "wires": []
    },
    {
        "id": "a8feea7f9c012ae1",
        "type": "function",
        "z": "9926dce981094007",
        "name": "interface",
        "func": "//  for applications, fast processing, immediate answer.... \n//  Return JSON; data or status.\n//  GET, SCHEMA: solved from tuyastaus, returns data (not stored in log)\n//  SET, MULTIPLE: sended to tuyaDEAMON, returns 'status:sended' (stored in log)\n//-------------------------------- local functions:\n\nvar comm = {};\nvar tuyastatus = global.get(\"tuyastatus\");\nvar myId = global.get(\"instance_name\");\n\n// node.warn([\"REST msg \",msg]) ;\n\nif (msg.payload && !(msg.payload.remote_from))\n    msg.payload.remote_from = \"REST.\" + myId;\nelse    \n    msg.payload.remote_from = myId;\n\ndelete msg.payload.remote;\n\n\n// some messages are resolved here:\n// ----------- is LIST\nif (!msg.payload.device) {     // devices list immediate\n    if (tuyastatus !== undefined)\n        msg.payload[\"list\"] = Object.keys(tuyastatus);\n    //             msg.payload[\"remote_from\"] = myId; \n    let jdat2 = JSON.stringify(msg.payload);\n    msg.payload = jdat2;\n    return ([msg, null]);\n}\n\n// -----------------------  struff: msg normalization\nvar o = context.global.alldevices.getODev(msg.payload.device);\nvar p = context.global.alldevices.getODps(o, msg.payload.property);\nmsg = context.global.alldevices.normalize(msg, o, p);\nif (msg.error) {\n    node.warn([\"[REST] \" + msg.error, msg]);\n    return ([msg, null]);\n}\nif (msg.warning) {\n    node.warn([\"[REST] \" + msg.warning, msg, o, p]);\n}\n\n// node.warn([\"msg normalized \",msg]) ;\n\ncomm.to = msg.to;\ncomm.infodp = msg.infodp;\ncomm['payload'] = msg.payload;\n// msg.payload.value  string or JSON or null\ntry {\n    comm.payload.value = JSON.parse(msg.payload.value);\n} catch (e) {\n    comm.payload.value = (msg.payload.value) ? msg.payload.value : undefined;\n}\n// ----------- is device SCHEMA\nif (msg.infodp === \"schema\") { // ok device field\n    //----- is SCHEMA\n    msg.payload['schema'] = tuyastatus[msg.payload.device];\n    delete (msg.payload.schema._t);\n //   msg.payload[\"remote_from\"] = myId;\n    // stringify         \n    let jdat2 = JSON.stringify(msg.payload);\n    msg.payload = jdat2;\n    return ([msg, null]);\n}\n\n//  node.warn([\"Trace general remote\",msg]);\n\n// general case:  \n// -------- is GET, read data from tuyastatus\nif (msg.payload.value === undefined) {\n    //  msg.payload[\"remote_from\"] = myId; \n    if ((tuyastatus[msg.payload.device]) && (tuyastatus[msg.payload.device][msg.payload.property] !== undefined)) {\n        let connected = tuyastatus[msg.payload.device][\"_connected\"];\n        if (connected)\n            msg.payload['value'] = tuyastatus[msg.payload.device][msg.payload.property];\n        else\n            msg.payload['value'] = \"disconnected\";\n        let jdat2 = JSON.stringify(msg.payload);\n        msg.payload = jdat2;\n        return ([msg, null]);\n    } else {\n        msg.payload['value'] = \"none\";\n        let jdat2 = JSON.stringify(msg.payload);\n        msg.payload = jdat2;\n        return ([msg, null]);\n    }\n} // end GET\n\n//--------- is SET, MULTIPLE, process it\nlet pseudoDP = context.global.PSEUDODP.includes(msg.infodp.toUpperCase());\nif (((p !== undefined) || pseudoDP) && (msg.payload.value !== undefined)) {\n    node.send([null, comm]);  // to do cmd\n    delete msg.payload.value;\n    msg.payload['status'] = \"sent\";\n    let jdat2 = JSON.stringify(msg.payload);\n    msg.payload = jdat2;\n\n    // todo: check infinite loop case  \n    //   return [msg, null, comm];  // to rest, to notify\n    return [msg, null, null];  // to rest, to notify\n} // end SET\n\nreturn [msg, null];\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1860,
        "wires": [
            [
                "029d30dca35db6f3"
            ],
            [
                "e7c4ba9b7d51601d"
            ],
            [
                "30a357f0547a80b7"
            ]
        ]
    },
    {
        "id": "e7c4ba9b7d51601d",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "to std_cmd",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 825,
        "y": 1940,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "5ec36a6f0b2a6764",
        "type": "http in",
        "z": "9926dce981094007",
        "name": "REST tuyaDAEMONdebug",
        "url": "/tuyaDAEMONdebug",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 2000,
        "wires": [
            [
                "582086c9359a7b57"
            ]
        ]
    },
    {
        "id": "582086c9359a7b57",
        "type": "function",
        "z": "9926dce981094007",
        "name": "rest_automata",
        "func": "\n//  for debug, all request sended to devices,\n//  asyncronous, wait device answer or timout (set here and in external trigger node)\n//  Return JSON, data or status.\nvar timeout = 4; // in sec, less than 'REST timeout'  node\nvar restautoma = flow.get('restautoma');\n // test only\n //  node.warn([\"Asycronous request\", msg]);\nswitch (restautoma) {\n   case '_wait':\n      if ((msg.req !== undefined) && (msg.payload !== undefined)) { // HTTP message\n         if (msg.payload.device === undefined) {     // back devices list immediate\n            // immediate answer\n            msg.payload = [];\n            const tuyastatus = global.get(\"tuyastatus\");\n            if (tuyastatus !== undefined)\n               msg.payload = Object.keys(tuyastatus);\n            return ([null, msg]);\n         } else {            // send request, set timeout\n            var comm = {};\n            comm['payload'] = msg.payload;\n            flow.set('restautoma', msg);\n            flow.set('restt', Math.floor(Date.now() / 1000));\n            // msg.payload.value  string or JSON or null\n            try {\n               comm.payload.value = JSON.parse(msg.payload.value);\n            } catch (e) {\n               comm.payload.value = (msg.payload.value) ? msg.payload.value : undefined;\n            }\n            return ([comm, null]);\n         }\n      }\n\n      break;\n   default:\n      //  node.warn(\"in default\");\n      // uses payload.info in info messages\n      if (msg.info !== undefined) {\n         if ((typeof restautoma === 'object') && (restautoma.req !== undefined) && (restautoma.payload.device !== undefined)) {\n            //        node.warn([\"from REST automa default\",restautoma, msg]);\n            if (restautoma.payload.device === msg.info.device) {\n               if ((restautoma.payload.property === undefined) && (restautoma.payload.value === undefined)) {  // is schema, ok\n                  // schema processing from tuyasatus\n                  let tuystatus = global.get(\"tuyastatus\");\n                  let xschema = tuystatus[restautoma.payload.device];\n                  delete (xschema._t);\n                  restautoma.payload = JSON.stringify(xschema);\n                  flow.set('restautoma', '_wait');  // done\n                  return ([null, restautoma]);\n               }\n               if ((restautoma.payload.property == msg.info.property) || (restautoma.payload.property == msg.infodp) || (restautoma.payload.property === 'MULTIPLE')) {\n                  var jdat = JSON.stringify(msg.info);\n                  restautoma.payload = jdat;\n                  flow.set('restautoma', '_wait');\n                  return ([null, restautoma]);\n               }\n            }\n         }\n      }\n\n}\n\n// test timeout, if not wait\n\nif (restautoma !== '_wait') {\n   //  node.warn(\"in timeout\");\n   var start = flow.get('restt');\n   if (((Math.floor(Date.now() / 1000)) - start) > timeout) { // OK exit for timeout\n      flow.set('restautoma', '_wait');\n      if ((typeof restautoma === 'object') && (restautoma.req !== undefined)) {\n         restautoma.payload = { \"status\": \"request aborted for timeout\" };\n         return ([null, restautoma]);\n      }\n   }\n}\n\n//noting to do\nreturn ([null, null]);\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n flow.set ('restautoma', \"_wait\");",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 2000,
        "wires": [
            [
                "e7c4ba9b7d51601d",
                "072970d61de72650"
            ],
            [
                "029d30dca35db6f3"
            ]
        ]
    },
    {
        "id": "072970d61de72650",
        "type": "trigger",
        "z": "9926dce981094007",
        "name": "REST timeout 5s",
        "op1": "test",
        "op2": "test answer timeout",
        "op1type": "str",
        "op2type": "str",
        "duration": "6",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 850,
        "y": 2040,
        "wires": [
            [
                "582086c9359a7b57"
            ]
        ]
    },
    {
        "id": "792b5ea5968f5bc2",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "event OUT",
        "links": [
            "569f38243c980fc2"
        ],
        "x": 985,
        "y": 1660,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "4a420c00bebda285",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "REST HTTP",
        "info": "The **tuyaDAEMOM REST** is implemented using two interfaces, for different pourposes:\n\n1) **/tuyaDEAMON:** this is the production interface, always fast.\n             GET: data come from tuyastatus\n             SET: sends command, but do not wait for response (returns 'sent'|error)\n\n2) **/tuyaDEAMONdebug:** this is the development interface, waits the device answer.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-REST\n\nFor examples: see test nodes.",
        "x": 250,
        "y": 1820,
        "wires": []
    },
    {
        "id": "35375a67e730402c",
        "type": "function",
        "z": "9926dce981094007",
        "name": "check and kill messages",
        "func": "// Test msg.\n// if 'hide' contains 'K' destroy (not on tuyastatus +)\n\nfunction getDeviceHide(id) {\n  var oDev = context.global.alldevices.getODev(id);\n  if (!(oDev)) return \"\";\n  var mask = (oDev.hide || \"\");\n  var oDP = context.global.alldevices.getODps(oDev, msg.payload.property);\n  if (!(oDP)) return (mask);\n  mask += (oDP.hide || \"\");\n  return (mask);\n}\n\n//  detects some fatal errors in input message structure, here for convenience\nif (!(msg.payload.deviceId)) {\n  node.warn([\"ASSERT fail: in the answer the payload.deviceId must be defined.\", msg]);\n  return null;\n}\n\nif (!(msg.payload.data)) {\n  node.warn([\"ASSERT fail: in the answer the payload.data is mandatory\", msg]);\n  return null;\n}\n// Add the 'hide' string an Kills devices\nmsg.hide = getDeviceHide(msg.payload.data.cid || msg.payload.deviceId,);\nif (!!~msg.hide.indexOf(\"K\")) return null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n\n",
        "finalize": "\n",
        "libs": [],
        "x": 610,
        "y": 1740,
        "wires": [
            [
                "a8dae038a2e868c4",
                "0da03cd2b9243386"
            ]
        ],
        "info": "CUSTOMIZATION:\n\nTo filter the device responses (no INFO, no record in DB, no share action)\n_________________________________\n  \nSee the example filter:\n \nTest can be done on \n       msg.payload.deviceID:   the deviceId or gatewayId\n       msg.payload.data.cid:   the virtual device cid\n \n "
    },
    {
        "id": "5215501c778ba4ec",
        "type": "catch",
        "z": "9926dce981094007",
        "name": "*catch device and LAN errors",
        "scope": [],
        "uncaught": false,
        "x": 1780,
        "y": 960,
        "wires": [
            []
        ],
        "info": "CUSTOMIZATION:\n\n- Adding a new device\n    Select the new tuya-smart-device node.\n    This intercept the 'default' node-red error processing,"
    },
    {
        "id": "42f3d4c9c57bdd18",
        "type": "mysql",
        "z": "9926dce981094007",
        "d": true,
        "mydb": "19cea4348c0edc67",
        "name": "execute on DB local",
        "x": 1540,
        "y": 1840,
        "wires": [
            [
                "2f049cd00523acf9"
            ]
        ],
        "info": "CUSTOMIZATION:\n\nEdit for DB url and credentials. \nDisable/delete if not used."
    },
    {
        "id": "1f988381d7a2deab",
        "type": "function",
        "z": "9926dce981094007",
        "name": "share actions",
        "func": "// note: warning on 'eval()' are ok.\n\nif (msg.share === undefined) {\n    //   node.warn([\"ERROR in 'share' object for '\" + (msg.info?(msg.info.device + \"/\" + msg.info.property):\"standalone share\") + \"'\", msg]);\n    return (null);\n}\n\n\nfunction recursiveExecute(obj) {\n    for (const property in obj) {\n        //       node.warn([\"testing: \"+property,obj[property]]);\n        if ((typeof (obj[property]) === 'string') && (obj[property].startsWith('@'))) {\n            //           node.warn([\"processing: \", obj[property]]);\n            obj[property] = eval(obj[property].substring(1));\n        } else if (typeof (obj[property]) === 'object') {\n            recursiveExecute(obj[property]);\n        }\n    }\n}\n\nfunction evalExecute(aVal) {\n    // accepts: strings, JSON, object\n    // output: string or object after eval leaf like '@....'\n    if ((typeof (aVal) === 'string') && (aVal.startsWith('{') || aVal.startsWith('['))) {\n        const data = JSON.parse(aVal);\n        recursiveExecute(data);\n        return data;\n    }\n    if ((typeof (aVal) === 'string') && aVal.startsWith('@')) {\n        return eval(aVal.substring(1));\n    }\n    if (typeof (aVal) === 'object') {\n        recursiveExecute(aVal);\n        return (aVal);\n    }\n    return (aVal);\n}\n\n//    node.warn([\"SHARE input\", msg])   ;\n\nif (Array.isArray(msg.share)) {\n    var arrayLength = msg.share.length;\n    var tuyastatus = global.get(\"tuyastatus\");\n    for (var i = 0; i < arrayLength; i++) {\n        let oktodo = true;\n        if (Array.isArray(msg.share[i][\"test\"])) {\n            try {\n                oktodo = msg.share[i][\"test\"].reduce((ok, cond) => ok && eval(cond), true);\n            } catch (error) {\n                node.warn([\"Error processing 'share[\" + i + \"].test' for '\" + (msg.info ? (msg.info.device + \"/\" + msg.info.property) : \"standalone share\") + \"': \" + error, msg.share[i]]);\n            }\n        }\n\n        if (Array.isArray(msg.share[i][\"action\"])) {\n            if (oktodo) {\n                var actionLength = msg.share[i][\"action\"].length;\n                for (var j = 0; j < actionLength; j++) {\n                    let xshare = msg.share[i][\"action\"][j];\n                    // default from caller values or undefined.  \n                    var _cmd = {\n                        payload: {\n                            device: msg.info ? msg.info.device : undefined,\n                            property: msg.info ? msg.info.property : undefined,\n                            value: msg.info ? msg.info.value : undefined\n                        }\n                    };\n\n                    if (xshare.remote !== undefined) {  // optional\n                        _cmd.payload[\"remote\"] = xshare.remote;\n                    }\n                    // compact\n                    try {\n                        if (xshare.device === null)\n                            _cmd.payload.device = undefined;\n                        else if (typeof (xshare.device) === \"string\") // only string-JSON\n                            _cmd.payload.device = evalExecute(xshare.device);\n                        if (xshare.property === null)\n                            _cmd.payload.property = undefined;\n                        else if (typeof (xshare.property) === \"string\") // only string-JSON\n                            _cmd.payload.property = evalExecute(xshare.property);\n                        if (xshare.value === null)\n                            _cmd.payload.value = undefined;\n                        else if (xshare.value !== undefined)  // string-JSON-object\n                            _cmd.payload.value = evalExecute(xshare.value);\n                        //         node.warn([\"SHARE output action:\", _cmd, xshare])   \n                        node.send(_cmd);\n                    } catch (error) {\n                        let x1 = msg.info ? msg.info.device + \"/\" + msg.info.property : \"standalone share\";\n                        node.warn([\"ERROR processing 'share[\" + i + \"].action [\" + j + \"]' for '\" + x1 + \"': \" + error, msg.share[i]]);\n                    }\n                }\n            }\n\n        } else {\n            node.warn([\"ERROR in 'share[\" + i + \"]' structure for '\" + (msg.info ? (msg.info.device + \"/\" + msg.info.property) : \"standalone share\") + \"' \", msg.share[i]]);\n        }\n    }\n    return (null);\n}\nnode.warn([\"ERROR in 'alldevices.share' structure for '\" + (msg.info ? (msg.info.device + \"/\" + msg.info.property) : \"standalone share\") + \"' \", msg.share]);\nreturn (null);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1600,
        "wires": [
            [
                "1d8abc968418bc4e"
            ]
        ],
        "info": "Processes share structures"
    },
    {
        "id": "1d8abc968418bc4e",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "to fast_cmds",
        "mode": "link",
        "links": [
            "58d95ec5fc3c0d06"
        ],
        "x": 1355,
        "y": 1600,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "d249adf8a6bf5601",
        "type": "function",
        "z": "9926dce981094007",
        "name": "FastFormat",
        "func": "\n\n// true if device is a real device (virtual == cid exists)\nfunction _isVirtual(odev) {\n    return (odev.cid !== undefined);\n}\n\n// true if is a GET command  (GET == msg.payload.value not exists)\nfunction _isget(mx) {\n    return ((mx.payload.property) && (mx.payload.value === undefined));\n}\n\n// true if is a SET command  (SET == msg.value  exists)\nfunction _isset(mx) {\n    return ((mx.payload.property) && (mx.payload.value !== undefined));\n}\n\nfunction _getHome() {\n    return global.get(\"instance_name\");\n}\n\n// ============================  fast output processing\nvar req = {\n    to: null,\n    payload: {}\n}\n\n//  node.warn([\"FAST cmd input\", msg]);\n//---------------------- some assert\nif ((!msg.payload)) {\n    node.warn([\"ASSERT fail: msg.payload must exist.\", msg]);\n    return [null];\n}\nif ((msg.payload.property) && (typeof (msg.payload.property) !== \"string\")) {\n    node.warn([\"ASSERT fail: msg.payload.property, if it exists, must be a string.\", msg]);\n    return [null];\n}\n/*\nif ((msg.payload.remote) && (!global.get('modules._system'))) {\n    node.warn([\"ASSERT fail: 'remote' requires the 'system' module installed.\", msg]);\n    return [null];\n}\n*/\n\nif ((!msg.payload.remote) && (!msg.payload.device)) {\n    node.warn([\"ASSERT fail: msg.payload.device must exist in local.\", msg]);\n    return [null];\n}\n\n// ------------------------ expand messages for remote\n\nif (msg.payload.remote) {\n    let dx = msg.payload;\n    msg.payload = {};\n    msg.payload.value = dx;\n    msg.payload.device = \"_system\";\n    msg.payload.property = \"_proxy\";\n}\n\n// node.warn([\"FAST command\", msg]);\n// ----------------------- stuff: device normalization\nvar devObj = msg.payload.device ? context.global.alldevices.getODev(msg.payload.device.toString().trim()) : undefined;\nvar dpObj = msg.payload.property ? context.global.alldevices.getODps(devObj, msg.payload.property.toString().trim()) : undefined;\nmsg = context.global.alldevices.normalize(msg, devObj, dpObj);\n\n//  node.warn([\"FAST - normalized\", msg]);\nif (msg.error) {\n    node.warn([\"[Fast Cmds] \" + msg.error, msg]);\n    return ([null]);\n}\nif (msg.warning) {\n    node.warn([\"[Fast Cmds] \" + msg.warning, msg]);\n}\n\n// -------------- encoding data on place (so also fake can use encode functions) \nif (req.infodp !== \"multiple\") {   // multiple value MUST be encoded!\n    msg.payload.value = context.global.alldevices.encodeValue(msg.payload.value, dpObj);\n    if (msg.payload.value && msg.payload.value.error) {\n        node.warn(msg.payload.value.error);\n        return [null];\n    }\n}\n\n// 'pseudo' dpObject to process PSEUDODP \nif ((dpObj === undefined) && (context.global.PSEUDODP.includes(msg.infodp.toUpperCase()))) {\n    dpObj = {\n        dp: msg.infodp\n    }\n}\n\n// =============================== prima SKIP\nif ((dpObj) && (dpObj.capability !== undefined) && (dpObj.capability.toUpperCase() === \"SKIP\")) {\n    if (msg.payload.value === undefined) {\n        node.warn([\"ERROR[Fast Cmds]: GET of the 'SKIP' properties is not allowed.\", msg]);\n        return [null];\n    }\n    // produces response\n    var newMsg = {\n        \"from\": msg.toDev || msg.to,\n        \"payload\": {\n            \"deviceId\": msg.toDev || msg.to,\n            \"data\": {\n                \"t\": Math.floor(Date.now() / 1000),\n                \"dps\": {\n                    [dpObj.dp]: msg.payload.value\n                }\n            }\n        }\n    };\n    return [null, null, newMsg];\n}\n//  ============================= then fake\nif (context.global.alldevices.fake.includes(devObj)) {\n    return [null, msg];\n}\n\n// ==============================  building request \n\nreq.topic = \"Fast cmd for \" + msg.payload.device;\n\nreq.to = msg.to;\nreq.toDev = msg.toDev;\nreq.infodp = msg.infodp;\nreq.payload.dps = msg.infodp.toString(); // dps always string: \"101\" or \"_connected\"\n\nif (_isVirtual(devObj)) {\n    req.payload.devId = devObj.cid;\n}\n\n// =======  request data processing encoding\n\nif (req.infodp === \"schema\") {\n    delete req.payload.dps;\n    req.payload.operation = \"GET\";\n    req.payload.schema = true;\n} else\n    if (req.infodp === \"multiple\") {\n        delete req.payload.dps;\n        req.payload.data = msg.payload.value;\n        req.payload.multiple = true;\n    } else\n        if (_isget(msg)) {\n            req.payload.operation = \"GET\";\n            //\n            var capp = (typeof dpObj.capability !== 'undefined') ? dpObj.capability : \"RW\";\n            if ((capp === \"WW\") || (capp === \"GW\")) {\n                delete req.payload.operation;\n                req.payload.set = null;\n            }\n        } else\n            if (_isset(msg)) {\n                req.payload.set = msg.payload.value;\n            }\nreturn [req, null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1280,
        "wires": [
            [
                "1c9acf743422023d"
            ],
            [
                "ee1c4912d9796116",
                "d59d2925c7949a60"
            ],
            [
                "889a37728c02fec3"
            ]
        ],
        "outputLabels": [
            "tuya",
            "fake",
            "skip"
        ],
        "info": "Fast command process\n  see 'fast_cmds' node"
    },
    {
        "id": "58d95ec5fc3c0d06",
        "type": "link in",
        "z": "9926dce981094007",
        "name": "fast_cmds",
        "links": [
            "1af71950.31eac7",
            "2c0e5d31.d02b72",
            "2ed08207.23ffae",
            "4242c140.fdbb2",
            "4b9f1572191a109f",
            "5e693599.3f435c",
            "6db5220c.6c9b0c",
            "739fba48.a46514",
            "8834ba78.eef318",
            "a131d6fe.bff008",
            "a51db0ff.4ca74",
            "ad341350.43d4f",
            "1d8abc968418bc4e",
            "e8f89f67.1aa7f",
            "eea2d98c.558178",
            "5624bd3752571577",
            "ab08cd796da23c3c"
        ],
        "x": 300,
        "y": 1280,
        "wires": [
            [
                "d249adf8a6bf5601"
            ]
        ],
        "l": true,
        "info": "Fast INPUT (internal use)\n\nDifferences from standard INPUT commands:\n \n1.  No command echo on debug pad, no log on DB (like hide=\"CT\")\n\n2.  No test of the device capabilities in `alldevices`: all commands are processed. i.e. _use `fast&lowbar;cmds` with care, only with tested commands._\n3.  Only the following capabilities of a DP, defined in `alldevices`, are processed:\n - \"SKIP\" : the command is not sent to device.\n - \"WW\" or \"GW\" : any GET is replaced by SET(null).\n \n4.  _We can set `device.capabilities='NONE'` to block all commands from user, but still executing commands from 'fast&lowbar;cmds'._\n \n4.  _We can set `dp.capability='TRG'` to block all commands from user, but still executing commands from 'fast&lowbar;cmds'._\n \n5.  Internal use: share, custom devices, extensions.\n\n6.  For tuyaDEAMON user commands see 'std_cmds' node.\n"
    },
    {
        "id": "889a37728c02fec3",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "skip: to logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 615,
        "y": 1320,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "ee1c4912d9796116",
        "type": "debug",
        "z": "9926dce981094007",
        "d": true,
        "name": "*trace: msg IN for Fake devices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 1600,
        "wires": [],
        "info": "CUSTOMIZATION\n\n- Enable to see in the debug pad all msg sended to fake devices.\n- Normal use: disabled"
    },
    {
        "id": "2b1bbabc29e7e844",
        "type": "link in",
        "z": "9926dce981094007",
        "name": "share IN",
        "links": [
            "b2fc4f1aee2c780b",
            "00017fb9fd04aca6",
            "91204bfd0f7db998"
        ],
        "x": 1020,
        "y": 1600,
        "wires": [
            [
                "1f988381d7a2deab"
            ]
        ],
        "l": true,
        "info": "## ENTRY point to execute a 'share'\n\nUsually 'share' are defined in `global.alldevices`, so an Event can trigger one of more Commands.\n\nBut a 'share' can live also alone, and the user as an alternative way to fire commands in tuyaDEAMON,\nsending here a 'share', or using the SYSTEM property 'doSHARE'.\n````\nshare object Format:\n     \"info\": {                     // auto from trigger event or user (optional)\n                                 // uses: info.device, info.property, info.value\n                  \"\"                // used as default 'IN parameters' in action\n             }\n     \"share\": [{\n        \"test\": [                                      // optional: default true\n           `condition-string-1`        // eval(condition-string-1) => true|false          \n            ... more test strings (AND) ... ],\n        \"action\": [{                                  // standard command fields\n            \"remote\"  : \"NAMEXX\",                                    // optional\n            \"device\"  : @expession | string | null | undefined,\n            \"property\": @expession | string | null | undefined,    \n            \"value\"   : @expession | string | object | null | undefined\n             } ... more actions (sequence)...]\n         } ... more {(test[],) action[]} (selection) ...\n      ]\n````\nSpecial rules of evaluation for action.device (and action.property, action.value) to build the actual cammand:\n\n    share.action.device = @expession       => command.payload.device = eval(expession)\n    share.action.device = string | object  => command.payload.device = string | object\n    share.action.device = null             => command.payload.device = undefined\n    share.action.device = undefined|missed => command.payload.device = info.device || undefined.\n    \n- see [share definition](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices#share-actions)\n- see also [share use](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-as-event-processor#tuyadeamon-chains-and-custom-devices)\n\nexamples: see in `global.alldevices` the implementation of these properties, all implemented using 'share':\n      - core._heartbeat: a 'cron' implementation\n      - system._beep_loop: a new 'method' \n      - system.doBenchmark: a new 'method' \n      - tuya_bridge._tstPing24H: a new 'method' \n      "
    },
    {
        "id": "e6c6a65281e3ec9a",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "IN COMMANDS",
        "info": "_tuyaDAEMON process_ chain for commands to all device.\n\nSee all Input nodes for info and format:\n\n**std_cmds**: Main entry point for tuyaDEAMON commands\n\n**fake_cmds_IN**: INPUT for direct commands to _local fake devices_.\n**fast_cmds**:    INPUT fast, internal use (no log)\n**low_level_IN**  INPUT Low level, directly to local `tuya-smart-device', for test or secial cases\n",
        "x": 240,
        "y": 1140,
        "wires": []
    },
    {
        "id": "56e69f4e89a5c5f9",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "CUSTOMIZE tuya devices (readme)",
        "info": "## INSTALLATION NOTE\n\nCORE devices (disabled) are present in ver. 2.2.2 distributed only as examples of \nusing some special subflows, to [fine-tune device](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#subflow-implementation)\n behavior: the user must replace them with their own devices.\n\nOne of (required):\n -  `Static retry`: the delay between connection attempts is \n       fixed once in 'tuya_smart_device' or in the driver node. Use this as default.\n -  `Dynamic retry`: the delay between connection attempts \n       is between a minimum and a maximum.\n\nExtra (optional):\n -  `RT/AVG`: for devices that push lots of data\n\n -  `explode`: to expand data structures\n\n -  `REFRESH`: for (rare) devices that handle the 'REFRESH' command (and you have to use it).\n\nBefore inserting your devices:\n - _Delete all example devices, relate nodes, clean also the `device selector` node_ (output 1\n  is reserved to `tuya_bridge`, don't delete it).\n \n -------------------------\n## How to add a new [device](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices#tuyadaemon-devices)\n\nAdd to CORE flow the `'real' tuya-devices` i.e. the devices handled by `smart-tuya-device` nodes,\n or equivalent implementations. For more detail, see `core.devices selector` node informations.\n Then update the `global.alldevices.real`, and finally the `*catch device and LAN errors` node.\n\nFor the the `'virtual' tuya-devices` i.e. the subdevices handled by a gateway: \n   - add the \"real\" gateway to CORE flow (if not present).\n   - update `global.alldevices.real` for the gateway (if not present), \n   - update `global.alldevices.virtual` for the device. \n\nFor the `'fake' device`, use a custom flow for any device. Add them to `global.alldevices.fake`<br>\n\nFor the `'mirror' devices` you MUST use the [**core_TRIGGER**](https://github.com/msillano/tuyaDAEMON/tree/main/tuyaTRIGGER) flow.\n\n-------------------------\n## ADDING DEVICES details \n\nTo add `standard 'real' Tuya` devices:\n  - see WIKY/[\"Howto: add a new device to tuyaDAEMON\"](https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON) for step-by-step process.\n  - see [devices definition: JSON 'global.alldevices'](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices#devices-definition-json-globalalldevices) for format details.\n  - see [Devices availables](https://github.com/msillano/tuyaDAEMON/tree/main/devices#devices-availables) a collection of data about some known Tuya devices.\n  - see [TuyaDAEMON-toolkit](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-toolkit) helper application for new device.\n\nTo add `standard 'virtual' Tuya` devices, that uses a gateway:\n  - add  to CORE the the gateway, as standard 'real' device, if not already present, and update `global.alldevices.real`.\n  - any 'virtual' device requires only an entry in `global.alldevices.virtual`, using also `cid` and `gateway` (see [model](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices#devices-definition-json-globalalldevices)) in the 'virtual' branch of alldevices.\n\n_The ['fake'](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices#tuyadaemon-devices) devices are not handled by tuyAPI: \"mirror\", \"derived\", \"custom\", and \"SW only\" devices._\n\nTo add `'mirror' Tuya` devices, you must use [core_TRIGGER](https://github.com/msillano/tuyaDAEMON/tree/main/tuyaTRIGGER) module:\n  - see WIKI/[\"tuyaTRIGGER info\"](https://github.com/msillano/tuyaDAEMON/wiki/tuyaTRIGGER-info)\n  - see WIKY example/[\"mirror device 'Smoke_Detector': case study\"](https://github.com/msillano/tuyaDAEMON/wiki/mirror-device-'Smoke_Detector':-case-study)\n\nTo define `'derived' devices`, which are composed of multiple devices (Object Oriented style) :\n  - see [details](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones)\n  - see WIKY example/[\"derived device 'watering_sys': case study\"](https://github.com/msillano/tuyaDAEMON/wiki/derived-device-'watering_sys':-case-study)\n\nTo add `custom devices` (not Tuya) you always need to develop\na node-red flow as an interface. Some examples serve as a guide:\n   - USB/COM devices: WIKY example/[PM_detector](https://github.com/msillano/tuyaDAEMON/wiki/custom-device-'PM-detector':-case-study)\n   - MQTT devices: WIKY example/[Sonoff PDMtimer](https://github.com/msillano/tuyaDAEMON/wiki/custom-device--MQTT-'Ozone_PDMtimer'-)\n   - 433MHz device: WIKY example/[weather station](https://github.com/msillano/tuyaDAEMON/wiki/case-study:-433-MHz-weather-station)\n\n`Software only` devices, like libraries that add functionality\nof specific interest to tuyaDAEMON, external API stubs, etc.:\n   - WIKY example/[_system](https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system)\n\n\n",
        "x": 1200,
        "y": 240,
        "wires": []
    },
    {
        "id": "1c9acf743422023d",
        "type": "function",
        "z": "9926dce981094007",
        "name": "pseudo DPs",
        "func": "\n//  filter device messages to process  pseudoDP \n//---------------------- some asserts for not fake devices\nif (!msg.toDev) {\n    node.warn([\"ASSERT fail: msg.toDev must exist in real|virtual devices.\", msg]);\n    return [null];\n}\n\n// special output message\nvar newMsg = {\n    toDev: msg.toDev,\n    payload: { operation: \"CONTROL\" }\n};\n\n// processes pseudoDP _standby, _findTimeout doing a format change.\n//  SET/GET case:\n// case sensitive\nswitch (msg.payload.dps) {\n    case \"_standby\":\n        //        node.warn(\"in STANDBY\");\n        if (msg.payload.set !== undefined) {          // is SET\n            newMsg.payload[\"action\"] = !!(msg.payload.set) ? \"DISCONNECT\" : \"CONNECT\";\n            return newMsg;\n        }\n        // GET: ignore            \n        return null;\n    case \"_findTimeout\":\n        if (msg.payload.set !== undefined) {      // is SET\n            newMsg.payload[\"action\"] = \"SET_FIND_TIMEOUT\";\n            newMsg.payload[\"value\"] = Number(msg.payload.set);\n            return newMsg;\n        }\n        // GET: ignore            \n        return null;\n    case \"_retryTimeout\":\n        if (msg.payload.set !== undefined) {      // is SET\n            newMsg.payload[\"action\"] = \"SET_RETRY_TIMEOUT\";\n            newMsg.payload[\"value\"] = Number(msg.payload.set);\n            return newMsg;\n        }\n        // GET: ignore            \n        return null;\n    // not implemented: kills        \n    case \"_T\":\n    case \"_t\":\n    case \"_connected\":\n    case \"SCHEMA\": // ??\n    case \"schema\": // ??\n        return null;\n    // implemented:  nothing to do      \n    case \"_refreshCycle\":\n    case \"_refresh\":\n        // verify if available else error\n        var o = context.global.alldevices.getODev(msg.toDev);\n        if (o.capability && o.capability.includes(\"REFRESH\"))\n            return (msg);\n        node.warn(\"[pseudo DP]ERROR: REFRESH not allowed by \" + (o.name || o.id) + \" device.\");\n        return null;\n    default:\n        // test for MULTIPLE case +  _standby | _findTimeout | _retryTimeout: \n        // here is case sensitive\n        if ((msg.payload.data !== undefined) && (msg.payload.data._standby !== undefined)) {\n            let aval = msg.payload.data._standby;\n            delete msg.payload.data._standby;\n            //             node.send(msg);\n            //             newMsg[\"standby\"]=aval;\n            newMsg.payload[\"action\"] = !!(aval) ? \"CONNECT\" : \"DISCONNECT\";\n            node.send(newMsg);\n        }\n        if ((msg.payload.data !== undefined) && (msg.payload.data._findTimeout !== undefined)) {\n            let aval = msg.payload.data._findTimeout;\n            delete msg.payload.data._findTimeout;\n            //              node.send(msg);\n            //              newMsg[\"findTimeout\"]=aval;\n            newMsg.payload[\"action\"] = \"SET_FIND_TIMEOUT\";\n            newMsg.payload[\"value\"] = aval;\n            node.send(newMsg);\n        }\n        if ((msg.payload.data !== undefined) && (msg.payload.data._retryTimeout !== undefined)) {\n            let aval = msg.payload.data._retryTimeout;\n            delete msg.payload.data._retryTimeout;\n            //              node.send(msg);\n            //              newMsg[\"findTimeout\"]=aval;\n            newMsg.payload[\"action\"] = \"SET_RETRY_TIMEOUT\";\n            newMsg.payload[\"value\"] = aval;\n            node.send(newMsg);\n        }\n\n}  // case ends\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1200,
        "wires": [
            [
                "76e28ca8c3d5a4e2"
            ]
        ],
        "info": "Filter and processes all pseudoDP (see [here](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#pseudodp))"
    },
    {
        "id": "aed60c00fb93e888",
        "type": "link in",
        "z": "9926dce981094007",
        "name": "fake_cmds_IN",
        "links": [],
        "x": 310,
        "y": 1360,
        "wires": [
            [
                "d59d2925c7949a60"
            ]
        ],
        "l": true,
        "info": "INPUT for direct commands to _local fake devices_.\n\nCommand format for all local 'fake' and custom devices:\n   the Message is in rich `normalizated` format to speedup next elaborations:\n\nused to update `global.tuyastatus` (are standard items but redefined)\n-   `msg.payload.device   = usr-dev-name|msg.to`\n-   `msg.payload.property = undef|usr-dp-name|msg.infodp`\n-   `msg.payload.value    = undef|any`  \n\nused as keys:\n-   `msg.to     = cid|deviceId`       (mandatory)\n-   `msg.infodp = dp|pseudoDP`        (mandatory)\n-   `msg.hide   = undef|\"\"|\"KCERT\"`   ([visibility](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices#output-control), since 2.2.0)\n\nrules:\n- Only for local devices, not handled by the 'tuya-smart-device' nodes.\n- pseudoDPs are defined in `context.global.PSEUDODP` object.\n     [see wiki](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#pseudodp)\n- The device|dp `capabilities` are not checked in global.alldevices.\n- The device _connection status is not checked.\n- SCHEMA: `infodp` = 'schema', `property`= undefined, `value`= undefined\n- GET: `value` = undefined\n- SET: `value` = defined, any value, also object.\n\nunused in _fake devices_:\n-  `msg.toDev  = gatewayId|deviceId` (real devices selector)\n-  MULTIPLE: `infodp` = 'multiple', `property` = 'multiple', `value` = coded, sent 'as is' to device.\n\n- see also [normalized command](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-as-event-processor#normalized-command)\n\n"
    },
    {
        "id": "e25bb184102329ba",
        "type": "link in",
        "z": "9926dce981094007",
        "name": "sql_BD",
        "links": [
            "d3e3bb62746e093a"
        ],
        "x": 1010,
        "y": 1860,
        "wires": [
            [
                "f0e5e8beb335d0b4"
            ]
        ],
        "l": true,
        "info": "##  Entry point for DB (sql)\n\nFormat to execute user sql (routed to DBlocal, DBremote..., with log)\n\n       {\n        to:     \"_dBase\",                             // extra-device, DB subsystem\n        infodp: \"_sqlDBlocal\"|\"_sqlDBremote\"|...,     // default two dp (2 DB)\n        hide: \"\",\n        topic:  `sql-string`\n       } \n\nFor more than 2 DB: see `CUSTOMIZE: DBase servers (readme)` node.        \n\nReference: Format for tuyaDAEMON DB Logging purpose (routed to DBlocal, no log):\n\n       {\n        to|from: `deviceId`|`cid`,  // mandatory\n        infodp:  `property`,\n        hide: \"\",\n        topic:   \"INSERT ...\"     // sql\n       }\n"
    },
    {
        "id": "2f049cd00523acf9",
        "type": "subflow:81d3b584.14c888",
        "z": "9926dce981094007",
        "name": "",
        "env": [
            {
                "name": "deviceID",
                "value": "_system",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "_sqlDBlocal",
                "type": "str"
            },
            {
                "name": "value",
                "value": "@msg._event? msg.payload: \"none\"",
                "type": "str"
            }
        ],
        "x": 1830,
        "y": 1840,
        "wires": [
            [
                "ab4f19b1770e5b5b"
            ]
        ]
    },
    {
        "id": "25ab699422f2c5f0",
        "type": "subflow:81d3b584.14c888",
        "z": "9926dce981094007",
        "name": "",
        "env": [
            {
                "name": "remote",
                "value": "",
                "type": "str"
            },
            {
                "name": "deviceID",
                "value": "_system",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "_sqlDBremote",
                "type": "str"
            },
            {
                "name": "value",
                "value": "@msg._event? msg.payload: \"none\"",
                "type": "str"
            }
        ],
        "x": 1830,
        "y": 1900,
        "wires": [
            [
                "ab4f19b1770e5b5b"
            ]
        ]
    },
    {
        "id": "ab4f19b1770e5b5b",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "to logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 2015,
        "y": 1900,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "a52c684e49bcf90f",
        "type": "mysql",
        "z": "9926dce981094007",
        "d": true,
        "mydb": "19cea4348c0edc67",
        "name": "append to  DB local",
        "x": 1530,
        "y": 1780,
        "wires": [
            []
        ],
        "info": "CUSTOMIZATION:\n\nEdit for DB url and credentials. \nDisable/delete if not used."
    },
    {
        "id": "421da91399e0941d",
        "type": "mysql",
        "z": "9926dce981094007",
        "d": true,
        "mydb": "93f8bfd.d0c854",
        "name": "execute on DB  remote",
        "x": 1540,
        "y": 1900,
        "wires": [
            [
                "25ab699422f2c5f0"
            ]
        ],
        "info": "CUSTOMIZATION\n\nEdit for DB url and credentials. \nDisable/delete if not used."
    },
    {
        "id": "c973b93480df3d1a",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "to low_level_IN",
        "mode": "link",
        "links": [
            "2915d560219eaa90"
        ],
        "x": 1895,
        "y": 640,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "7dd86199cd720eb3",
        "type": "debug",
        "z": "9926dce981094007",
        "d": true,
        "name": "*trace: msg IN for Real devices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 1560,
        "wires": [],
        "info": "CUSTOMIZATION\n\n- Enable to see in the debug pad all msg sended to fake devices.\n- Normal use: disabled"
    },
    {
        "id": "569f38243c980fc2",
        "type": "link in",
        "z": "9926dce981094007",
        "name": "event in",
        "links": [
            "792b5ea5968f5bc2"
        ],
        "x": 405,
        "y": 1940,
        "wires": [
            [
                "582086c9359a7b57",
                "30a357f0547a80b7"
            ]
        ],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "30a357f0547a80b7",
        "type": "function",
        "z": "9926dce981094007",
        "name": "notification",
        "func": "const TIMEOUT = 20000;\n\nlet cmdlist = flow.get(\"waitcmd\");\n//  node.warn([\"inPUT SET \", msg, cmdlist]);\nif (cmdlist === undefined)\n  cmdlist = [];\n\ncmdlist = cmdlist.filter(obj => obj._t + TIMEOUT > Date.now());\n\n// remote SET msg: stores it to send delayed answewr  \nif (msg.payload && msg.payload.remote_from && (msg.infodp !== \"_toLogging\")) {\n  // \n  node.warn([\"in SET \", msg, cmdlist])\n  msg['_t'] = Date.now();\n  cmdlist.push(msg);\n  flow.set(\"waitcmd\", cmdlist);\n  return null;\n}\n/*\n{\n    \"remote\": \"DEVPC\",\n    \"device\": \"_system\",\n    \"property\": \"_toLogging\",\n    \"value\": {\n        \"remote_from\": \"ANDROID\",\n        \"deviceId\": \"bfa355aa196ae5975cy6ii\",\n        \"data\": {\n            \"dps\": {\n                \"1\": \"OFF\"\n            }\n        }\n    }\n}\n*/\n// noting to do: no waiting response\nif (cmdlist.length < 1) return null;\n\nif (cmdlist.length > 10) return null;\n\n// test response\nif (msg.info && msg.info.value && (msg.infodp !== \"_toLogging\")) {\n  cmdlist.forEach(function (oldmsg, index) {\n    // \n    node.warn([\"test GET \", msg, oldmsg]);\n    if (oldmsg.to == msg.from) {\n      var cmm = {\n        payload: {\n          remote: oldmsg.payload.remote_from,\n          device: \"_system\",\n          property: \"_toLogging\",\n          value: {\n            remote_from: global.get(\"instance_name\"),\n            deviceId: oldmsg.to,\n            data: {\n              dps: {}\n            }\n          }\n        }\n      };\n      cmm.payload.value.data.dps[msg.infodp] = msg.info.value;\n      //   \n      node.warn([\"out GET \", msg, cmm]);\n      //               return cmm ;\n      node.send(cmm);\n    }\n\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1940,
        "wires": [
            [
                "e7c4ba9b7d51601d"
            ]
        ]
    },
    {
        "id": "8b78950f658c6e23",
        "type": "function",
        "z": "9926dce981094007",
        "name": "Info commands filter",
        "func": "// kills unwanted tuyaDEAMON Event messages & MQTT\n\n// some formal ASSERT, just in case...\nif ((typeof (msg.to) !== \"string\") && (typeof (msg.from) !== \"string\"))\n    node.warn([\"ASSERT fail: in msg the to/from (string) must exist.\", msg]);\nif (typeof (msg.infodp) !== \"string\")\n    node.warn([\"ASSERT fail: in msg the msg.infodp (string) must exist.\", msg]);\n// from 2.2.0\nif (typeof (msg.hide) !== \"string\") {\n    node.warn([\"ASSERT fail: in msg the msg.hide (string) must exist.\", msg]);\n    msg.hide = \"\"; // no errors\n}\n\n// ==================== KILL log COMMANDS: SYSTEM defined \nswitch (msg.to) {\n    case \"_system\":\n        if (msg.infodp === \"_zeroTask\") return (null);   // fast benchmarks\n        if (msg.infodp === \"_toLogging\") return (null);   //  internal use: REST remote echo\n        if (msg.infodp === \"_proxy\") return (null);   //  internal use: REMOTE commands \n        break;\n}\n\n// ==================== KILL log COMMANDS: user defined in alldevices.\nif ((!!~msg.hide.indexOf(\"C\")) || (!!~msg.hide.indexOf(\"K\")))\n    return null;      // killed\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1660,
        "wires": [
            [
                "dfb4e93898d1796c",
                "36e2148512b9f794"
            ]
        ],
        "icon": "font-awesome/fa-filter",
        "info": "CUSTOMIZATION:\n\nFilter to reduce info messages on Debug pad.\n\nFiltering action is done usually by the 'hide' device/dp property, under user control.\nSome cases are done by this code, to force default behavior.\n\n- On installation and test:\n  Best don't filter any message.\n- On production:\n  Better to filter not useful events.\n\n_________________________________\n  \nIn the code, filter can be done on: \n       msg.from:            RX info, the deviceId\n       msg.to:              TX info, the deviceId\n       msg.infodp:          the dpId          \n  \n   "
    },
    {
        "id": "19bd7e8a4f4718d0",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "events info",
        "mode": "link",
        "links": [
            "b07f4a1bd427c7fc"
        ],
        "x": 1510,
        "y": 1720,
        "wires": [],
        "l": true,
        "info": "Internal use, to send via new protocols (actually used by MQTT)."
    },
    {
        "id": "36e2148512b9f794",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "commands info",
        "mode": "link",
        "links": [],
        "x": 1520,
        "y": 1600,
        "wires": [],
        "l": true,
        "info": "internal use, to send via new protocols (actually not used)"
    },
    {
        "id": "62fdbe07c3f45d98",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "CUSTOMIZE: DBase servers (readme)",
        "info": "  _This implementeation can use 0, 1, or 2 Dbases_ :\n  \nThe two databases are called: `DBlocal` and `DBremote`.\n- disable all DBlocal/DBremote nodes if not used (default).\n\nTo store the log on DB:\n\n**Preconditions** (see [here](https://github.com/msillano/tuyaDAEMON/blob/main/tuyaDAEMON/README.md#installation))\n\n- TuyaDAEMON CORE installed, SYSTEM optional.\n- Verify DB accessibility and credentials using _MyPhpAdmin_.\n- the `tuyathome.messages` table must exist with required fields: import `DB_CORE.2.2.2.sql` using _MyPhpAdmin_)\n\n**CORE config**\n- setup `store on DB local` and `execute on DB local` nodes and related `local` MySQLdatabase configuration node.\n- setup `execute on DB remote` node and related `remote` MySQLdatabase configuration node (optional, requires SYSTEM).\n- on `DBlocal` (but it can be really a remote DB, changing the configuration)  **CORE** stores the log of all commands (`TX`) and events (`RX`) processed.\n- CORE uses only the `tuyathome.messages` table to store log messages (see `core.BD command filter` node)\n- With `SYSTEM` the user can send custom SQL commands to both DBs ([see wiki](https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#db-functions), using two ad hoc properties: `_sqlDBlocal` and `_sqlDBremote`.\n\n**data logging fine-tuning**\n\n - The user can fine-tune the log to see only interesting data, on a device/property basis, in the global.alldevices structure: [see the wiki](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices#output-control).\n\n\n## Extensions\nUSE CASE: Maybe you like to do something like this:\n- to store only some devices/properties in an open `wehater` DB,\n- to store other devices/properties in a `security` DB installed in a protected server running 24/7\n- and the others in the `debug` DB on the development PC (only for debug, usually disabled).\n\nYou can: if you need to use more than two DBs with the same tuyaDAEMON instance, it is easy to duplicate the  DBremote node structure and configuration as required.\n   \n1. In `CORE` flow you must do:\n     - Add the required nodes.\n     - edit `DB command filter` node adding more outputs \n     - edit `DB log event filter` to routing messages.\n     - edit `All DB status` node to check the new DB nodes\n     \n2. In `SYSTEM` flow you must add new commands (new DPs: e.g. `sqlDBweater`) to send SQLs to new DBs. You must modify:\n     -  `_system custom selector (3)`  node to implement SET and GET.\n\n3. finally update\n     -  `global.alldevices.fake._system`: add to _system the new commands (DPs).\n   \n ",
        "x": 1830,
        "y": 1780,
        "wires": []
    },
    {
        "id": "9f9e80506579b9cb",
        "type": "function",
        "z": "9926dce981094007",
        "name": "*DB events filter",
        "func": "\n// Default using 2 DB:  'local' and 'remote'.\n\n// some ASSERT, just in case...\nif (typeof (msg.from) !== \"string\")\n     node.warn([\"ASSERT fail: in msg the msg.from (string) must exist.\", msg]);\nif (typeof (msg.infodp) !== \"string\")\n     node.warn([\"ASSERT fail: in msg the msg.infodp (string) must exist.\", msg]);\nif (typeof (msg.topic) !== \"string\")\n     node.warn([\"ASSERT fail: in msg the msg.topic (sql string) must exist.\", msg]);\n// from 2.2.0\nif (typeof (msg.hide) !== \"string\")\n     node.warn([\"ASSERT fail: in msg the msg.hide (string) must exist.\", msg]);\n\n// ==================== KILL DBASE EVENT records: default SYSTEM defined \nswitch (msg.from) {\n     case \"_system\":\n          if (msg.infodp === \"_exec\")\n               return (null);   // can give problems with the output data, not logged in DB\n          //\n          if (msg.infodp === \"_toLogging\") return (null);    // internal use REST remote echo\n          if (msg.infodp === \"_proxy\") return (null);        // internal use REMOTE commands\n          if (msg.infodp === \"_zeroTask\") return (null);     // fast benchmarks, no log\n          break;\n}\n\n// ==================== KILL DBASE EVENT recors: user defined in alldevices\nif ((!!~msg.hide.indexOf(\"R\")) || (!!~msg.hide.indexOf(\"K\")))\n     return (null); // killed\n\n// =================== here optional routing code for standard events\n//  --- default one output for all event records, no routing\n//  user can do custom routing adding more outputs\n\nreturn [msg];  // defaut: local",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1780,
        "wires": [
            [
                "a52c684e49bcf90f"
            ]
        ],
        "icon": "font-awesome/fa-filter",
        "info": "CUSTOMIZATION:\n\nFilter to reduce info record on Databases.\n\nFiltering action is done usually by the 'hide' device/dp property, under user control.\nSome cases are done by this code, to force default behavior.\n\n- On installation and test:\n  Best don't filter any message.\n- On production:\n  Better to filter not useful events.\n\n_________________________________\n\nRouting action to direct some records to special DBs.\n\n_________________________________\n  \nIn the code, the selection can be done on: \n       msg.from:            RX info, the deviceId\n       msg.to:              TX info, the deviceId\n       msg.infodp:          the dpId          \n_________________________________\n  \n"
    },
    {
        "id": "0f1df12541c56701",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "CORE startup process (readme)",
        "info": "Message from CORE (alone) on startup (only if DB nodes are enabled):\n\n    [\"RX: 'HAL@home'/'_DBase' \",true]  \n\nor, in case of DB problems (check configuration nodes):  \n\n    msg : error\n    \"Error: connect ECONNREFUSED 192.168.1.19:3306\" (can change)\n\n    [\"RX: 'HAL@home'/'_DBase' \", false ] \n\n--------------------------------------------------\n\nTipical startup sequence (core+system+trigger+MQTT) after a 'Restart Flows':\n\n           [ \"RX: core/_DBase\", true ]                       // DB very fast\n\n           [ \"RX: tuya_bridge/_connected\", false ]           // initial value\n           [ \"RX: HAL@home/_WiFinet\", false ]\n           [ \"RX: HAL@home/_WiFiunconnected\", array[1] ]\n\n           [ \"RX: tuya_bridge/_connected\", true ]            // successful attempt \n           [ \"RX: HAL@home/_LANnet\", true ]\n           [ \"RX: HAL@home/_WiFinet\", true ]\n           [ \"RX: HAL@home/_WiFiunconnected\", array[0] ]\n\n           [ \"RX: core/_heartbeat\", \"16:46:44\" ]             // 5s from start\n                                                             // then every 30s\n           \n           [\"RX: HAL@home/_laststart\",\"2022-04-08 16:46:49\"] // 10 s from start\n\n\n**heartbeat**\n\n    [\"DEVPC: RX: 'core'/'heartbeat' \",\"20:57:56\"]\n    \nThis is a PUSH event from core, default is every 30s after 5s.\n\n note:  You can:\n - change the period (editing the 'heartbeat' input node) \n - control the logging rules ('hide' in global.alldevices, default: \"R\" = do not store in DBase) \n - eliminate it (disabling the node).\n  \n  \n**version**\n  See the test node \"GET version\" readme.\n",
        "x": 250,
        "y": 2260,
        "wires": []
    },
    {
        "id": "cd4003a810bc9294",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "heartbeat",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.data.dps._heartbeat",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "{\"deviceId\":\"_core\",\"data\":{\"dps\":{\"_heartbeat\":null}}}",
        "payloadType": "json",
        "x": 290,
        "y": 1600,
        "wires": [
            [
                "412999c43b944baf",
                "0b580db2485c4794"
            ]
        ],
        "icon": "font-awesome/fa-ban",
        "info": "\nheartbeat event creation.\n\nPUSH event usend in tests, as watchog, etc.\n\nThe payload is from \"core.heartbeat\" node, fired every 30s (default, defined in the 'heartbeat' node).\n\nTo reduce the heartbeat visibility update the 'hide' in 'global.alldevices.fake.core.dps._heartbeat' (general rule): \n\n  - Set 'hide' to \"\" | \"K\" | \"E\" | \"R\" to log: 'all' | 'nothing' | 'only DB' | 'only debugpad + MQTT' \n     (it is an event, so do not use \"C\" and \"T\").\n\n"
    },
    {
        "id": "74bb0f87eadcf1eb",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "SET info",
        "props": [
            {
                "p": "payload.device",
                "v": "_core",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_info",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "any",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 2400,
        "wires": [
            [
                "c29e36c9b43982f7"
            ]
        ],
        "info": "Test the SET '_info' property of core, using the msg:\n\n         payload: {\n            device: \"_core\",\n            property: \"_info\",\n            value: \"any\"\n            }\n- action: this SET acts as a trigger ( 'value' is requited, but not used)\n Core updates the list of modules and devices.\n\n- Return: the list of modules in use and the list of actually connected devices, gouped as real, virtual and fake devices.\n\nIN _global.alldevices_ the default definition is:\n\n                {\n                    \"dp\": \"_info\",\n                    \"name\": \"version\",\n                    \"capability\": \"RW\"\n                }\nnote:  RW = SET and GET\n\n---------------------------\nExpected result\n\n    TX: GET fake core/version\n    \nthen: \n\n    [\"RX: core/version object] \n  \nOpenninig the answer object we get (configuration dependent):\n\n - minimal (only core)\n\n````\n    array[2]\n      0: \"RX: core/version \"\n      1: object\n                      // here list of 'connected' devices\n         devices: object\n           real: array[0]\n           virtual: array[0]\n           fake: array[1]\n              0: \"core\"\n                      // here list of 'enabled' flows\n         core: \"2.2.2\"\n````\n\n- rich (core+trigger+mqtt+system):\n````\n    array[2]\n      0: \"RX: core/version \"\n      1: object\n         devices: object\n           real: array[1]\n             0: \"tuya_bridge\"\n          virtual: array[0]\n          fake: array[2]\n             0: \"core\"\n             1: \"HAL@home\"\n      core_system: \"2.2.0\"\n      core_trigger: \"2.2.0\"\n      core_mqtt: \"2.2.0\"\n      core: \"2.2.2\"\n````  \n\n_General rule: if you set a user friendly 'name' for a device and/or a property (in core.global.alldevices) all output messages and the global.tuyastatus will use this name_ (e.g. 'version' vs. _info).\n\n- _In the input messages you can use both, the name or the ID:_\n````\n    payload.property = \"version\"\nor    \n    payload.property = \"_info\"      \n\n````\n - Never change strings starting with '_': they are  code defined IDs and cannot be changed. \n\n"
    },
    {
        "id": "c29e36c9b43982f7",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "send to std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 590,
        "y": 2400,
        "wires": [],
        "l": true
    },
    {
        "id": "1028dd32f5667c27",
        "type": "subflow:81d3b584.14c888",
        "z": "9926dce981094007",
        "name": "",
        "env": [
            {
                "name": "deviceID",
                "type": "cred"
            },
            {
                "name": "propertyDP",
                "value": "_heartbeat",
                "type": "str"
            },
            {
                "name": "value",
                "value": "123456789",
                "type": "num"
            },
            {
                "name": "remote = NULL",
                "value": "NULL",
                "type": "str"
            },
            {
                "name": "value = NULL",
                "value": "NULL",
                "type": "str"
            },
            {
                "name": "NULL process",
                "value": "undefined",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 2780,
        "wires": [
            [
                "94d22518d381a7d2"
            ]
        ],
        "info": "To have a more rich test experince, this subflow implementation follows the rules:\n\n1) if you set as value any string that starts with:\n    -  global.\n    -  flow.\n    -  msg.\n\nthe value is keep from the object you entered.\n[See](https://discourse.nodered.org/t/subflows-and-configuration-late-and-runtime-parameters-binding/60042)\n\nexample:\n\n   `global.tuyastatus.core._heartbeat` \n\nsets the parameter to last heartbeat time like `\"19:06:44\"`\n\n\n2) The special value `\"NULL\"` deletes the propery.\n\nExanple:\n\n   `remote = SOME`\n   \noutput msg:  \n````\n   msg.payload: {\n              \"remote_from\" : \"SOME\",   \n              \"deviceId\" : <deviceID>\n              ..... more\n````   \nbut:\n   `remote = NULL`\n   \noutput msg:  \n````\n   msg.payload: {\n               \"deviceId\" : <deviceID>\n              ..... more\n````              \n\n\n\n"
    },
    {
        "id": "78dbc7d26cb39d84",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 145,
        "y": 2780,
        "wires": [
            [
                "1028dd32f5667c27"
            ]
        ],
        "l": false
    },
    {
        "id": "94d22518d381a7d2",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "send to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 540,
        "y": 2780,
        "wires": [],
        "l": true
    },
    {
        "id": "a2e3a7b98bd4e213",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "TESTING CORE Command process (readme)",
        "info": "Testig command (standard/fast) core function.\n\nThis examples build a cammand message.\n\n**tuyaDAEMON commands**\n````\n        \"payload\": {\n              \"remote\"  : NULL | <remote>,      \n              \"device\"  : NULL | <usr-devname>|<deviceID>\n              \"property\": NULL | <usr-propname>|<propertyDP>\n              \"value\"   : NULL | <as-required (decoded)>\n        }}}}\n\nrules:\nif remote =    NULL => local instance (remote requires SYSTEM module)\nif device =    NULL (remote MUST exist) => get the list of remote devices \n                 else it MUST exist in global.alldevices else ERROR\nif property =  NULL (device MUST exist) => SCHEMA (test: allowed by device?)\n                 else (device MUST exist and) it MUST exist in global.alldevices else ERROR\nif value =     NULL (property MUST exist)  =>   GET (test: allowed by dp?)\n                 else  (property MUST exist ) =>   SET (test: allowed by dp?) and type checked against global.alldevices or by an optional encode function: else ERROR\n````\n\nDifferences  `fast_cmds` vs. `std_cmds`:\n- fast_cmds: device capabilities are not checked.\n- fast_cmds: only \"SKIP\", \"WW\", \"GW\" DP capabilities (in global.alldevices) are tested to process commands.\n- fast_cmds: no command log (as hide=\"CT\")\n\n\n**case ok:**\n - remote:  NULL (to use this test: chhose NULL = undefined / delete)\n - deviceID: e.g. core\n - propertyPD: must exist in global.alldevices | NULL (SCHEMA)\n         e.g. NULL |  _info\n - value: NULL (GET) | as required by propertyPD (SET)\n\nExpected result (local.code._info GET) like:\n     \n      TX: GET fake core/version                         // not in case of 'fast_cmds'\n\nthen:     \n \n      [\"RX: core/version\",\"2.2.2\"]    // after startup, before any core._info.SET(any)\n\nor:      \n      [\"RX: core/version\", object]                     // after a core._info.SET(any)\n\n\n**Error messages:**\n bad remote (both Std/Fast):\n      ASSERT fail: 'remote' requires the '_system' module installed.       \n\n bad deviceID (both Std/Fast):\n      ERROR [normalize]: not found the device 'fake' in global.alldevices.\n\n bad propertyDP (both Std/Fast):\n \n      WARNING [normalize]: In alldevices missed the 'core':dps[fake] definition.\"     \n \n    then (Std Cmds):\n      ERROR: The _core device does not implement the 'fake' property\n \n  or (Fast Cmds): \n      TypeError: Cannot read properties of undefined (reading 'capability')\n\nnote: this test is useful also to test new devices.",
        "x": 290,
        "y": 2880,
        "wires": []
    },
    {
        "id": "54bd52cdf405bd16",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "any-not used",
        "payloadType": "str",
        "x": 135,
        "y": 2940,
        "wires": [
            [
                "92f6afa930604f34"
            ]
        ],
        "l": false
    },
    {
        "id": "635758cf7f407cd5",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "send to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 540,
        "y": 2940,
        "wires": [],
        "l": true
    },
    {
        "id": "5471f0b8dff0d545",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 135,
        "y": 3000,
        "wires": [
            [
                "67d2231584d933a5"
            ]
        ],
        "l": false
    },
    {
        "id": "4b9f1572191a109f",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "send to core.fast_cmds",
        "mode": "link",
        "links": [
            "58d95ec5fc3c0d06"
        ],
        "x": 550,
        "y": 3000,
        "wires": [],
        "l": true
    },
    {
        "id": "67d2231584d933a5",
        "type": "subflow:f30e8140.1bed9",
        "z": "9926dce981094007",
        "name": "",
        "env": [
            {
                "name": "remote",
                "value": "global.instance_name",
                "type": "str"
            },
            {
                "name": "device",
                "value": "NULL",
                "type": "str"
            },
            {
                "name": "property",
                "value": "NULL",
                "type": "str"
            },
            {
                "name": "NULL process",
                "value": "undefined",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 3000,
        "wires": [
            [
                "4b9f1572191a109f"
            ]
        ],
        "info": "xamples\n\n1. GET core.version local:\n\n> remote:   NULL\n> device:   core\n> property: version\n> value:    NULL\n\nExpected result (configuration dependent)\n\n     [\"RX: 'core/version' object] \n\n2. GET locale device list\n\n > remote:   global.instance_name   \n > device:   NULL\n > property: NULL\n > value:    NULL\n\nExpected result (requires system, configuration dependent)\n\n      [ \"DEVPC: RX: HAL@home/list\", array[3] ]\n          (DEVPC = actual local instance name)\n\nexpanded:\n\n    array[2]\n        0: \"DEVPC: RX: HAL@home/list\"\n        1: array[3]\n            0: \"HAL@home\"\n            1: \"core\"\n            2: \"tuya_bridge\"\n"
    },
    {
        "id": "c6c558a75991a819",
        "type": "config",
        "z": "9926dce981094007",
        "name": "core internal  structures init- do not change",
        "properties": [
            {
                "p": "tuyastatus",
                "pt": "global",
                "to": "{}",
                "tot": "json"
            },
            {
                "p": "modules",
                "pt": "global",
                "to": "{\"devices\":{}}",
                "tot": "json"
            },
            {
                "p": "coresetup",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            },
            {
                "p": "datadecode",
                "pt": "global",
                "to": "{\"user defined\":\"seenode\"}",
                "tot": "json"
            },
            {
                "p": "dataencode",
                "pt": "global",
                "to": "{\"user defined\":\"seenode\"}",
                "tot": "json"
            },
            {
                "p": "PSEUDODP",
                "pt": "global",
                "to": "[\"_T\",\"_CONNECTED\",\"_REFRESHCYCLE\",\"_REFRESH\",\"_STANDBY\",\"_RETRYTIMEOUT\",\"_FINDTIMEOUT\",\"MULTIPLE\",\"SCHEMA \",\"LIST\"]",
                "tot": "json"
            }
        ],
        "active": true,
        "x": 415,
        "y": 160,
        "wires": [],
        "icon": "font-awesome/fa-ban",
        "l": false,
        "info": "## internal CORE Configuration\ndo not change.\n\n _global.json_library_\n    Jscript code: do not modify.\n    Same in all instances.\n    Since 2.2.0\n    \n _tuyastatus_        \n    The empy object '{}' forces the cleanup of tuyastatus at startup: do not modify.\n    Same in all instances.\n\n _modules_\t\n    The empy object '{}' forces the cleanup of modules\n    at startup: do not modify.\n    Same in all instances.\n\n"
    },
    {
        "id": "412999c43b944baf",
        "type": "function",
        "z": "9926dce981094007",
        "name": "save",
        "func": "// stores in flow last timestamp, so GET can work\nflow.set(\"lastts\", msg.payload.data.dps._heartbeat)\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "d59d2925c7949a60",
        "type": "function",
        "z": "9926dce981094007",
        "name": "core properties",
        "func": "// filer:  processes al 'core' commands, ignore others.\n\n// local: true if is a GET command  (GET == msg.payload.value not exists)\nfunction _isget(mx) {\n   return (mx.payload.value === undefined);\n}\n// true if is a SET command  (SET == msg.payload.value  exists)\nfunction _isset(mx) {\n   return ((mx.payload.property) && (mx.payload.value !== undefined));\n}\n// used by core.info(), list of real|virtual|fake devices actually connected\nfunction getdevicelist(_dtype) {\n   var list = [];\n   const tstatus = global.get(\"tuyastatus\");\n   global.get(\"alldevices.\" + _dtype).forEach((dev) => {\n      const xdev = (dev.name || dev.id);\n      const conn = tstatus[xdev] && (tstatus[xdev][\"_connected\"]);\n      if (conn) list.push(xdev);\n   });\n   return list;\n}\n// the 'event' base message\nvar logmsg = {\n   \"payload\": {\n      \"deviceId\": \"_core\",\n      \"data\": {\n         \"dps\": {}\n      }\n   }\n}\n\n//------------------------ main\nif (msg.to != \"_core\") return [msg];      // fast exit\n// stuff to access data\nvar oDev = context.global.alldevices.getODev(\"_core\", \"fake\");\nif (oDev === undefined) {\n   node.warn(\"ERROR [core]: '_core' device NOT found in global.alldevices.\");\n   return [null];\n}\nvar pmDevName = context.global.alldevices.getDevName(oDev);\n\n// === ALL CORE SETs\nif (_isset(msg)) switch (msg.infodp) {\n   case \"_info\":    //SET: trigger the global.modules update, value: dummy, not used\n      logmsg.payload.data.dps._info = global.get(\"modules\");\n      // updates device lists\n      logmsg.payload.data.dps._info.devices.real = getdevicelist(\"real\");\n      logmsg.payload.data.dps._info.devices.virtual = getdevicelist(\"virtual\");\n      logmsg.payload.data.dps._info.devices.fake = getdevicelist(\"fake\");\n      return ([null, logmsg]);\n   default:\n      if (!context.global.PSEUDODP.includes(msg.infodp.toUpperCase()))\n         node.warn([\"ERROR [core]: SET for '_core.\" + msg.payload.property + \"' is NOT implemented.\", msg]);\n      return [null];\n}\n\n// === ALL CORE GETs\nif (_isget(msg)) switch (msg.infodp) {\n   case \"schema\":                    // as pseudoDP\n      // code like single dp GETs    \n      let pName = context.global.alldevices.getDpsName(oDev, \"_DBase\");  // gets user name\n      logmsg.payload.data.dps._DBase = global.get(\"tuyastatus.\" + pmDevName + \".\" + pName);\n      //\n      logmsg.payload.data.dps._heartbeat = flow.get(\"lastts\");       // get _heartbeat (undecoded)\n      //\n      pName = context.global.alldevices.getDpsName(oDev, \"_info\");      // gets versiom\n      logmsg.payload.data.dps._info = global.get(\"tuyastatus.\" + pmDevName + \".\" + pName);\n      return ([null, logmsg]);\n   case \"_name\":\n      logmsg.payload.data.dps._name = global.get(\"instance_name\");\n      return ([null, logmsg]);\n   case \"_info\":\n      // from tuyastatus    \n      let qName = context.global.alldevices.getDpsName(oDev, \"_info\");   // gets user name\n      logmsg.payload.data.dps._info = global.get(\"tuyastatus.\" + pmDevName + \".\" + qName);\n      return ([null, logmsg]);\n     case \"_heartbeat\":\n      //  in flow.lastts is last timestamp used by heartbeat (undecoded)\n      logmsg.payload.data.dps._heartbeat = flow.get(\"lastts\");\n      return ([null, logmsg]);\n   case \"_DBase\":\n      // from tuyastatus    \n      let bName = context.global.alldevices.getDpsName(oDev, \"_DBase\");  // gets user name\n      logmsg.payload.data.dps._DBase = global.get(\"tuyastatus.\" + pmDevName + \".\" + bName);\n      return ([null, logmsg]);\n   default:\n      if (!context.global.PSEUDODP.includes(msg.infodp.toUpperCase()))\n         node.warn([\"ERROR [core]: GET for '_core.\" + msg.payload.property + \"' is NOT implemented.\", msg]);\n      return [null];\n}\n\nnode.warn([\"ERROR [core]: BAD 'core' \" + (_isget(msg) ? \"GET\" : \"SET\") + \" message - NOT processed\", msg]);\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// for _heartbeat,  inizialize local with a valid timestamp\nflow.set(\"lastts\", Date.now());\n",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1360,
        "wires": [
            [
                "22239fa409a62d51"
            ],
            [
                "0b580db2485c4794"
            ]
        ],
        "inputLabels": [
            "all fake "
        ],
        "outputLabels": [
            "to no-core ",
            "to logging"
        ],
        "info": "Catch all 'core' SET / GET commands and implements it.\nThe others messages goes to output.\n\n## General rules about the custom devices implementation\n\n> 1) SET changes a value (or _Data Point_).\n>     Returns this value (or the value actually set, if different: e.g. rounded)<br>\n>    \n> 1) or SET is used as a _trigger_ to activate some internal device operations.\n>     In this use, the 'value' (which MUST exist because it is a SET) can be discarded ('any').\n>     SET returns the result value (or 'done', 'error',...).\n>   \n>  2) GET returns the actual value, also from `global.tuyastatus` for simplicity.\n>      Repeatable, without side effects.\n>\n>  4) REFRESH, if implemented, MUST produce the (eventual) update of some internal Data Points and return only the modified DPs.\n>\n>  3) SCHEMA, if implemented, MUST return the actual value for _all GETtable DPs_ of the device.\n>      The data can be a struct of `{dp: value}` in a single message (tuyaDEAMON records this as separate msg)\n ````\n        \"data\": {\n            \"dps\":{\n                \"dp\": value      \n                \"dp\": value      \n                ....\n                }}\n````\n>&nbsp; &nbsp; &nbsp;    or the device can return a message for each DP.\n>   \n"
    },
    {
        "id": "22239fa409a62d51",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "to fake devices",
        "mode": "link",
        "links": [
            "580c2cc4.3ac424",
            "b8c584f48880c546",
            "040ceca86e473cff",
            "369ab28b.348ebe"
        ],
        "x": 800,
        "y": 1280,
        "wires": [],
        "icon": "node-red/arrow-in.svg",
        "l": true,
        "info": "OUTPUT for commands to fake devices, unprocessed by tuyaDAEMON CORE.\n\nFlows implementing \"fake\" devices receive their inputs from this node.\n\n- Same message format as 'fake_cmds_IN' INPUT (see).\n- see also [normalized command](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-as-event-processor#normalized-command)\n"
    },
    {
        "id": "dba9e2195d953757",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "GET _DBase",
        "props": [
            {
                "p": "payload.device",
                "v": "_core",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_DBase",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 2500,
        "wires": [
            [
                "c29e36c9b43982f7"
            ]
        ],
        "info": "Test a GET _DBase property of core.\n  \n      payload: {\n           device: \"_core\",\n           property: \"_DBase\"\n           }   \n         \n- Returns the last '_DBase' status\n\nIN global.alldevices the default definition is:\n\n               {\n                  dp: \"_DBase\"\n                  capability: \"RO\"   \n                  type: \"boolean\"\n               },\n               \nThis property 'PUSH's any variation. The user can only GET \nlast PUSHed value (in globel.alldevices capability: \"RO\", i.e. 'read only')\n----------------------\nExpected result\n\n    TX: GET fake core/_DBase\n    \nthen: \n\n    [\"RX: core/_DBase none]    // all DB disabled\n    [\"RX: core/_DBase false]   // error in one (or more) DB\n    [\"RX: core/_DBase true]    // all DBs connected.\n  \n"
    },
    {
        "id": "2c803e65ce8913fe",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "GET version",
        "props": [
            {
                "p": "payload.device",
                "v": "_core",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "version",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 2440,
        "wires": [
            [
                "c29e36c9b43982f7"
            ]
        ],
        "info": "Test the GET '_info' property of core, using the msg:\n\n         payload: {\n            device: \"_core\",\n            property: \"version\",\n            }\n\n Returns last list of modules and devices in use or 'none'\n----------------------\nExpected result\n\n     TX: GET fake core/version\n    \nthen: \n\nBefore you use an _info(SET) command you get a string, the CORE version.\n\n     [\"RX: core/version\",\"2.2.2\"]\n\nAfter any _info(SET) command you get an object, the last data\ni.e. same response as last SET (see 'SET info' test).\n\n"
    },
    {
        "id": "db80399bae5b2247",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "GET _heartbeat",
        "props": [
            {
                "p": "payload.device",
                "v": "_core",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_heartbeat",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 2560,
        "wires": [
            [
                "c29e36c9b43982f7"
            ]
        ],
        "info": "Test a GET _heartbeat property of core.\n  \n      payload: {\n           device: \"_core\",\n           property: \"_heartbeat\"\n           }   \n         \n- Returns the last '_heartbeat' time.\n\nIN global.alldevices the default definition is:\n\n               {\n                    \"dp\": \"_heartbeat\",\n                    \"hide\": \"R\",\n                    \"capability\": \"RO\",\n                    \"typefield\": \"TSTAMP2TIME\"\n                }\n               \nThis property 'PUSH's at regular frequence (see 'heartbeat' node). The used can only GET last PUSHed value (in global.alldevices capability: \"RO\", i.e. 'read only') .\n\nnote:\n - \"typefield\": \"TSTAMP2TIME\" defines the decoding data function.\n - \"hide\": \"R\" to not save in DB _heartbeat records.\n \n----------------------\nExpected result\n\n     \"TX: GET fake core/_heartbeat\"\nthen\n     [ \"RX: core/_heartbeat\", \"09:27:31\" ]  \n"
    },
    {
        "id": "8cd1af2b345dd6c9",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "start delay (core)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 155,
        "y": 220,
        "wires": [
            [
                "300a5feb15d1266a"
            ]
        ],
        "icon": "node-red/trigger.svg",
        "l": false
    },
    {
        "id": "6b86cce31b10d03e",
        "type": "function",
        "z": "9926dce981094007",
        "name": "core flow startup",
        "func": "// Run as soon as possible after all 'On Start' and 'Global Config'.\n// note: the run order of all 'Global config' and all 'On Start' is undefined.\n// So, if some 'On Start' function  requires 'Global Config' data, place it there.\n// note: the delay for CORE (0.1 s) is less than other modules (0.5) (o.s. dependent, maybe adjust)\n// This node is required by any module. Goals:\n//   - updates global.modules\n//   - inizializes global.tuyastatus with all dps and default values\n// --------------------------------------------------- standard\nconst VERSION = \"2.2.2\";\nconst asDEVICE = \"_core\";\n// ------------------------\n// SONE ASSERTS, just in case....\n\nif (!(context.global.alldevices)) {\n  node.err([\"ASSERT fail: 'context.global.alldevices' NOT SET!.\"]);\n  return null;\n}\nif (!(global.get('instance_name'))) {\n  node.warn([\"ASSERT fail: 'global.instance_name' NOT SET!.\"]);\n  return null;\n}\nif (!(global.get('remotemap'))) {\n  node.warn([\"ASSERT fail: 'global.remotemap' NOT SET!.\"]);\n  return null;\n}\n\n// --------------------- \n// access stuff\nvar oDev = context.global.alldevices.getODev(asDEVICE, \"fake\");\nif (oDev === undefined) {\n    node.warn(\"[startup] ERROR: not found the device '\" + asDEVICE + \"' in global.alldevices.\");\n    return;\n}\nvar pmDevName = context.global.alldevices.getDevName(oDev);\nlet asMODULE = \"modules.\" + pmDevName;\nglobal.set(asMODULE, VERSION);  // update modules\n\n// ---------------- inizializes global tuyastatus\nlet tstatus = \"tuyastatus['\" + pmDevName + \"']\";\n// init using only _connected (not in alldevices), so does cleanup\nglobal.set(tstatus, { _connected: true });\n// init all GETable dps with default value\noDev.dps.forEach(adp => {\n    if (['RW', 'WW', 'GW', 'RO', 'UNK', 'PUSH', undefined].includes(adp.capability)) {\n        // this required to handle spaces un usr-names\n        let dpname = \"['\" + (adp.name ? adp.name : adp.dp) + \"']\";\n        switch (adp.dp) {     // some special init:   \n            case \"_name\":\n                global.set(tstatus + dpname, global.get(\"instance_name\"));\n                break;\n            case \"_info\":\n                global.set(tstatus + dpname, VERSION);\n                break;\n\n            default:  // standard init uses 'none'\n                global.set(tstatus + dpname, \"none\");\n        }\n    }\n});\n// --------------------------------------------- standard processing ends\n// here more  special device fields\n//\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// nothing to do\n",
        "finalize": "global.set(\"modules.core\", undefined);\nreturn;",
        "libs": [],
        "x": 860,
        "y": 220,
        "wires": [
            []
        ],
        "info": "## Programmer's note on startup.\n\nThe flows does the required startup for CODE device.\n\n- init the global 'modules' structure setting name and version.\n- init the `tuyastatus` global structure with all dPs, using 'none' or default values.\n\n\nnote:\nIf the \"coresetup\" test fails, you get the message \"STARTUP ERROR: adjust this startup delay.\"\nIn this case fine tune the start delay of  \"xxxx flow startup\" nodes (function of host performances)\nExample: core = 0.1 (minimal); other modules: on WIN11 = 0.4, on ANDROID = 1"
    },
    {
        "id": "c8d5bd45c7e876f6",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "GET core SCHEMA",
        "props": [
            {
                "p": "payload.device",
                "v": "_core",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 2620,
        "wires": [
            [
                "c29e36c9b43982f7"
            ]
        ],
        "info": "Test a GET SCHEMA property of core.\n````  \n      payload: {\n           device: \"_core\",\n           }   \n````         \n- Equivalent to\n````\n    for any 'core' GETtable property:\n       do GET property\n````\n----------------------\n\nExpected result\n\n    TX: GET SCHEMA: fake core\n    \n    \nthen: \n\n    [\"RX: core/_DBase\",true]\n    [\"RX: core/_heartbeat\",\"09:10:49\"]    // variable\n    [\"RX: core/version\",\"2.2.2\"]          // can be different after a SET(_info)\n"
    },
    {
        "id": "31f875d51478d0bd",
        "type": "delay",
        "z": "9926dce981094007",
        "name": "",
        "pauseType": "delay",
        "timeout": "150",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1510,
        "y": 2000,
        "wires": [
            [
                "9057ed1d0106ebe8"
            ]
        ],
        "info": "little delay to allow startup run.\n"
    },
    {
        "id": "b91e95ea337cdfc2",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "Core properties tests",
        "info": "see documentation in all inject nodes",
        "x": 210,
        "y": 2340,
        "wires": []
    },
    {
        "id": "51e884fcd7f52541",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "REST:     http://localhost:1984/tuyaDAEMON?device=core&property=_info&value=ok",
        "info": "Use this URL in a browser. You must update server and port.\n\nEspected response:\n\n {\"device\":\"core\",\"property\":\"version\",\"remote_from\":\"DEVPC\",\"status\":\"sent\"} (JSON)\n \n note: it is a SET, always the immediate REST response is 'sent'.\n You can later use a GET to get the values.",
        "x": 1120,
        "y": 2400,
        "wires": []
    },
    {
        "id": "0732b4118896cd23",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "REST:     http://localhost:1984/tuyaDAEMON?device=core&property=_info",
        "info": "Use this URL in a browser. You must update server and port.\n\nEspected response (JSON) (after a SET):\n     { \n      \"remote_from\":\"DEVPC\",\n      \"device\":\"core\",\n      \"property\":\"version\",\n      \"value\": {\n          \"devices\":{\n              \"real\":[],\n              \"virtual\":[],\n              \"fake\":[\"core\"]\n              },\n           \"core\":\"2.2.0\"\n           }\n      }\n",
        "x": 1090,
        "y": 2440,
        "wires": []
    },
    {
        "id": "15473c457d67c88c",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "REST:     http://localhost:1984/tuyaDAEMON?device=core&property=_DBase",
        "info": "Use this URL in a browser. You must update server and port.\n\nEspected response:\n\n{\"device\":\"core\",\"property\":\"_DBase\",\"remote_from\":\"DEVPC\",\"value\":true} (JSON)\n \n",
        "x": 1100,
        "y": 2500,
        "wires": []
    },
    {
        "id": "d7f47bcb5d75099f",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "REST:     http://localhost:1984/tuyaDAEMON?device=core&property=_heartbeat",
        "info": "Use this URL in a browser. You must update server and port.\n\nEspected response:\n\n{\"device\":\"core\",\"property\":\"_heartbeat\",\"remote_from\":\"DEVPC\",\"value\":\"20:58:56\"} (JSON)\n \n",
        "x": 1110,
        "y": 2560,
        "wires": []
    },
    {
        "id": "6446313b68d278be",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "REST:     http://localhost:1984/tuyaDAEMON?device=core",
        "info": "Use this URL in a browser. You must update server and port.\n\nEspected response (JSON):\n\n         {\n         \"remote_from\":\"DEVPC\",\n         \"device\":\"core\",\n         \"schema\":{\n             \"_connected\":true,\n             \"_DBase\":true,\n             \"_heartbeat\":\"20:59:56\",\n             \"version\":{\n                  \"devices\":{\n                     \"real\":[],\n                     \"virtual\":[],\n                     \"fake\":[\"core\"]\n                     },\n                  \"core\":\"2.2.0\"\n                  },\n             \"_t\":1648065596\n             }\n         }",
        "x": 1040,
        "y": 2620,
        "wires": []
    },
    {
        "id": "5b43d91e20cbe569",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "Same tests using REST (readme)",
        "info": "All tuyaDEAMON commads and events can be handled via http REST\n\nREST URL (update the host:port to select your tuyaDEAMON instance):\n````    \n  http://<localhost:1984>/tuyaDAEMON[?device=<device>[&property=<property>[&value=<JSON value>]]]\n````\n\nnote:\n1. REST commands are handled only on local instance. 'remote' not implemented.\n\n2. Special REST case, only   `http://<localhost:1984>/tuyaDAEMON` \n   Response, JSON device list (from global.tuyastatus keys):\n   \n````\n                 {\n                 \"remote_from\":\"DEVPC\",\n                 \"list\":[\n                     \"core\"\n                     ]\n                 }\n````\n3. else as standard tuyaDEAMON SCHEMA, GET, SET commands.\n\nExamples tested using 'chrome' as browser.\n\n\n\n",
        "x": 950,
        "y": 2340,
        "wires": []
    },
    {
        "id": "020dc10ec65537fc",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "TESTING CORE SHARE commands (readme)",
        "info": "Testig SHARE command (share IN) core function.\n\n\n**tuyaDEAMON user share**\n    \n```\n     \"info\": {                     \n                  \"\"        // any, used as 'IN parameters' into the expressions\n             }\n     \"share\": [{\n        \"test\": [                                      // optional: default true\n           `condition-string-1`        // eval(condition-string-1) => true|false          \n            ... more test strings (AND) ... ],\n        \"action\": [{                                  // standard command fields\n            \"remote\"  : \"NAMEXX\" | null,                                    // optional\n            \"device\"  : @expession | string | null | undefined,\n            \"property\": @expession | string | null | undefined,    \n            \"value\"   : @expession | boolean | int | string | object | null | undefined\n             } ... more actions (sequence)...]\n         } ... more {(test[],) action[]} (selection) ...\n      ]\n    \n```\nSpecial rules of evaluation for action.device (and property, value) to build the actual cammand:\n    \n```\n    share.action.device = @expession       => command.payload.device = eval(expession)\n    share.action.device = string (object)  => command.payload.device = share.action.device\n    share.action.device = null             => command.payload.device = undefined\n    share.action.device = undefined|missed => command.payload.device = info.device || undefined.\n````\n- [see definition](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices#share-actions)\n- [see use](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-as-event-processor#share-and-command-chains)\n\nThis example build an user 'share' message: see node description.\n",
        "x": 290,
        "y": 3100,
        "wires": []
    },
    {
        "id": "66de2535a87b4f47",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "user share",
        "props": [
            {
                "p": "info.start",
                "v": "20:00:00",
                "vt": "str"
            },
            {
                "p": "share",
                "v": "[{\"test\":[\"tuyastatus.core._heartbeat > msg.info.start\"],\"action\":[{\"device\":\"_core\",\"property\":\"_info\"}]},{\"test\":[\"tuyastatus.core._heartbeat < msg.info.start\"],\"action\":[{\"device\":\"_core\",\"property\":\"_DBase\"}]}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 3160,
        "wires": [
            [
                "b2fc4f1aee2c780b"
            ]
        ],
        "info": "Sample 'share'\n\nUsing a 'share' to build a conditional command.\n\nrule: \n\n     if (actual-time > info.start (e.g. \"11:00:00\")) do:\n            GET   core._info()\n     else do:\n            GET   core._DBase()\n\nnote: this implementation requires _heartbeat running:\n\n     \"test\": [\"tuyastatus.core._heartbeat > msg.info.start\"],\n\n\nTo use a time test unrelated to _heartbeat, replace with:\n\n     \"test\": [\"var xnow = new Date();\n               (xnow.toLocaleTimeString() > msg.info.start)\"],\n"
    },
    {
        "id": "b2fc4f1aee2c780b",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "send to core.share IN",
        "mode": "link",
        "links": [
            "2b1bbabc29e7e844"
        ],
        "x": 540,
        "y": 3160,
        "wires": [],
        "l": true
    },
    {
        "id": "300a5feb15d1266a",
        "type": "function",
        "z": "9926dce981094007",
        "name": "*ENCODE/DECODE user library",
        "func": "// constructs two global objects without data (function libraries):\n\ncontext.global.dataencode = global.get(\"dataencode\");\ncontext.global.datadecode = global.get(\"datadecode\");\n\n// -- CUSTOMIZATION: ===============================\n// Data codification is function of the device and dps. \n// New devices can require new functions.\n// You can add new decoding/encoding methods\n//   or update existing ones for localization.\n// The basic objectif is to get data in same format\n//   as in smartHome interface and to use SI units.\n\n//============= here DECODE functions (data FROM devices) \n// to format values from device messages to standard form\n// add new functions to array as required\n\ncontext.global.datadecode.BYTESMALLFLOAT = function (value) {\n    // exanple: C3H = 195 => 19.5  (°C: units as from device setup)\n    // required by thermostat, meter\n    return (Number(value) / 10.0);\n};\n\ncontext.global.datadecode.INTE2FLOAT = function (value) {\n    // for now, only DECODE, required by  AC meter\n    return (Number(value) / 100.0);\n};\n\ncontext.global.datadecode.INTE3FLOAT = function (value) {\n    // for now, only DECODE, required by AC power meter\n    return (Number(value) / 1000.0);\n};\n\ncontext.global.datadecode.BOOLEANONOFF = function (value) {\n    // transform (false, 0, \"\")/1 , to 'OFF'/'ON'\n    // en: can be localized for internationalization\n    // fallback: in case of bad value returns the 'value'.\n    return (!value ? \"OFF\" : (value == 1 ? \"ON\" : value));\n};\n\ncontext.global.datadecode.BOOLEANOPENCLOSE = function (value) {\n    // transform (false, 0, \"\")/1, to 'OPEN'/'CLOSE'\n    // en: can be localized for internationalization\n    // fallback: in case of bad value returns the 'value'.\n    return (!value ? \"CLOSE\" : (value == 1 ? \"OPEN\" : value));\n};\n\ncontext.global.datadecode.ENUMONOFFHOLD = function (value) {\n    // transform 0/1/2 to OFF/ON/HOLD\n    // changed to use same strings as many switches\n    // en: can be localized for internationalization off|on|memory\n    // fallback: in case of bad value returns the 'value'.\n   return (value == 0 ? \"off\" : (value == 1 ? \"on\" : (value == 2 ? \"memory\" : value)));\n};\n\ncontext.global.datadecode.STRUCTARGETTEMP = function (value) {\n    // transform from base64(Uint8Array[17]) to object:\n    //   {\"count\":4,\n    //    \"changes\":[{\"time\":\"00:00\",\"temp\":15.5},\n    //              {\"time\":\"07:00\",\"temp\":20},\n    //              {\"time\":\"16:30\",\"temp\":21},\n    //              {\"time\":\"21:00\",\"temp\":16.5}]}\n    // required by thermostat temperature planning\n    function minTohm(min) { // local function\n        const h = (~~(min / 60));\n        const m = min % 60;\n        return (h > 9 ? h : '0' + h) + \":\" + (m > 9 ? m : '0' + m);\n    }\n\n    const b = Buffer.from(value, \"base64\");\n    const n = b.readUInt8(0);\n    let result = {\n        count: n,\n        changes: []\n    };\n    for (var i = 0; i < n; i++) {\n        result.changes[i] = {\n            time: minTohm(b.readUInt16BE(i * 4 + 1)),\n            temp: b.readUInt16BE(i * 4 + 3) / 10\n        };\n    }\n    //     return (JSON.stringify(result));  // better object\n    return (result);\n}; // ends function\n\ncontext.global.datadecode.ARRAY8INT = function (value) {\n    // transform  base64(Uint8Array[X]) to UInt8[]\n    // X=24 =>  [16,16,15,15,14,14,16,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\" (string)\n    // required by thermostat\n    const b = Buffer.from(value, \"base64\");\n    return (\"[\" + new Uint8Array(b).toString() + \"]\"); \n};\n\ncontext.global.datadecode.STRUCTTIMEHMS = function (value) {\n    // tentative, on work\n    // transform  base64(Uint16Array[3]) to string \"HH:MM:SS\" ??\n    // required by thermostat ??\n    const b = Buffer.from(value, \"base64\");\n    const uint16arr = new Uint16Array(\n        b.buffer,\n        b.byteOffset,\n        b.length / Uint16Array.BYTES_PER_ELEMENT);\n    return ((uint16arr[0] > 9 ? uint16arr[0] : \"0\" + uint16arr[0]) + \":\" +\n        (uint16arr[1] > 9 ? uint16arr[1] : \"0\" + uint16arr[1]) + \":\" +\n        (uint16arr[2] > 9 ? uint16arr[2] : \"0\" + uint16arr[2]));\n};\n\ncontext.global.datadecode.STRUCTCOLOUR = function (value) {\n    //  Transforms  RRGGBB0000FFFF to object:\n    //      {   \"hex\":\"RRGGBBHHHHSSVV\" }\n    //  or: {   \"r\": RR,\n    //          \"g\": GG,\n    //          \"b\": BB\n    //          \"h\":HHHH,\n    //          \"s\": SS,\n    //          \"v\": VV  }\n    // 100% = 0x64\n    // required by humidifier led\n    const b = Buffer.from(value, 'hex');\n    var result = {\n        hex: value,\n    };\n    result[\"r\"] = b.readUInt8(0);\n    result[\"g\"] = b.readUInt8(1);\n    result[\"b\"] = b.readUInt8(2);\n    result[\"h\"] = b.readUInt16BE(3)\n    result[\"s\"] = b.readUInt8(5);\n    result[\"v\"] = b.readUInt8(6);\n    return (result);\n};\n\ncontext.global.datadecode.STRUCTELERT = function (value) {\n    // FRor breakerDIN device, ip 6, to object\n    const b = Buffer.from(value, \"base64\");\n    let result = {\n    };\n    result[\"V\"] = b.readUInt16BE(0) / 10.0;\n    result[\"Leack\"] = b.readUInt16BE(2) / 1000.0;\n    result[\"A\"] = b.readUInt16LE(4) / 1000.0;\n    result[\"W\"] = b.readUInt16BE(6) / 1000.0;\n    return (result);\n};\n\ncontext.global.datadecode.ENUMHIGHGOODLOW = function (value) {\n    // transform 0/1/2 to LOW/GOOD/HIGH (or  unchnged)\n    // en: can be localized for internationalization\n    return (value == 0 ? \"LOW\" : (value == 1 ? \"GOOD\" : (value == 2 ? \"HIGH\" : value)));\n};\n\ncontext.global.datadecode.RECMODE = function (value) {\n    // transforms string '1'/'2' to strings 'continuous'/'events'\n    // it|en: can be localized for internationalization\n    return (value == 2 ? \"continuous\" : (value == 1 ? \"events\" : value));\n};\n\ncontext.global.datadecode.STRUCTINCH = function (value) {\n    // switch inching value struct\n    const b = Buffer.from(value, \"base64\");\n    let result = {\n        inching: (b.readUInt8(0) !== 0),\n        delay: b.readUInt16BE(1)\n    };\n    return (result);\n};\n\ncontext.global.datadecode.STRUCTRAND = function (value) {\n    // switch random data struct\n    function minTohm(min) { // local function\n        const h = (~~(min / 60));\n        const m = min % 60;\n        return (h > 9 ? h : '0' + h) + \":\" + (m > 9 ? m : '0' + m);\n    }\n    function daystring(val) {\n        // from 1 byte return sting like 'DL--G--' (it)\n        // week starting on sunday (domenica)\n        var res = \"\";\n        const week = \"DLMMGVS\"; // en: SMTWTFS\n        let mask = 1;\n        for (var i = 0; i < 7; i++) {\n            res += (val & mask) ? week.charAt(i) : '-';\n            mask = mask << 1;\n        }\n        return (res);\n    }\n    if (value.length < 5)\n        return (value);\n    const b = Buffer.from(value, \"base64\");\n    var randdef = [];\n    for (var i = 0; i < b.length / 6; i++) {\n        var o = {\n            active: (b.readUInt8(i * 6 + 0) !== 0),\n            days: daystring(b.readUInt8(i * 6 + 1)),\n            start: minTohm(b.readUInt16BE(i * 6 + 2)),\n            end: minTohm(b.readUInt16BE(i * 6 + 4))\n        };\n        randdef[randdef.length] = o;\n    }\n    return randdef;\n};\n\ncontext.global.datadecode.STRUCTREPEAT = function (value) {\n    // switch repeat data\n    function minTohm(min) { // local function\n        const h = (~~(min / 60));\n        const m = min % 60;\n        return (h > 9 ? h : '0' + h) + \":\" + (m > 9 ? m : '0' + m);\n    }\n    function daystring(val) {\n        // from 1 byte return sting like 'DL--G--' (it)\n        // week starting on sunday (domenica)\n        let days = \"\";\n        const week = \"DLMMGVS\"; // en: SMTWTFS\n        let mask = 1;\n        for (var i = 0; i < 7; i++) {\n            days += (val & mask) ? week.charAt(i) : '-';\n            mask = mask << 1;\n        }\n        return (days);\n    }\n    if (value.length < 5)\n        return (value);\n    const b = Buffer.from(value, \"base64\");\n    var result = [];\n    for (var i = 0; i < b.length / 10; i++) {\n        var o = {\n            active: (b.readUInt8(i * 10 + 0) !== 0),\n            days: daystring(b.readUInt8(i * 10 + 1)),\n            start: minTohm(b.readUInt16BE(i * 10 + 2)),\n            end: minTohm(b.readUInt16BE(i * 10 + 4)),\n            on: minTohm(b.readUInt16BE(i * 10 + 6)),\n            off: minTohm(b.readUInt16BE(i * 10 + 8))\n        };\n        result[result.length] = o;\n    }\n    return (result);\n};\n\ncontext.global.datadecode.SDSPACES = function (value) {\n    // transform SD data <total>|<used>|<free> to object.\n    // en: can be localized for internationalization\n    var sizes = value.split(\"|\");\n    var result = {\n        total: new Intl.NumberFormat().format(Number(sizes[0])),\n        used: new Intl.NumberFormat().format(Number(sizes[1])),\n        free: new Intl.NumberFormat().format(Number(sizes[2])),\n    }\n    return (result);\n};\n\ncontext.global.datadecode.TSTAMP2TIME = function (value) {\n    // for now, only DECODE\n    // transform a timestanp to local time string.           \n    const tx = new Date(value);\n    //          return (tx.toLocaleTimeString());\n    return (tx.toLocaleTimeString([], { \"hour12\": false }));\n};\n\n\n\n\n\n// ===================================== here ENCODE functions (user data TO device) \n// same name as decode function\n// encode functions are not required for PUSH or RO values.\n// Very tolerant: all accepts objects AND JSON strings.\n// String in different languages.\n// Try-catch or fallback to catch bad user data.\n\ncontext.global.dataencode.BYTESMALLFLOAT = function (value) {\n    // transforms temperature to byte: 19.5° => 195 => C3H\n    // required by thermostat\n    var x = value;\n    if (typeof value === 'string')\n        x = Number.parseFloat(value);\n    if (Number.isNaN(x)) {\n        throw \"'value' is not a number!\";\n    }\n    return ~~(x * 10.0);\n};\n\n\ncontext.global.dataencode.INTE2FLOAT = function (value) {\n    var x = value;\n    if (typeof value === 'string')\n        x = Number.parseFloat(value);\n    if (Number.isNaN(x)) {\n        throw \"'value' is not a number!\";\n    }\n    return ~~(x * 100.0);\n};\n\ncontext.global.dataencode.INTE3FLOAT = function (value) {\n    var x = value;\n    if (typeof value === 'string')\n        x = Number.parseFloat(value);\n    if (Number.isNaN(x)) {\n        throw \"'value' is not a number!\";\n    }\n    return ~~(x * 1000.0);\n};\n\n\ncontext.global.dataencode.BOOLEANONOFF = function (value) {\n    // transforms 'ON'/'OFF' to boolean  true/false \n    // (very tolerant :  see https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons)\n    // it|en: can be localized for internationalization\n    // false is: false, \"\", 0, null, 'OFF','FALSE','NO', else true\n    if (value === true) return true;\n    if ((value === false) || (value == 0) || (value == null) || (value.toUpperCase() === \"OFF\") || (value.toUpperCase() === \"FALSE\") || (value.toUpperCase() === \"NO\"))\n        return false;\n    return true;\n};\n\ncontext.global.dataencode.BOOLEANOPENCLOSE = function (value) {\n    // transforms 'OPEN'/'CLOSE' to boolean  true/false\n    // it|en: can be localized for internationalization\n    // false is: false, 0, null, 'CLOSE','CHIUSA', else true\n   if (value === true) return true;\n    if ((value == 0) || (value == null) || (value.toUpperCase() === \"CLOSE\") || (value.toUpperCase() === \"CHIUSA\"))\n        return false;\n    return true;\n};\n\ncontext.global.dataencode.ENUMONOFFHOLD = function (value) {\n    // transforms 'OFF'/'ON'/'HOLD' to string '0'/'1'/'2'\n    // it|en: can be localized for internationalization\n    // 0 is:  0, null, 'OFF','SPENTO', else\n    // 1 is:  1, 'ON', 'ACCESO' else returns 2\n\n\n    if ((value == 0) || (value == null) || (value.toUpperCase() === \"OFF\") || (value.toUpperCase() === \"SPENTO\") || (value.toUpperCase() === \"NO\"))\n        return \"0\";\n    if ((value == 1) || (value.toUpperCase() === \"ON\") || (value.toUpperCase() === \"ACCESO\") || (value.toUpperCase() === \"YES\"))\n        return \"1\";\n    return \"2\";\n};\n\ncontext.global.dataencode.STRUCTARGETTEMP = function (value) {\n    // transform the JSON structure:\n    //   {\"count\":4,\n    //    \"changes\":[{\"time\":\"00:00\",\"temp\":15.5},\n    //              {\"time\":\"07:00\",\"temp\":20},\n    //              {\"time\":\"16:30\",\"temp\":21},\n    //              {\"time\":\"21:00\",\"temp\":16.5}]}\n    // to  base64(Uint8Array[17])\n    // required by thermostat\n\n    function hmTomin(hm) { // local function\n        const pieces = hm.split(':');\n        return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n    }\n    \n    function mult10(value) {\n        return ~~(Number.parseFloat(value) * 10.0)\n    }\n\n    var o = value;\n    if (typeof value === 'string')\n        o = JSON.parse(value);\n    //      node.warn(\"in code \" + value);\n    if (o.count !== undefined) {\n        var buf = Buffer.alloc(o.count * 4 + 1);\n\n        buf.writeInt8(o.count, 0);\n        for (var i = 0; i < o.count; i++) {\n            buf.writeInt16BE(hmTomin(o.changes[i].time), i * 4 + 1);\n            buf.writeInt16BE(mult10(o.changes[i].temp), i * 4 + 3);\n        }\n        return buf.toString('base64');\n    } else {\n        throw \"'value' is not a {time,T}[4] struct\";\n    }\n};\n\ncontext.global.dataencode.ARRAY8INT = function (value) {\n    // Transforms a UInt8Array, e.g.[17,16,16,16,15,15,17,18,19,19,18,18,18,18,17,16,17,18,18,0,0,0,0,0]\n    // as object or JSON string\n    // to  coded64 data => ERAQEA8PERITExISEhIREBESEgAAAAAA\n    // required by thermostat\n    let o = value;\n    if (typeof value === 'string')\n        o = JSON.parse(value);\n    if (Array.isArray(o)) {\n        const b = Buffer.from(o);\n        return b.toString('base64');\n    } else {\n        throw \"'value' is not a (json) array !\";\n    }\n};\n\ncontext.global.dataencode.STRUCTTIMEHMS = function (value) {\n    //  Transforms a time \"HH:MM:SS\"\n    //  in coded data base64(Uint16Array[3])\n    //  tentative, on work\n    const pieces = value.split(':');\n    let buf = Buffer.alloc(6);\n    buf.writeInt16LE(parseInt(pieces[0]), 0);\n    buf.writeInt16LE(parseInt(pieces[2]), 2);\n    buf.writeInt16LE(parseInt(pieces[4]), 4);\n    return buf.toString('base64');\n};\n\ncontext.global.dataencode.STRUCTCOLOUR = function (value) {\n    // accepts: JSON or object\n    // encode:\n    //      {   \"hex\":\"RRGGBBHHHHSSVV\" }\n    //  or: {   \"r\": RR,\n    //          \"g\": GG,\n    //          \"b\": BB\n    //        ( \"h\":HHHH,\n    //          \"s\": SS,\n    //          \"v\": VV )  }\n    // 100% = 0x64\n    //  required by humidifier led\n    var o = value;\n    if (typeof value === 'string')\n        o = JSON.parse(value);\n    if ((o.hex !== undefined) && (typeof o.hex === 'string') && (o.hex.length == 14))\n        return (o.hex);\n    if ((o.r === undefined) || (o.g === undefined) || (o.b === undefined)) {\n        throw \"'value' is not valid hex|rgb object!\";\n    }\n    var buf = Buffer.alloc(7);\n    buf.writeUInt8(o.r, 0);\n    buf.writeUInt8(o.g, 1);\n    buf.writeUInt8(o.b, 2);\n    if (o.h !== undefined) {\n        buf.writeUInt16BE(o.h, 3);\n        buf.writeUInt8(o.s, 5);\n        buf.writeUInt8(o.v, 6);\n    } else {\n        buf.writeUInt16BE(0, 3);\n        buf.writeUInt8(255, 5); //fixed ?\n        buf.writeUInt8(255, 6); //fixed ?\n    }\n    return buf.toString('hex');\n};\n\ncontext.global.dataencode.ENUMHIGHGOODLOW = function (value) {\n    // transforms 'LOW'/'GOOD'/'HIGH' to string '0'/'1'/'2'\n    // it|en: can be localized for internationalization\n    // required by switch\n    // 0 is: 0, null, 'LOW','BASSA' else\n    // 2 is: 2, 'HIGH', 'ALTA' else returns 1. \n    if ((value == 0) || (value == null) || (value.toUpperCase() === \"LOW\") || (value.toUpperCase() === \"BASSA\"))\n        return \"0\";\n    if ((value.toUpperCase() === \"HIGH\") || (value == 2) || (value.toUpperCase() === \"ALTA\"))\n        return \"2\";\n    return \"1\";\n};\n\ncontext.global.dataencode.RECMODE = function (value) {\n    // transforms 'continuous'/'events' to string '1'/'2'\n    // it|en: can be localized for internationalization\n    // required by switch\n    if ((value == 1) || (value.toUpperCase() === \"EVENTS\") || (value.toUpperCase() === \"EVENTI\"))\n        return \"1\";\n    return \"2\";\n};\n\ncontext.global.dataencode.STRUCTINCH = function (value) {\n    // required by switch\n    var o = value;\n    if (typeof value === 'string')\n        o = JSON.parse(value);\n    var buf = Buffer.alloc(3);\n    buf.writeUInt8((o.inching) ? 1 : 0, 0);\n    buf.writeUInt16BE(o.delay, 1);\n    return buf.toString('base64');\n};\n\ncontext.global.dataencode.STRUCTRAND = function (value) {\n    function hmTomin(hm) { // local function\n        const pieces = hm.split(':');\n        return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n    }\n    function dayscode(val) {\n        let result = 0;\n        let mask = 1;\n        for (var i = 0; i < 7; i++) {\n            result |= (val.charAt(i) == '-') ? 0 : mask;\n            mask = mask << 1;\n        }\n        return (result);\n    }\n    var o = value;\n    if (typeof value === 'string')\n        o = JSON.parse(value);\n    var buf = Buffer.alloc(6 * o.length);\n    for (let i = 0; i < o.length; i++) {\n        buf.writeUInt8((o[i].active) ? 1 : 0, i * 6 + 0);\n        buf.writeUInt8(dayscode(o[i].days), i * 6 + 1);\n        buf.writeUInt16BE(hmTomin(o[i].start), i * 6 + 2);\n        buf.writeUInt16BE(hmTomin(o[i].end), i * 6 + 4);\n    }\n    return buf.toString('base64');\n};\n\ncontext.global.dataencode.STRUCTREPEAT = function (value) {\n    // required by  switch\n    function hmTomin(hm) { // local function\n        const pieces = hm.split(':');\n        return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n    }\n    function dayscode(val) {\n        let result = 0;\n        let mask = 1;\n        for (var i = 0; i < 7; i++) {\n            result |= (val.charAt(i) == '-') ? 0 : mask;\n            mask = mask << 1;\n        }\n        return (result);\n    }\n\n    let o = value;\n    if (typeof value === 'string')\n        o = JSON.parse(value);\n    let buf = Buffer.alloc(10 * o.length);\n    for (let i = 0; i < o.length; i++) {\n        buf.writeUInt8((o[i].active) ? 1 : 0, i * 10 + 0);\n        buf.writeUInt8(dayscode(o[i].days), i * 10 + 1);\n        buf.writeUInt16BE(hmTomin(o[i].start), i * 10 + 2);\n        buf.writeUInt16BE(hmTomin(o[i].end), i * 10 + 4);\n        buf.writeUInt16BE(hmTomin(o[i].on), i * 10 + 6);\n        buf.writeUInt16BE(hmTomin(o[i].off), i * 10 + 8);\n    }\n    return buf.toString('base64');\n};\n\ncontext.global.dataencode.SDSPACES = function (value) {\n    // for now, only DECODE\n    node.warn(\"ERROR: SDSPACES only decode()\")\n    return (value);\n};\n\ncontext.global.dataencode.TSTAMP2TIME = function (value) {\n    // for now, only DECODE\n    node.warn(\"ERROR: TSTAMP2TIME only decode()\")\n    return (value);\n};\n\n\n//---  do not change here ------------------    \ndelete (context.global.dataencode[\"user defined\"]);\ndelete (context.global.datadecode[\"user defined\"]);\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "ffe2e8bec05a96e4"
            ]
        ],
        "info": "CUSTOMIZATION\n\nThis node builds 2 singleton objects (function arrays):\n- `context.global.dataencode`\n- `context.global.datadecode`\n\nA new device can require two functions for some `dP`s: \n - `decode` (to GET data FROM device): `user = decode(value)`\n - `encode` (to SET user data TO device): `value = encode(user)`.\n\nGoals:\n - to change value units (TuyaDAEMON uses SI units)\n - to use code64 structures and arrays\n - to change enum to user-friendy values\n - etc...\n\nThis is under user control \n- By default you find a collection of useful functions for [known devices](https://github.com/msillano/tuyaDAEMON/tree/main/devices), which you can use as template.\n- Edit this node code to add a new custom decode/encode functions:\n````\ncontext.global.datadecode.CODENAME = function (value) {\n    .....\n     return(uservalue);\n    }:\n\ncontext.global.dataencode.CODENAME = function (uservalue) {\n    .....\n     return(value);\n    }:\n````\n- Use same name for both functions (e.g. CODENAME).\n\nnote: in case of bad input data, this functions can throw an error:\n````\n  if (....) {\n        throw \"'value' is not valid hex|rgb object!\";\n        }\n````\nthen: \n- add the new CODENAME in `tuyahome.lookupdecode` DB table (if you use tuyadaemon-toolkit)\n- now you can use CODENAME in global.alldevices, in the 'dp.typefield'"
    },
    {
        "id": "0b580db2485c4794",
        "type": "function",
        "z": "9926dce981094007",
        "name": "*pass-all",
        "func": "\n// This node does nothing.\nreturn msg;\n// You can replace it with a 'delay' node to limit the rate, \n// but only for rate less than 600 message/10 s. \n// (actual max rate 2'400 msg/ 10 s on my PC,  using _doBenchmark and _zeroTast)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1660,
        "wires": [
            [
                "f361a3050a388a21",
                "35375a67e730402c"
            ]
        ],
        "info": "Thi node do nothing.\n\nIt is possible to repalace it wit a "
    },
    {
        "id": "ffe2e8bec05a96e4",
        "type": "function",
        "z": "9926dce981094007",
        "name": "Global Objects constructor",
        "func": "// constructs 2 global objects (singleton):\ncontext.global.PSEUDODP = global.get(\"PSEUDODP\");\ncontext.global.alldevices = global.get(\"alldevices\");\n\n// adding required methods to context.global.alldevices.\n\n// return the device object\n//  called with user-name|(deviceID|CID)\n//  limit: null (= all, default)|\"real\"|\"virtual\"!\"fake\"\n//  returns: object|undefined (= not found)\ncontext.global.alldevices.getODev = function (id, limit = null) {\n    function _checkobj(list, dx) {\n        var o = list.find(device => device.name === dx);\n        if (o === undefined)\n            o = list.find(device => device.id == dx);\n        if (o === undefined)\n            o = list.find(device => device.cid == dx);\n        return (o);\n    }\n    function _okcheck(lim, branch) {\n        return ((lim === null) || (lim == branch))\n    }\n    // finds ODev       \n    var odev;\n    if (id === undefined) return (odev);\n    if ((odev == undefined) && _okcheck(limit, 'real'))\n        odev = _checkobj(this.real, id);\n    if ((odev == undefined) && _okcheck(limit, 'virtual'))\n        odev = _checkobj(this.virtual, id);\n    if ((odev == undefined) && _okcheck(limit, 'fake'))\n        odev = _checkobj(this.fake, id);\n    return (odev);\n}// given device-object, returns device-name or undefinef\ncontext.global.alldevices.getDevName = function (odev) {\n    if (odev === undefined) return undefined;\n    return (odev.name === undefined ? (odev.cid == undefined ? odev.id : odev.cid) : odev.name);\n}\n//   given device-object, returns connection-name (device or gateway) or undefined \ncontext.global.alldevices.getConnectName = function (odev) {\n    if (odev === undefined) return undefined;\n    if (odev.cid === undefined)\n        return (odev.name === undefined ? odev.id : odev.name);\n    var o_gat = this.real.find(device => device.id === odev.gateway);\n    if (o_gat === undefined) return o_gat;\n    return (o_gat.name === undefined ? o_gat.id : o_gat.name);\n}\n\n// given device-object and a property (name|dp) returns dp-object\ncontext.global.alldevices.getODps = function (odev, property) {\n    if (odev === undefined) return undefined;\n    if (!property) return undefined;\n    if (Array.isArray(odev.dps)) {\n        var p = odev.dps.find(data => ((data.name === property) || (data.dp == property)));\n        return (p);\n    }\n    return (undefined);\n}\n\n// given device-object and a property (name|dp) returns dp-name\ncontext.global.alldevices.getDpsName = function (odev, property) {\n    if (Array.isArray(odev.dps)) {\n        var p = odev.dps.find(data => ((data.name === property) || (data.dp == property)));\n        if (p !== undefined)\n            return (p.name === undefined ? p.dp : p.name);\n    }\n    return (property);\n}\n//  given a msg-std: device + (property + (value)), device-object, DP-object \n//  returns a msg normalized for internal use:\n//  redefined to use with 'tuyastatus' and info\n//  `msg.payload.device   = usr-dev-name|msg.to`\n//  `msg.payload.property = undef|usr-dp-name|msg.infodp`\n//  `msg.payload.value    = undef|any`  \n//  plus, used as keys:\n//    `msg.to     = cid|deviceId`         (mandatory)\n//    `msg.infodp = dp|pseudoDP`          (mandatory)\n//    `msg.hide   = \"\"|\"(K)(C)(E)(R)(T)\"` (visibility, since 2.2.0)\n//  plus, in case of error:\n//     msg.error  =\"ERROR message\"        (abort)\n//     msg.warning=\"WARNING message\"      (continue)\n// use:\n/*\n    var o = context.global.alldevices.getODev(msg.payload.device);\n    var p = context.global.alldevices.getODps(o, msg.payload.property);\n    msg   = context.global.alldevices.normalize( msg, o, p);\n    if (msg.error){\n        node.warn([\"[from-node] \"+ msg.error, msg]);\n        return([null]);\n    }\n    if (msg.warning){\n       node.warn(\"[from-node] \"+ msg.warning);\n    }\n*/\ncontext.global.alldevices.normalize = function (xmsg, Do, Po) {\n    if (!Do) {\n        xmsg['error'] = \"ERROR [normalize]: not found the device '\" + xmsg.payload.device + \"' in global.alldevices.\";\n        return (xmsg);\n    }\n    xmsg.payload.device = (Do.name) ? Do.name : (Do.cid || Do.id);\n    xmsg['to'] = Do.cid || Do.id;\n    if (!this.fake.includes(Do))\n        xmsg['toDev'] = Do.cid ? Do.gateway : Do.id;\n    xmsg['infodp'] = 'schema';\n    if (xmsg.payload.property) {\n        if ((Po === undefined) || (Po.dp === undefined)) {\n            xmsg.infodp = xmsg.payload.property;\n            if (!context.global.PSEUDODP.includes(xmsg.payload.property.toUpperCase()))\n                xmsg['warning'] = \"WARNING [normalize]: In alldevices missed the '\" + xmsg.payload.device + \"':dps[\" + xmsg.payload.property + \"] definition.\";\n        } else {\n            xmsg.infodp = Po.dp.toString();\n            xmsg.payload.property = Po.name || Po.dp;\n        }\n    }\n    if (xmsg['infodp'] === 'schema')\n        delete (xmsg.payload.value);\n    xmsg.hide = ((Do && Do.hide) ? Do.hide : \"\") + ((Po && Po.hide) ? Po.hide : \"\");\n    return (xmsg);\n}\n\n// given a value and a DP-object\n// returns the value encoded or the good type (uses: typefield | type | default rules) )\ncontext.global.alldevices.encodeValue = function (value, dpObj = {}) {\n    if ((value === undefined) || (dpObj === undefined)) return (value);\n    // general values 'null' \n    if ((value === '') || (value === null) || (value === 'NULL') || (value === 'null')) return (null);\n    if ((!dpObj.typefield) || (dpObj.typefield === 'NONE') || (dpObj.typefield === 'NULL')) {\n        try {\n            switch (dpObj.type) {      // type forces output\n                case 'boolean':\n                    return (!((value === false) || (value === 'false') || (value === 'FALSE') || (value === 0)));\n                case 'int':\n                case 'enum':\n                    return (Number(value));\n                case 'string':\n                    return (value.toString());\n                default:              // also undefined: default rules\n                    if (typeof (value) === 'boolean') return (value);\n                    if (value === 'false') return (false);\n                    if (value === 'true') return (true);\n                    return ((parseInt(value) == value) ? parseInt(value) : value);\n                // \"37\" => 37, but \"4.5\" => \"4.5\"\n            }\n        }\n        catch (error) {\n            return ({ error: 'ERROR [encodeValue]: In conversion from value(' + value + ') to type ' + dpObj.type + ': ' + error });\n        }\n    } else {    // try the encode function\n        if (!context.global.dataencode[dpObj.typefield])\n            return ({ error: 'ERROR [encodeValue]: Not found the encode.' + dpObj.typefield + ' function().' });\n        let nval;\n        try {\n            nval = (context.global.dataencode[dpObj.typefield](value));\n        }\n        catch (error) {\n            return ({ error: 'ERROR [encodeValue]: In encode.' + dpObj.typefield + ' function, on value (' + value + '): ' + error });\n        }\n        return (nval);\n    }\n}\n// used as flag: global objects setup\n// Modules using global objects must test this in xxx_flow_setup function\nglobal.set(\"coresetup\", true);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 220,
        "wires": [
            [
                "6b86cce31b10d03e"
            ]
        ],
        "info": "This node builds the global singletons required by TuyaDAEMON:\r\n -  context.global.PSEUDODP \r\n -  context.global.alldevices (data user-defined in Global config)\r\n\r\nAdds methods, defined here, to objects.\r\n- see [TuyaDAEMON setup](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#the-tuyadaemon-three-step-startup-process)\r\n"
    },
    {
        "id": "45e3e0fa30465e4d",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "TESTING CORE Logging process (readme)",
        "info": "Testig event core function.\n\nThis example allow the user to build any event message.\n\n**tuyaDAEMON events** (basic, see `core.logging` node)\n````\nmsg.payload:{     \n        \"remote_from\": undefined|rem-name                  // only if from remote\n        \"deviceId\": deviceID|dev-name       \n        \"data\": {\n            \"dps\":{\n                [dp|dp-name]: value                        // encoded if required\n                ....                                           // one or more DPs\n            }}}}\n\nrules:\nremote_from =  undefined => local instance (remote requires SYSTEM module)  \n                  else (test: in `global.remotemap`?) 'rem-name' else 'UNKNOWN'.\ndeviceId  :  MUST exist in `global.alldevices` else ERROR\ndp|dp-name  :  MUST exist in `global.alldevices` else WARNING\nvalue     :  if `DP.typefield` exists the value is checked by the decode() function, else any.\n````\n\n**case ok:**\n - remote:  NULL (in node `do logging` process: NULL => undefined) or rem-name (from `global.remotemap`)\n - deviceID:    e.g. 'core' or '_core'.\n - propertyPD:  e.g.   `_DBase`, `_heartbeat`...\n - value: Examples\n       ` _DBase`: \"type\": \"boolean\". Accepted: any.\n        `_heartbeat`: \"typefield\": \"TSTAMP2TIME\". Accepted timestamp, i.e. any number > 0 (see core.*ENCODE/DECODE user library node).\n------------------\n\nExpected result (local.code._heartbeat(\"123456789\")) :\n \n      [ \"RX: core/_heartbeat\", \"11:17:36\" ]    \n\nExpected result (ANDROID.code._DBase(\"maybe\")) :\n    \n      [\"ANDROID: RX: core/_DBase\",\"maybe\"]\n \n \n**Error messages:**\n\n bad remote:\n\n      ASSERT fail: 'remote' requires the '_system' module installed.   \n  or:      \n      [\"UNKNOWN: RX: core/_heartbeat\",\"11:17:36\"]\n\n bad deviceID:\n \n      \"ERROR [OUT data]: ADD to alldevices the real/fake deviceId: corex (undefined)\"\n      \n bad propertyDP:\n \n      [\"WARNING [OUT data]: In alldevices missed the 'core':dps[fake] definition.\"]\n\n    then (the unknown DPs are always processed to capture rare events from devices):\n\n      [\"ANDROID: RX: core/fake\",\"maybe\"]\n \n bad value (variable: from decode() function):\n    \n     [\"ANDROID: RX: core/_heartbeat\", \"Invalid Date\"]   \n",
        "x": 290,
        "y": 2720,
        "wires": []
    },
    {
        "id": "92f6afa930604f34",
        "type": "subflow:f30e8140.1bed9",
        "z": "9926dce981094007",
        "name": "",
        "env": [
            {
                "name": "remote",
                "value": "global.instance_name",
                "type": "str"
            },
            {
                "name": "device",
                "value": "_core",
                "type": "str"
            },
            {
                "name": "property",
                "value": "_heartbeat",
                "type": "str"
            },
            {
                "name": "NULL",
                "value": "delete",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 2940,
        "wires": [
            [
                "635758cf7f407cd5"
            ]
        ],
        "info": "xamples\n\n1. GET core.version local:\n\n> remote:   NULL\n> device:   core\n> property: version\n> value:    NULL\n\nExpected result (configuration dependent)\n\n    TX: GET fake 'core'/'version'\n    \nthen: \n\n    [\"RX: 'core/version' object] \n\n2. GET locale device list\n\n > remote:   global.instance_name\n > device:   NULL\n > property: NULL\n > value:    NULL\n\nExpected result (requires system, configuration dependent)\n\n      DEVPC: TX: GET device LIST\n       (DEVPC = actual local instance name)\n      \n      [ \"TX: SET fake HAL@home/_proxy\", object ]\nthen:\n\n      [ \"DEVPC: RX: HAL@home/list\", array[3] ]\n\nexpanded:\n\n    array[2]\n        0: \"DEVPC: RX: HAL@home/list\"\n        1: array[3]\n            0: \"HAL@home\"\n            1: \"core\"\n            2: \"tuya_bridge\"\n"
    },
    {
        "id": "2a573b0d767f0cf8",
        "type": "comment",
        "z": "9926dce981094007",
        "name": "REST:     http://localhost:1984/tuyaDAEMON",
        "info": "",
        "x": 1000,
        "y": 2680,
        "wires": []
    },
    {
        "id": "189cc037b3fca9dc",
        "type": "config",
        "z": "9926dce981094007",
        "name": "*Global CORE config",
        "properties": [
            {
                "p": "alldevices",
                "pt": "global",
                "to": "{\"real\":[{\"id\":\"--id device--\",\"name\":\"_tuya_bridge\",\"device\":[\"switch-1CH\",\"_trigger\"],\"power\":\"UPS\",\"dps\":[{\"dp\":1,\"name\":\"relay\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":7,\"name\":\"trigger (reserved)\",\"capability\":\"TRG\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s  (24H max.)\"},{\"dp\":14,\"name\":\"restart status\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: off|on|memory\"},{\"dp\":15,\"name\":\"light mode\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: pos|none|relay\"},{\"dp\":16,\"name\":\"backlight\",\"capability\":\"WW\",\"type\":\"boolean\",\"comment_01\":\"Values: true|false \"},{\"dp\":17,\"name\":\"circulate\",\"capability\":\"WW\",\"typefield\":\"STRUCTREPEAT\"},{\"dp\":18,\"name\":\"random\",\"capability\":\"WW\",\"typefield\":\"STRUCTRAND\"},{\"dp\":19,\"name\":\"inching\",\"capability\":\"WW\",\"typefield\":\"STRUCTINCH\"},{\"dp\":\"_tstPing\"},{\"dp\":\"_testPing24H\",\"comment\":\"NO code implementation, only 'share'\",\"capability\":\"SKIP\",\"share\":[{\"test\":[\"msg.info.value.count > 0\"],\"action\":[{\"device\":\"_tuya_bridge\",\"property\":\"_tstPing\",\"value\":true},{\"device\":\"_system\",\"property\":\"_timerON\",\"value\":{\"timeout\":\"@msg.info.value.timeout\",\"id\":\"_testPing24H\",\"alarmPayload\":{\"device\":\"_tuya_bridge\",\"property\":\"_testPing24H\",\"value\":{\"count\":\"@msg.info.value.count -1\",\"timeout\":\"@msg.info.value.timeout\"}}}}]}]}]}],\"virtual\":[],\"fake\":[{\"id\":\"_core\",\"name\":\"core\",\"device\":\"_core\",\"capability\":[\"SET\",\"GET\",\"SCHEMA\"],\"dps\":[{\"dp\":\"_DBase\",\"capability\":\"RO\"},{\"dp\":\"_heartbeat\",\"capability\":\"RO\",\"typefield\":\"TSTAMP2TIME\"},{\"dp\":\"_info\",\"name\":\"version\"},{\"dp\":\"_name\",\"capability\":\"RO\"}]},{\"id\":\"_system\",\"name\":\"HAL@home\",\"device\":\"_system\",\"capability\":[\"SET\",\"GET\",\"SCHEMA\"],\"dps\":[{\"dp\":\"_ACpower\",\"capability\":\"RO\"},{\"dp\":\"_ACunconnected\",\"capability\":\"RO\"},{\"dp\":\"_beep\",\"capability\":\"WO\"},{\"dp\":\"_beep_loop\",\"capability\":\"SKIP\",\"share\":[{\"test\":[\"msg.info.value.count > 0\"],\"action\":[{\"device\":\"_system\",\"property\":\"_beep\",\"value\":1},{\"device\":\"_system\",\"property\":\"_timerON\",\"value\":{\"timeout\":\"@msg.info.value.timeout\",\"alarmPayload\":{\"device\":\"_system\",\"property\":\"_beep_loop\",\"value\":{\"count\":\"@msg.info.value.count -1\",\"timeout\":\"@msg.info.value.timeout\"}}}}]}]},{\"dp\":\"_benchmark\"},{\"dp\":\"_benchmark_end\",\"capability\":\"TRG\",\"hide\":\"K\"},{\"dp\":\"_benchmark_step\",\"capability\":\"TRG\",\"hide\":\"K\"},{\"dp\":\"_doBenchmark\"},{\"dp\":\"_doSCHEMA\",\"type\":\"string\"},{\"dp\":\"_doTrigger\",\"capability\":\"WO\",\"type\":\"int\"},{\"dp\":\"_doUPDATE\",\"type\":\"string\"},{\"dp\":\"_exec\"},{\"dp\":\"_LANnet\",\"capability\":\"RO\",\"type\":\"boolean\"},{\"dp\":\"_laststart\",\"capability\":\"RO\",\"type\":\"string\"},{\"dp\":\"_play\",\"capability\":\"WO\",\"type\":\"see note\"},{\"dp\":\"_proxy\"},{\"dp\":\"_sqlDBlocal\",\"type\":\"string\"},{\"dp\":\"_sqlDBremote\",\"type\":\"string\"},{\"dp\":\"_timerList\",\"capability\":\"RO\"},{\"dp\":\"_timerOFF\",\"type\":\"string\",\"hide\":\"K\"},{\"dp\":\"_timerON\",\"hide\":\"K\"},{\"dp\":\"_toDebug\",\"capability\":\"WO\"},{\"dp\":\"_toGlobal\",\"capability\":\"WO\"},{\"dp\":\"_toFastIN\",\"capability\":\"WO\"},{\"dp\":\"_toLogging\",\"capability\":\"WO\"},{\"dp\":\"_toLowIN\",\"capability\":\"WO\"},{\"dp\":\"_toShare\",\"capability\":\"WO\"},{\"dp\":\"_toStdCmd\",\"capability\":\"WO\"},{\"dp\":\"_toWarn\",\"capability\":\"WO\",\"type\":\"string\"},{\"dp\":\"_tuyastatus\",\"capability\":\"WO\"},{\"dp\":\"_WiFinet\",\"capability\":\"RO\"},{\"dp\":\"_WiFiunconnected\",\"capability\":\"RO\"},{\"dp\":\"_zeroLog\",\"share\":[{\"action\":[{\"device\":\"_system\",\"property\":\"_benchmark_step\",\"value\":\"any\"}]}]},{\"dp\":\"_zeroTask\",\"hide\":\"K\",\"share\":[{\"action\":[{\"device\":\"_system\",\"property\":\"_benchmark_step\",\"value\":\"any\"}]}]}]}]}",
                "tot": "json"
            },
            {
                "p": "remotemap",
                "pt": "global",
                "to": "{\"local\":{\"CIRCEO\":\"http://localhost:2022\",\"DEVPC\":\"http://localhost:1984\",\"TESTPC\":\"http://localhost:1985\",\"ANDROID\":\"http://localhost:1880\"},\"remote\":{\"CIRCEO\":\"http://192.168.1.21:2022\",\"DEVPC\":\"http://192.168.1.3:1984\",\"TESTPC\":\"http://192.168.1.3:1985\",\"ANDROID\":\"http://192.168.1.4:1880\"}}",
                "tot": "json"
            },
            {
                "p": "instance_name",
                "pt": "global",
                "to": "ANDROID",
                "tot": "str"
            },
            {
                "p": "alldevice_file_path",
                "pt": "flow",
                "to": "D:\\xampp\\htdocs\\tuyadaemontoolkit\\devicedata",
                "tot": "str"
            },
            {
                "p": "MAXREFRESH",
                "pt": "global",
                "to": "60",
                "tot": "num"
            },
            {
                "p": "hrere_tuya_id_123eea13f9_AVERAGE",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "active": true,
        "x": 220,
        "y": 160,
        "wires": [],
        "info": "## CORE Configuration\nUser defined:\n\n_global.alldevices_<br>\n    To add a _new device_, or for fine tune an existing one, or to add `share` actions.\n    Same in all instances.\n- see [global.alldevices](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices)\n- see also [tuyaDEAMON-toolkit](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-toolkit).\n\n_global.remotemap_<br>\n    Mandatory for every tuyaDAEMON instance.\n    Two URLs for every instance in LAN.\n    Same in all instances.\n- see [NET extensions](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#net-extensions)\n\n_global.instance_name_<br>\n    The name of this instance.\n    note: same as in remotemap.\n\n_flow.alldevice_file_path_<br>\n   The dir to save a copy of alldevices (node 'EXPORT alldevices')\n - See also the [tuyaDEAMON-toolkit](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-toolkit) and `tuyadaemon-things` (under construction) applications, for the management of alldevices.\n - If `'tuyadaemontoolkit'` is installed, use:\n        `...tuyadeamontoolkit\\devicedata`\n\n### Device control\n\n_global.MAXREFRESH_<br>\n    Default (60s) 'max_time' for all REFRESH device action (see [REFRESH subflow](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#refresh-operation)).\n    Used in case of fast REFRESH for UI. Can be overwrited on device basis.\n\n_global.&lt;device_id>_AVERAGE<br>\n    Switch (true|false) to enable data average for devices that uses [\"RT/AVG filter\"](https://github.com/msillano/tuyaDAEMON/wiki/case-study:-433-MHz-weather-station#8-notes-about-rtavg-filter-subflow) subflow (see)\n\n------------------------------- \n\n### DataBase SETUP\n  click the `'CUSTOMIZE: DBase servers'` node for info.\n  \n### new DEVICES SETUP: \n  click the `CUSTOMIZE tuya devices (readme)` node for info.\n - To add/modify `encode/decode functions` to handle new formats of device data,  see the node: `*ENCODE/DECODE user library`.\n \n### Adding new Tuya devices\n see the wiki: https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON\n       \n### Updating devices from a precedent version.\nOpen tuyaDAEMON new and the old one as well (using a lan or [different ports](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#multiple-instances-of-tuyadaemon-in-the-same-server)).\n\nIn the old: select the nodes (device selector, refresh, tuya_smart, retry) and EXPORT to clipboard the 'selected nodes'.\n\nIn the new: open the 'core' flow and IMPORT from Clipboard (do not import subflows):\n - Restore connections. \n - update '*catch device and LAN errors' node\n - Update the global.alldevice from old using 'cut+paste' or the tools: tuyadaemonthings and tuyadamontool.\n        \n------------------------------\n\n### Programmer's notes:\n \n**Checklist:**\n - in _Global CORE config_ node set the `instance_name`\n - in _Global CORE config_ node update the `remoteMAP` with `instance_name`\n - in _Global CORE config_ node set `alldevice_file_path` to a local value.\n - in all CORE `DB nodes` verify the correct associations with `DB configuration` nodes\n\n### IMPORTANT: node-red-contrib-tuya-smart-device updating.\n\nFor better performances with tuyaDAEMON, you can replace the standard node-red-contrib-tuya-smart-device with an updated version.\nThis will produce fewer 'error messages' and faster device connections, an important factor in having many devices.\n\n   - download the file `tuya-smart-device-updated.4.1.1.zip` from https://github.com/vinodsr/node-red-contrib-tuya-smart-device/issues/83\n   - or download the file `tuya-smart-device - 501-fixed.zip` from https://github.com/vinodsr/node-red-contrib-tuya-smart-device/issues/113\n   - make a copy of the file `[D:\\nodered\\flow-1984]\\node_modules\\node-red-contrib-tuya-smart-device\\src\\tuya-smart-device.js` as backup.\n   - replace `tuya-smart-device.js` with the new file.\n   - done: restart node-red\n \n### details\n - Private IN/OUT link nodes for internal flow use: they are all without labels and with a special double arrow icon ('fa_expand' icon).\n - Private IN/OUT intra-flows links are without a label.\n - Public  IN/OUT link nodes, useful for custom devices or extension flows: they are all labeled, and the accepted `'msg'` format is in the node documentation.\n\n The 'Deploy', after a module 'Import', sometimes (not clear why) does not set correctly external 'link' nodes.<br>\n**Important: After an  'Import' + 'Deploy', CHECK all links nodes**. <br>\nAs a help, the name of all Links shows the origin or the destination (e.g.: `from core.'to fake devices'`,  `to core.'logging'`)\n\n**Custom extensions are easy in the areas:**\n - new device data encoding/decoding functions, to translate device data into a human format. There are now 14 functions, but you can add more for your devices (see '*ENCODE/DECODE user library' node)\n - number and strategy of use of the DBs: the default value is max 2 DBs, and all the event and command logs go into a single DB. Maybe you need to change this (see 'CUSTOMIZE: DBase servers (readme)' node)"
    },
    {
        "id": "49ecf72da077e946",
        "type": "inject",
        "z": "9926dce981094007",
        "name": "EXPORT alldevices.json",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "filename",
                "v": "$flowContext(\"alldevice_file_path\")&\"\\\\alldevices.\"&$globalContext(\"instance_name\")&\".json\"",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "$globalContext(\"alldevices\")\t",
        "payloadType": "jsonata",
        "x": 230,
        "y": 320,
        "wires": [
            [
                "5f0ccd77fd06d3a1"
            ]
        ],
        "info": "Command to export a file 'alldevices.json'.\nnote: the output path is defined in 'global CORE config' node."
    },
    {
        "id": "94bcced9ebabd77e",
        "type": "switch",
        "z": "9926dce981094007",
        "name": "*device selector",
        "property": "toDev",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "reserved trigger",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device#1-ID",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device#2-ID",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device#3-ID",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device#4-ID",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 800,
        "y": 620,
        "wires": [
            [
                "9114bc51fbe925c0"
            ],
            [
                "300b4d1220ad9bb6"
            ],
            [
                "e4326cec6722a500"
            ],
            [
                "5d6f1d677ffbe61d"
            ],
            [
                "6646febef558d4f2"
            ]
        ],
        "info": "CUSTOMIZATION:\n\n- For a new device\n    - Add one output\n    - Add a new rule on 'msg.toDev' property using the deviceID\n    - Wire the new output to new 'tuya-smat-device' node.\n\nsee: [Howto: add a new device to tuyaDAEMON](https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON)\n\nnote:\n -  Installing a new devices, use only the `static retry` node.\n -  When all ok you can do [fine-tuning](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#refresh-operation):\n    - if the device can handle the `REFRESH` command (e.g. AC power meters) you can add the `REFRESH` subflow and add `'REFRESH'` to device capabilities in `global.alldevices`.\n    - if the device can be disconnected for longtime (e.g. mobile plugs) better to replace `static retry` with `dynamic retry` subflow.\n    - if the device PUSHes too many data, you can add the `RT/AVG` subflow.\n    - if a device value is a data structure, you can add one `explode` subflow.\n\n - Use in 'device selector', 'tuya-smarty-device', 'static/dinamic retry', etc... the SAME `deviceID` as in `global.alldevices`.\n - The position 1 is reserved to `'tuya_brige'` device."
    },
    {
        "id": "b13f16046176147c",
        "type": "tuya-smart-device",
        "z": "9926dce981094007",
        "d": true,
        "deviceName": "tuya-smart-device",
        "disableAutoStart": false,
        "deviceId": "",
        "deviceKey": "",
        "storeAsCreds": true,
        "deviceIp": "",
        "retryTimeout": 1000,
        "findTimeout": "2000",
        "tuyaVersion": "3.1",
        "eventMode": "event-both",
        "x": 1250,
        "y": 860,
        "wires": [
            [
                "d0dfc428345472d7"
            ],
            [
                "6cf98478569bcc38"
            ]
        ]
    },
    {
        "id": "5d6f1d677ffbe61d",
        "type": "tuya-smart-device",
        "z": "9926dce981094007",
        "d": true,
        "deviceName": "tuya-smart-device",
        "disableAutoStart": false,
        "deviceId": "",
        "deviceKey": "",
        "storeAsCreds": true,
        "deviceIp": "",
        "retryTimeout": 1000,
        "findTimeout": "2000",
        "tuyaVersion": "3.1",
        "eventMode": "event-data",
        "x": 1250,
        "y": 700,
        "wires": [
            [
                "c137ea4617ecacf2"
            ],
            [
                "3c0a4df4c36c1be8"
            ]
        ]
    },
    {
        "id": "3c0a4df4c36c1be8",
        "type": "subflow:ee953c15.ada29",
        "z": "9926dce981094007",
        "d": true,
        "name": "",
        "env": [
            {
                "name": "deviceId",
                "type": "cred"
            },
            {
                "name": "deviceID",
                "value": "42027807d8bfc0c5831e",
                "type": "str"
            }
        ],
        "x": 1630,
        "y": 700,
        "wires": [
            [
                "4086b355ee31c159"
            ]
        ],
        "info": "CUSTOMIZATION\n\n- duplicate for any new device alltime connected\n- set properties: deviceID.\n\nfor more info: see \"*device selector\" node documentation."
    },
    {
        "id": "171633cbd8d5eb7c",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "to logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 1195,
        "y": 920,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "2efccb5477bda080",
        "type": "subflow:f2bb4b234e94093b",
        "z": "9926dce981094007",
        "d": true,
        "name": "",
        "env": [
            {
                "name": "deviceID",
                "type": "cred"
            },
            {
                "name": "dp_round",
                "value": "[\"_6.V\"]",
                "type": "json"
            },
            {
                "name": "dp_exclude",
                "value": "[\"16\"]",
                "type": "json"
            },
            {
                "name": "dp_default_last",
                "value": "[\"1\"]",
                "type": "json"
            }
        ],
        "x": 1630,
        "y": 640,
        "wires": [
            [
                "d87a65f45d5ec19a"
            ]
        ]
    },
    {
        "id": "80d2737bdb474cb1",
        "type": "inject",
        "z": "9926dce981094007",
        "d": true,
        "name": "average",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "device",
                "v": "bfb380a0be5c7f80185uqg",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": "18",
        "topic": "average",
        "x": 1280,
        "y": 640,
        "wires": [
            [
                "2efccb5477bda080"
            ]
        ]
    },
    {
        "id": "c137ea4617ecacf2",
        "type": "subflow:e8e1f4484dbb32d2",
        "z": "9926dce981094007",
        "d": true,
        "name": "",
        "x": 1460,
        "y": 680,
        "wires": [
            [
                "2efccb5477bda080"
            ]
        ]
    },
    {
        "id": "6646febef558d4f2",
        "type": "subflow:e1c6cc8a.2f92a",
        "z": "9926dce981094007",
        "d": true,
        "name": "",
        "env": [
            {
                "name": "deviceID",
                "type": "cred"
            },
            {
                "name": "Max_time",
                "value": "0",
                "type": "num"
            },
            {
                "name": "REFRESH_message",
                "value": "{\"operation\":\"REFRESH\"}",
                "type": "json"
            }
        ],
        "x": 1030,
        "y": 880,
        "wires": [
            [
                "b13f16046176147c"
            ],
            [
                "171633cbd8d5eb7c"
            ]
        ]
    },
    {
        "id": "d0dfc428345472d7",
        "type": "subflow:f2bb4b234e94093b",
        "z": "9926dce981094007",
        "d": true,
        "name": "",
        "env": [
            {
                "name": "deviceID",
                "type": "cred"
            },
            {
                "name": "dp_exclude",
                "value": "[\"1\"]",
                "type": "json"
            }
        ],
        "x": 1630,
        "y": 800,
        "wires": [
            [
                "d87a65f45d5ec19a"
            ]
        ],
        "info": "note, all dp as string:\n[\"_step\", \"1\", \"103\"]"
    },
    {
        "id": "be3b769c1dcc23f9",
        "type": "inject",
        "z": "9926dce981094007",
        "d": true,
        "name": "average",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "average",
        "x": 1280,
        "y": 800,
        "wires": [
            [
                "d0dfc428345472d7"
            ]
        ],
        "info": "note, all dp as string:\n[\"_step\", \"1\", \"103\"]"
    },
    {
        "id": "6cf98478569bcc38",
        "type": "subflow:15c9daba.b55285",
        "z": "9926dce981094007",
        "d": true,
        "name": "*dynamic retry",
        "env": [
            {
                "name": "deviceId",
                "type": "cred"
            }
        ],
        "x": 1640,
        "y": 860,
        "wires": [
            [
                "4086b355ee31c159"
            ],
            [
                "c973b93480df3d1a"
            ]
        ],
        "info": "\nUse 'dynamic retry' in place of 'static retry' if the device is often disconneted (power strip, power plug, light bulbs etc.)\n\n\nfor more info: see \"*device selector\" node documentation."
    },
    {
        "id": "300b4d1220ad9bb6",
        "type": "tuya-smart-device",
        "z": "9926dce981094007",
        "d": true,
        "deviceName": "tuya-smart-device",
        "disableAutoStart": false,
        "deviceId": "",
        "deviceKey": "",
        "storeAsCreds": true,
        "deviceIp": "",
        "retryTimeout": 1000,
        "findTimeout": "2000",
        "tuyaVersion": "3.1",
        "eventMode": "event-both",
        "x": 1250,
        "y": 440,
        "wires": [
            [
                "d87a65f45d5ec19a"
            ],
            [
                "4353520502f78b34"
            ]
        ]
    },
    {
        "id": "4353520502f78b34",
        "type": "subflow:ee953c15.ada29",
        "z": "9926dce981094007",
        "d": true,
        "name": "",
        "env": [
            {
                "name": "deviceId",
                "type": "cred"
            },
            {
                "name": "deviceID",
                "value": "42027807d8bfc0c5831e",
                "type": "str"
            }
        ],
        "x": 1630,
        "y": 440,
        "wires": [
            [
                "4086b355ee31c159"
            ]
        ],
        "info": "CUSTOMIZATION\n\n- use it for any new device alltime connected\n- set properties: deviceID.\n\nfor more info: see \"*device selector\" node documentation."
    },
    {
        "id": "e4326cec6722a500",
        "type": "tuya-smart-device",
        "z": "9926dce981094007",
        "d": true,
        "deviceName": "tuya-smart-device",
        "disableAutoStart": false,
        "deviceId": "",
        "deviceKey": "",
        "storeAsCreds": true,
        "deviceIp": "",
        "retryTimeout": "3000",
        "findTimeout": 1000,
        "tuyaVersion": "3.1",
        "eventMode": "event-both",
        "x": 1250,
        "y": 540,
        "wires": [
            [
                "d87a65f45d5ec19a"
            ],
            [
                "1701d37d3741746c"
            ]
        ]
    },
    {
        "id": "1701d37d3741746c",
        "type": "subflow:15c9daba.b55285",
        "z": "9926dce981094007",
        "d": true,
        "name": "*dynamic retry",
        "env": [
            {
                "name": "deviceId",
                "type": "cred"
            }
        ],
        "x": 1640,
        "y": 540,
        "wires": [
            [
                "4086b355ee31c159"
            ],
            [
                "c973b93480df3d1a"
            ]
        ],
        "info": "\nUse 'dynamic retry' in place of 'static retry' if the device is often disconneted (power strip, power plug, light bulbs etc.)\n\n\nfor more info: see \"*device selector\" node documentation."
    },
    {
        "id": "e8ed692aaefd882f",
        "type": "debug",
        "z": "9926dce981094007",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 320,
        "wires": [],
        "info": "Echo ob debug pad"
    },
    {
        "id": "0da03cd2b9243386",
        "type": "function",
        "z": "9926dce981094007",
        "name": "OUT data process",
        "func": "// sends any message to DB (sql in msg.topic), updates tuyastatus\n// version 1.1 (use of _call_library)\n// version 2,0 (use of context.global.alldevices  amd  context.global.datadecode\n//-------------------------------------------\n\n// local functions:\n\n// -------------------------------------------- private functions\nvar oDev = null;\nvar _dataname = \"\";\n\n// updates the global \"tuyastatus\"\n// note: for real devices: tuyastatus._connected is handled by static/dynamic retry node.\n//       for fake devices: tuyastatus._connected is handled by \"xxx flow startup\" node in the flow.    \n//       for virtual devices:  tuyastatus._connected is handled at lines 218, 235\nfunction _addToStatus(remote, dnx, _datanx, dx, tx) {\n    var mystatus = global.get(\"tuyastatus['\" + dnx + \"']\");\n    if (mystatus === undefined)\n        mystatus = {};\n    mystatus[_datanx] = dx;\n    //  if (_datanx != \"_connected\")\n    //    mystatus._connected = true;\n    mystatus._t = tx;\n    global.set(\"tuyastatus['\" + dnx + \"']\", mystatus);\n}\n\n// clean data (object, array) using JSON.stringify, to get a string for DB\nfunction formatData(data) {\n    var clean = JSON.stringify(data);\n    if (clean[0] === '\"')\n        clean = clean.substring(1).slice(0, -1);\n    //    return clean.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n    //    return clean.replace(/'/g, '\\\\x27');\n    return clean.replace(/'/g, \"\\\\'\");\n}\n\n// For DB output, string\nfunction formatName(data) {\n    if (data == null)\n        return 'NULL';\n    //    return data.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n    //    return data.replace(/'/g, '\\\\x27');\n    return data.replace(/'/g, \"\\\\'\");\n}\n\n// true if device is a real device (virtual := cid exists)\nfunction _isreal(mx) {\n    return (mx.payload.data.cid === undefined);\n}\n\n// returns deviceId (real) or cid (virtual), never fails\nfunction _getID(mx) {\n    return (mx.payload.data.cid || mx.payload.deviceId);\n}\n\n// returns data.t or now(), formatted for mySQL, never fails\nfunction _mySQLdatetime(mx) {\n    //datetime format for mySQL: '2020-12-18 20:45:02'\n    // using 'sv' for date format and local timezone\n    if (mx.payload.data.t === undefined)\n        return (new Date().toLocaleString('sv'));\n    return (new Date(Number(mx.payload.data.t) * 1000).toLocaleString('sv'));\n}\n\n// returns val, processed by correct datadecode[] function, if required, and sets  _dataname\nfunction _processData(odev, oPx, mx, adpn, val) {\n    _dataname = \"\";\n    if (oPx === undefined) {\n        // not found DP? no PSEUDODP? warning and continue (no change value)\n        if (!context.global.PSEUDODP.includes(adpn.toUpperCase())) // extra pseudo-DPs\n            node.warn([\"WARNING [OUT data]: In alldevices missed the '\" + oDev.name + \"':dps[\" + adpn + \"] definition.\", mx, oDev]);\n        _dataname = adpn;\n        return (val);\n    }\n    _dataname = (oPx.name === undefined) ? adpn : oPx.name;\n    // general continue\n    if ((oPx.typefield === undefined) || (oPx.typefield === 'NONE'))\n        return (val); // no process\n    if (context.global.datadecode[oPx.typefield] === undefined) {\n        node.warn(\"ERROR [OUT data]:Not found \" + oPx.typefield + \" dencode function() for '\" + _dataname + \"': data unchanged.\");\n        return (val);\n    }\n    // exception for _zeroLog: no decode return data also if oPx.typefield exists.\n    if (oPx.dp === \"_zeroLog\")\n        return (val);\n    try {\n        return context.global.datadecode[oPx.typefield](val);\n    } catch (error) {\n        node.warn([\"ERROR [OUT data]:in \" + oPx.typefield + \" decode function on value (\" + (typeof (val) === \"string\") ? val : JSON.stringify(val) + \"): \" + error, oPx]);\n        return (val);\n    }\n\n}\n\n// get the device object from alldevices, if it don't exist return undefined + warn\n// with a fine handling of error messages.\nfunction _getODevice(mx) {\n    var o;\n    if (_isreal(mx)) {\n        o = context.global.alldevices.getODev(mx.payload.deviceId, \"real\");\n        if (o === undefined) {\n            o = context.global.alldevices.getODev(mx.payload.deviceId, \"fake\");\n        }\n        if (o === undefined) {\n            node.warn([\"ERROR [OUT data]: ADD to alldevices the real/fake deviceId: \" + mx.payload.deviceId + \" (\" + mx.payload.deviceName + \")\", mx]);\n        }\n    } else {\n        o = context.global.alldevices.getODev(mx.payload.data.cid, \"virtual\");\n        if (o === undefined) {\n            node.warn(\"ERROR [OUT data]: ADD to alldevices the virtual cid: \" + mx.payload.data.cid + \" [gateway: \" + mx.payload.deviceId + \"]\");\n        }\n    }\n    return (o);\n}\n\n// some ASSERT, just in case...\nif (!(msg.payload.deviceId)) {\n    node.warn([\"ASSERT fail: in the answer the payload.deviceId must be defined.\", msg]);\n    return null;\n}\nif (!(msg.payload.data)) {\n    node.warn([\"ASSERT fail: in the answer the payload.data is mandatory\", msg]);\n    return null;\n}\n// ---------------------  main\n\nvar warmsg = null; // info debug (1)\nmsg.topic = \"\"; // sql query (2)\n\nvar myId = global.get(\"instance_name\");\nif (msg.payload.remote !== undefined) myId = msg.payload.remote;\n\noDev = _getODevice(msg);\nif (oDev === undefined)\n    return ([null]);    //error sended,  abort\nvar dname = context.global.alldevices.getDevName(oDev);\nmsg[\"from\"] = _getID(msg);\nmsg[\"hide\"] = oDev.hide || \"\";\n\n// now processes dp=value couples\nif (msg.payload.data.dps !== undefined) {\n    try {\n        //      node.warn([\"out data process IN \", msg]);\n        Object.entries(msg.payload.data.dps).forEach(([key, value]) => {\n            // ---- LOOP for DPs        \n            if ((value === undefined) || (value === null)) {\n                node.warn([\"ERROR [OUT data]: from \" + dname + \"/dps[\" + key + \"], the value is not defined.\", msg]);\n                return;\n            }\n            var warmsg = null;\n            var oPthis = context.global.alldevices.getODps(oDev, key);\n            var pdata = _processData(oDev, oPthis, msg, key, value);\n            // builds sql step by step\n            msg.topic += \" INSERT INTO `messages` (`timestamp`, `daemon`, `action`, `device-id`, `device-name`, `dps`, `dp-name`, `data`, `value`)\\n\";\n            msg.topic += \" VALUES ('\" + _mySQLdatetime(msg) + \"', '\" + myId + \"' , 'RX', '\" + _getID(msg) + \"', '\" + formatName(dname) +\n                \"','\" + key + \"', '\" + formatName(_dataname) + \"', '\" + formatData(value) + \"', '\" + formatData(pdata) + \"') ;\\n\";\n            msg.infodp = key.toString();     // to filter DB\n            if (_dataname !== undefined) {\n                // timestamp as seconds\n                var tx = msg.payload.data.dps.t;\n                if (tx === undefined)\n                    tx = Math.floor(Date.now() / 1000);\n                // info message\n                let sstr = \"RX: \";\n                //  remote_from exists ?\n                if (typeof (msg.payload.remote_from) === \"string\") {\n                    if (msg.payload.remote_from === \"\" || msg.payload.remote_from == \"NULL\")\n                        sstr = \"RX: \";   // local\n                    //                        sstr = global.get(\"instance_name\")+\": RX: \";\n                    else\n                        if (global.get(\"remotemap.local\")[msg.payload.remote_from] === undefined)\n                            sstr = \"UNKNOWN: RX: \";\n                        else\n                            sstr = msg.payload.remote_from + \": RX: \";\n                }\n                warmsg = {\n                    payload: [sstr + dname + \"/\" + _dataname, pdata]\n                };\n\n                //from 2.2.0\n                warmsg['hide'] = msg.hide + (((oPthis) && (oPthis.hide)) ? oPthis.hide : \"\");\n                if (!~warmsg.hide.indexOf(\"K\"))         //  K kills also tuyastatus update\n                    _addToStatus(msg.payload.remote_from, dname, _dataname, pdata, tx);\n                //more data for fast post processing\n                if (msg.payload.remote_from !== undefined)\n                    warmsg['remote_from'] = msg.payload.remote_from;\n                warmsg['from'] = oDev.cid || oDev.id;\n                warmsg['infodp'] = key.toString();         // extra  for filter...\n                warmsg['info'] = {};            //  required by REST check and by share\n                warmsg['info']['device'] = dname;\n                warmsg['info']['property'] = _dataname;\n                warmsg['info']['value'] = pdata;           // decoded\n                let thishare = (oPthis === undefined ? undefined : oPthis.share); // auto actions\n                // share only local\n                if ((thishare !== undefined) && (msg.payload.remote_from === undefined))\n                    warmsg['share'] = thishare;\n                //             node.warn([\"out outproc \", warmsg,  msg]);\n                node.send([warmsg, null]); // SQL are appended\n            }\n        });\n    } catch (error) {\n        node.warn([\"Error in \" + dname + \" device message: \" + error, msg]);\n        return ([null]);\n    }\n} else \n// new format from gateways\n// 2/5/2023, see tuyaDAEMON.ISSUE#4\n    if (msg.payload.data.online !== undefined) {\n    \n      if (msg.payload.data.online.length > 0 ) {\n        msg.payload.data.online.forEach(subdevice => { \n            var  newmsg ={\n                \"payload\":{\n                    \"deviceId\": msg.payload.deviceId,\n                    \"data\":{\n                       \"cid\": subdevice,\n                        \"dps\": {\n                           \"_connected\":true\n                        } \n                    }\n                }             \n            };\n            node.send([null, null, newmsg]);\n        });\n     } \n \n        if ((msg.payload.data.offline !== undefined) && (msg.payload.data.offline.length > 0)) {\n        msg.payload.data.offline.forEach(subdevice => {\n            var newmsg = {\n                \"payload\": {\n                    \"deviceId\": msg.payload.deviceId,\n                    \"data\": {\n                        \"cid\": subdevice,\n                        \"dps\": {\n                            \"_connected\": false\n                        }\n                    }\n                }\n            };\n            node.send([null, null, newmsg]);\n        });\n    } \n}\n else\n// string: error message from API\nif (typeof (msg.payload.data) === \"string\") {\n    if (msg.payload.data == \"json obj data unvalid\") {\n        node.warn([\"ERROR [OUT data]: from device '\" + dname + \"': not JSON data but 'json obj data unvalid': operation not allowed?.\", msg]);\n    } else {\n        //  usually bad tuya key\n        var buff = Buffer.from(msg.payload.data);\n        node.warn([\"ERROR [OUT data]: from device '\" + dname + \"': not JSON data but HEX:\" + buff.toString('hex') + \"  ('\" + msg.payload.data + \"')\", msg]);\n    }\n} else\n// not string:... object ?\n   node.warn([\"ERROR [OUT data]: from device '\" + dname + \"', maybe new format ? \", msg]);\n    \n// \nif (msg.topic !== \"\") // some processed, SQL exists\n    return ([null, msg]);\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1740,
        "wires": [
            [
                "5a71e0bf5007c21e",
                "1f988381d7a2deab",
                "792b5ea5968f5bc2"
            ],
            [
                "9f9e80506579b9cb"
            ],
            [
                "b403ab518354b333"
            ]
        ],
        "outputLabels": [
            "info",
            "sqlDB",
            "selfLoop"
        ],
        "info": "This decodes event/response messages.\n\nSince 2.2.2\nISSUE#4: added a new message format found in a gateway:\n4 May 09:18:02 - [info] [tuya-smart-device:Multimode Gateway] \nData from device  [event:data]: {\"online\":[\"a4c138******\",\"a4c1383********\",\"a4c138f******\",\"804b50*******\"],\"offline\":[]}\n\n"
    },
    {
        "id": "b403ab518354b333",
        "type": "link out",
        "z": "9926dce981094007",
        "name": "to logging",
        "mode": "link",
        "links": [
            "6f931ee7519bb512"
        ],
        "x": 985,
        "y": 1800,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "bd4fcb1929151666",
        "type": "link in",
        "z": "a5526c71dbbdfc5a",
        "name": "from core.conn_events",
        "links": [
            "ec6bc4a92ee83d18"
        ],
        "x": 115,
        "y": 280,
        "wires": [
            [
                "1b60c89e36211754"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "721771d0ca730a92",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "WiFi check",
        "func": "\n// ceck  devices  AC and  AC + battery ('UPS'): all unconnected => WiFi down\n// version 1.1 (use of _call_library)\n// ===================================== do not change\n//\nconst CONN = \"_connected\"; //  dps = CONN, same as name, see also sub-flow \"connected\" function\nconst PWIFI = \"_WiFinet\";\nconst PAC = \"_ACpower\";\nconst ULST = \"_WiFiunconnected\";\nvar tuyastatus;\nvar count = 0;\nvar tot = 0;\nvar arraybad = [];\n\nfunction _sendOUT(value, list) {\n    // builds an artificial OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_system\",\n            \"data\": {\n                \"dps\": {\n                    [PWIFI]: value,\n                    [ULST]: list\n                }\n            }\n        }\n    };\n    return newMsg;\n}\n\nfunction _checkWIFI(o) {\n    if ((o.power === undefined) || (o.power === 'BAT'))\n        return;\n    const stAcc = (o.name ===  undefined? o.id: o.name);     // real, only name/id\n    if (tuyastatus[stAcc] === undefined) return;\n    var usrCONN = context.global.alldevices.getDpsName(o, CONN);\n    if (tuyastatus[stAcc][usrCONN] === undefined) return; //  _connected not updated\n// ok\n    tot++;\n    if (tuyastatus[stAcc][usrCONN]) {\n        count++;\n    } else {\n        arraybad.push(stAcc);\n    }\n}\n\n// ---------------- main\n// stuff to access data\ntuyastatus = global.get(\"tuyastatus\");\n// find object dp\nconst oDev =       context.global.alldevices.getODev( \"_system\", \"fake\");\nconst sysDevName = context.global.alldevices.getDevName( oDev);\nconst usrWIFI =    context.global.alldevices.getDpsName(oDev, PWIFI);\nconst usrAC =      context.global.alldevices.getDpsName(oDev, PAC);\n\nvar oldlist = flow.get(ULST);\nvar oldPWIFI = flow.get(PWIFI);\n\ncount = 0;\ntot = 0;\n\n// testing:\ncontext.global.alldevices.real.forEach(element => _checkWIFI(element));\n\n// function outputs:\nif (tot < 1) {\n    node.status({\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"WiFi devices not found\"\n    });\n    return null;\n}\n\nflow.set(ULST, arraybad);\nflow.set(PWIFI, (count > 0));\n\nvar sendnew = (JSON.stringify(oldlist) !== JSON.stringify(arraybad));\nvar sendPWIFI =((count > 0) !== oldPWIFI);\n\nnode.status({\n    fill: (count == 0 ? \"red\" : \"green\"),\n    shape: \"ring\",\n    text: \"WiFi devices ON: \" + count + \"/\" + tot\n});\n\nvar nmsg = _sendOUT((count > 0), arraybad);\n\nif (!sendPWIFI) {\n    delete nmsg.payload.data.dps[PWIFI];\n}\n\n// return(update, alarm)\nif (sendnew && (tuyastatus[sysDevName] !== undefined) && (tuyastatus[sysDevName][usrWIFI] === (count == 0)))\n\tif (tuyastatus[sysDevName][usrAC])  // alarm only if AC OK\n        return [nmsg, nmsg];\nif (sendnew)\n    return [nmsg, null];\n    \nreturn [null, null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "/// Code added here will be run once\n// whenever the node is deployed.\n// ---------------- main\nvar PWIFI = \"_WiFinet\";\nvar ULST = \"_WiFiunconnected\";\n//\nnode.status({\n    fill: \"yellow\",\n    shape: \"dot\",\n    text: \"start\"\n});\nflow.set(ULST, [\"new\"]);\nflow.set(PWIFI, 'new');\n",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 340,
        "wires": [
            [
                "dca16029d21c7459"
            ],
            [
                "a31595a13dcc6512"
            ]
        ]
    },
    {
        "id": "6e1a1ea7a9a78477",
        "type": "delay",
        "z": "a5526c71dbbdfc5a",
        "name": "",
        "pauseType": "delay",
        "timeout": "400",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 690,
        "y": 340,
        "wires": [
            [
                "721771d0ca730a92"
            ]
        ]
    },
    {
        "id": "dd64ea384d93a174",
        "type": "http request",
        "z": "a5526c71dbbdfc5a",
        "name": "http",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://nodered.org",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 850,
        "y": 400,
        "wires": [
            [
                "e1607b5a3cdba4e9"
            ]
        ]
    },
    {
        "id": "e1607b5a3cdba4e9",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "*LAN check",
        "func": "// checks WEB page\n// version 1.1 (use of _call_library)\n// CUSTOMIZATION: the home page of nttp://nodered.com can change in future. \n//   Update FINDSTRING\n// ===================================== do not change\nconst FINDSTRING =\"is a programming tool for wiring\";\nconst PLAN = \"_LANnet\";\n//\nfunction _sendOUT(key, value) {\n    // builds a fake OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_system\",\n            \"data\": {\n                \"dps\": {\n                    [key]: value\n                }\n            }\n        }\n    };\n    return newMsg;\n}\n\nconst oldlan =flow.get(PLAN);\n// this test must be updated in case of node-red home page change\nconst newlan = (msg.payload.indexOf(FINDSTRING) !== -1);\nif  (oldlan === newlan) return null;\n//\nflow.set(PLAN, newlan);\n//\nif (newlan) {\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"LAN connected\"\n    });\n    return (_sendOUT(PLAN, true));\n} else {\n    node.status({\n        fill: \"red\",\n        shape: \"ring\",\n        text: \"LAN disconnected\"\n    });\n    return (_sendOUT(PLAN, false));\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n\nPLAN = \"_LANnet\";\n//\nnode.status({\n    fill: \"yellow\",\n    shape: \"dot\",\n    text: \"start\"\n});\nflow.set(PLAN, \"new\");\n\n",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 400,
        "wires": [
            [
                "55d3758412edf267",
                "f13597ce36035ee2"
            ]
        ],
        "info": "CUSTOMIZATION: \n\nUses the home page of http://nodered.com. \nIf this page changes in future you must update the FINDSTRING code.\n"
    },
    {
        "id": "dca16029d21c7459",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 1255,
        "y": 220,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "e5748df49b8d98d9",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "ACpower check",
        "func": "// devices AC powered + no batteries: all off => AC power down\n// version 1.1 (use of _call_library)\n// ===================================== do not change\nconst CONN = \"_connected\"; //  dps = CONN, see also sub-flow \"connected\" function\nconst PAC = \"_ACpower\"; // can have friendly name\nconst ULST = \"_ACunconnected\";\n//\nvar tuyastatus;\nvar count = 0;\nvar tot = 0;\nvar arraybad = [];\n// --------------- locals\n\n\nfunction _sendOUT(value, list) {\n    // builds an artificial SET MULTIPLE message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_system\",\n            \"data\": {\n                \"dps\": {\n                    [PAC]: value,\n                    [ULST]: list\n                }\n            }\n        }\n    };\n    return newMsg;\n}\n// called for any real device in alldevices\nfunction _checkAC(o) {\n    if ((o.power === undefined) || (o.power !== 'AC'))\n        return;\n    const usrDev = (o.name === undefined) ? o.id : o.name;\n    if (tuyastatus[usrDev] === undefined) return; // not found\n    var usrCONN = context.global.alldevices.getDpsName(o, CONN);\n    if (tuyastatus[usrDev][usrCONN] === undefined) return; //  _connected not updated\n    // ok, test\n    tot++;\n    if (tuyastatus[usrDev][usrCONN]) {\n        count++;\n    } else {\n        arraybad.push(usrDev);\n    }\n}\n\n// ---------------- main\n// stuff to access data\ntuyastatus = global.get(\"tuyastatus\");\n// find object dp\nconst oDev =       context.global.alldevices.getODev(\"_system\", \"fake\");\nconst sysDevName = context.global.alldevices.getDevName(oDev);\nconst usrPAC =     context.global.alldevices.getDpsName(oDev, PAC);\n\nvar oldlist = flow.get(ULST);\nvar oldPAC  = flow.get(PAC);\ncount = 0;\ntot = 0;\n// testing:\ncontext.global.alldevices.real.forEach(element => _checkAC(element));\nflow.set(ULST, arraybad);\nflow.set(PAC, (count > 0));\n\n// case: no devices - no send\nif (tot < 1) {\n    node.status({\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: \"AC devices not found\"\n    });\n    return null;\n}\n// conditions to send\nconst sendnew =  (JSON.stringify(oldlist) !== JSON.stringify(arraybad));\nconst sendPAC =((count > 0) !== oldPAC);\n\n// set status & msg\nnode.status({\n    fill: (count == 0 ? \"red\" : \"green\"),\n    shape: \"ring\",\n    text: \"AC devices ON: \" + count + \"/\" + tot\n});\nvar nmsg = _sendOUT((count > 0), arraybad);\nif (!sendPAC) {\n    delete nmsg.payload.data.dps[PAC];\n}\n\n// return(update, alarm)\nif ((tuyastatus[sysDevName] != undefined) && sendnew && (tuyastatus[sysDevName][usrPAC] === (count == 0)))\n    return [nmsg, nmsg];\nif (sendnew)\n    return [nmsg, null];\n\nreturn [null, null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar PAC = \"_ACpower\"; \nvar ULST = \"_ACunconnected\";\n//\nnode.status({\n    fill: \"yellow\",\n    shape: \"dot\",\n    text: \"start\"\n});\n//\nflow.set(ULST, [\"new\"]);\nflow.set(PAC, \"new\");",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "dca16029d21c7459"
            ],
            [
                "dba39c20e0cb8abf"
            ]
        ]
    },
    {
        "id": "a31595a13dcc6512",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "WIFI_ALARM",
        "links": [],
        "x": 1380,
        "y": 340,
        "wires": [],
        "l": true,
        "info": "TRIGGER for custom flows.\n\nFired at any change."
    },
    {
        "id": "dba39c20e0cb8abf",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "AC_ALARM",
        "links": [],
        "x": 1390,
        "y": 280,
        "wires": [],
        "l": true,
        "info": "TRIGGER for custom flows.\n\nFired at any change."
    },
    {
        "id": "55d3758412edf267",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "LAN_ALARM",
        "links": [],
        "x": 1390,
        "y": 400,
        "wires": [],
        "l": true,
        "info": "TRIGGER for custom flows.\n\nFired at any change."
    },
    {
        "id": "b8c584f48880c546",
        "type": "link in",
        "z": "a5526c71dbbdfc5a",
        "name": "from core.to fake devices",
        "links": [
            "22239fa409a62d51"
        ],
        "x": 115,
        "y": 220,
        "wires": [
            [
                "7216f185bec22886"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "7216f185bec22886",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "checks all fake cmds, _system cmd selector (1)",
        "func": "// Implementation of GET/SET/SCHEMA  commands \n// for the 'fake' device \"_system\"\n// part 1: use of _getGlobalValue(mx), fast commands\n\n// ------------- check for ALL fake cmds, here for convenience\nif (typeof(msg.to) === 'undefined')\n         node.warn([\"ASSERT fail: in Fake-msg the msg.to (id) must exist.\",msg]) ;   \n\nif (msg.toDev)\n         node.warn([\"ASSERT fail: in Fake-msg the msg.toDev is NOT required.\",msg]) ;   \n         \nif (typeof(msg.infodp) !== \"string\")\n         node.warn([\"ASSERT fail: msg.infodp (string) must exist.\",msg]) ;   \n  \nif (msg.payload.dp)\n         node.warn([\"temporary ASSERT fail: msg.payload.dp (string) is obsolete.\",msg]) ;   \n\n// from 2.2.0\nif(typeof(msg.hide) !== \"string\")\n         node.warn([\"ASSERT fail: in msg the msg.hide (string) must exist.\" , msg]) ;   \n  \n// \nconst DEVIDSYS = \"_system\";\n// fast exit: not SYSTEM: handled be other module\nif (msg.to !== DEVIDSYS) return([null]);\n\n// --------------- generic stuff\n// test: idDev GET command?\nfunction _isGetCommand(msx) {\n    return ((msx.infodp !== undefined) && (msx.payload.value === undefined));\n}\n\n// test: idDev SET command?\nfunction _isSetCommand(msx) {\n    return ((msx.infodp !== undefined) && (msx.payload.value !== undefined));\n}\n\nfunction _getGlobalValue(mx){\nvar tuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus[mx.payload.device] !== undefined) { // ok device field\n   if (mx.infodp === \"schema\") \n          return tuyastatus[mx.payload.device];\n   return tuyastatus[mx.payload.device][mx.payload.property];\n   }\nreturn undefined;\n}\n\nfunction _getHome() {\n    return (global.get(\"instance_name\"));\n}\n\n// base message to log\nvar newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_system\",\n            \"data\": {\n                \"dps\": {}\n            }\n        }\n    };\n    \nif (_isGetCommand(msg)) {  // a GET, but some only \n   switch (msg.infodp){\n// implemented reading tuyastatus       \n      case \"_ACpower\":\n      case \"_WiFinet\":\n      case \"_LANnet\":\n      case \"_laststart\":\n      case \"_timerON\":\n      case \"_timerOFF\":\n      case \"_ACunconnected\":\n      case \"_WiFiunconnected\":\n      case \"_doSCHEMA\":\n      case \"_doUPDATE\":\n      case \"_doBenchmark\":\n//      case \"_benchmark_step\":  to 2\n//      case \"_benchmark_end\" :  to 2\n      case \"_proxy\":\n//      case \"_name\":\n      case \"_doTrigger\":\n      case \"_exec\":\n            //all GETs implemented reading tuyastatus\n            newMsg.payload.data.dps[msg.infodp] = _getGlobalValue(msg);\n            return([null, newMsg]);\n/* deplaced in CORE since v. 2.2.0\ncase \"_name\":  \n          // special: name is defined in CORE global,  must read global.instance_name\n            newMsg.payload.data.dps[msg.infodp] = global.get('instance_name');\n//            node.warn([\"trace _name\", msg, newMsg]);\n            return([null, newMsg]);\n*/            \n      case \"_doBenchmark\":\n             return([null]);\n      case \"schema\":\n            // implemented from tuyastatus.\n            // in schema case, _getGlobalValue   returns  all the dps: {dp:value,...}\n            // filter off pseudoDP in tuyastatus (_connected, _t...)\n             Object.entries(_getGlobalValue(msg)).forEach(([key, value]) =>{\n                if ( ! context.global.PSEUDODP.includes(key.toUpperCase())) {\n                     newMsg.payload.data.dps[key]=value;\n                    }\n            });\n            return([null, newMsg]);\n    }\n}// endif GET\n\n//\nif (_isSetCommand(msg)) {  // a SET, precess here only _proxy\n    switch (msg.infodp){\n      case \"_proxy\":\n          // set  the http REST request\n            let urls = global.get(\"remotemap\");\n            var out = {\n                   url: null,\n                   headers: null,\n                   payload : msg.payload.value, \n                   };\n // puts in payload.remote_from itself (e.g. DEVPC)                   \n               out.payload[\"remote_from\"] =  _getHome();     \n               let tor  = msg.payload.value.remote;\n               if (tor ===  _getHome()){\n                    out.url = urls.local[tor]+\"/tuyaDAEMON\";\n                } else {\n                    out.url = urls.remote[tor]+\"/tuyaDAEMON\";\n                }\n                if(out.url === \"undefined/tuyaDAEMON\"){\n                   node.warn([\"ERROR [_system]: server \"+tor+\" not found: \", urls]);\n                   newMsg.payload.data.dps[msg.infodp] = \"ERROR: server not found\";\n                   return ([null, newMsg]);\n            }\n// only value JSON            \n            let jv = JSON.stringify(out.payload.value);\n            out.payload.value = jv;\n            delete out.payload.remote;\n            newMsg.payload.data.dps[msg.infodp] = \"sent\";\n            return([out,newMsg]);\n   }\n} // endif SET\n// not found: no error.  goto next selectors 2, 3\nreturn([null, null, msg]);\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "97613c2234a6f07a"
            ],
            [
                "dca16029d21c7459"
            ],
            [
                "3f09261b8da646cf"
            ]
        ],
        "outputLabels": [
            "proxy",
            "AC",
            ""
        ],
        "info": "Fake device rules:\n\nGET: returns last value, in some cases from `tuyastatus.device.property`\n    do not use it as TRIGGER: GET is without side effect, can be repeated.\n    \nSET: set a value, returns the same value setted.\n\nSET as TRIGGER: the value CAN be discarted ('any').\n   Returns always immediatly a value, data or only info like \"done\", \"sent\", \"WARNING...\", ...\n   Can PUSH more results later.\n \nSCHEMA: returns values for all readable DPs (like GET) "
    },
    {
        "id": "c851d7c7c9bec970",
        "type": "trigger",
        "z": "a5526c71dbbdfc5a",
        "name": "",
        "op1": "",
        "op2": "ok",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 680,
        "y": 400,
        "wires": [
            [
                "dd64ea384d93a174"
            ]
        ]
    },
    {
        "id": "1b60c89e36211754",
        "type": "trigger",
        "z": "a5526c71dbbdfc5a",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1500",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 340,
        "y": 280,
        "wires": [
            [
                "6e1a1ea7a9a78477",
                "c851d7c7c9bec970",
                "e5748df49b8d98d9"
            ]
        ]
    },
    {
        "id": "97613c2234a6f07a",
        "type": "http request",
        "z": "a5526c71dbbdfc5a",
        "name": "call remote REST",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 710,
        "y": 180,
        "wires": [
            [
                "ea730f3add09866a",
                "d57e5bb382584fd3"
            ]
        ]
    },
    {
        "id": "ea730f3add09866a",
        "type": "subflow:81d3b584.14c888",
        "z": "a5526c71dbbdfc5a",
        "name": "proxy log",
        "env": [
            {
                "name": "deviceID",
                "value": "_system",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "_proxy",
                "type": "str"
            },
            {
                "name": "value",
                "value": "@JSON.parse(msg.payload)",
                "type": "str"
            }
        ],
        "x": 1040,
        "y": 180,
        "wires": [
            [
                "dca16029d21c7459"
            ]
        ]
    },
    {
        "id": "d89fcd5e2f35f7de",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "auto",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "{\"deviceId\":\"_system\",\"data\":{\"dps\":{}}}",
        "payloadType": "json",
        "x": 885,
        "y": 460,
        "wires": [
            [
                "4c359d0d745b4931"
            ]
        ],
        "icon": "node-red/trigger.svg",
        "l": false
    },
    {
        "id": "f13597ce36035ee2",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 1255,
        "y": 500,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "81d5549c5954d366",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "start_DEAMON",
        "mode": "link",
        "links": [
            "1b76f6cb.66b489",
            "23901296.83a0ae",
            "676a993c.b2a4a8",
            "7454f585.417bcc",
            "99db9a3e.c2c4a8",
            "e3071913.55fb98"
        ],
        "x": 1380,
        "y": 460,
        "wires": [],
        "l": true
    },
    {
        "id": "3f09261b8da646cf",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "_system cmd selector (2)",
        "func": "// selects&executes commands for _system: part 2\n// implkementation of more commands\n\n// --------------- locals\nconst DEVID = \"_system\";\n\n// test: _system GET command?\nfunction _isGetCommand(msx) {\n    return ((msx.infodp !== undefined) && (msx.payload.value === undefined));\n}\n\n// test: _system SET command?\nfunction _isSetCommand(msx) {\n    return ((msx.infodp !== undefined) && (msx.payload.value !== undefined));\n}\n       \n// get a device ID array from alldevices.    (alldevices, limit = 'real', 'virtual', 'fake',  null (all))  \nfunction getIdArray(limit = null){\n    var arr =[];\n    if ((limit === null) || (limit === 'real'))\n       context.global.alldevices.real.forEach(dev =>    arr.push(dev.name||dev.cid||dev.id));\n    if ((limit === null) || (limit === 'virtual'))\n       context.global.alldevices.virtual.forEach(dev => arr.push(dev.name||dev.cid||dev.id));\n    if ((limit === null) || (limit === 'fake'))\n       context.global.alldevices.fake.forEach(dev =>    arr.push(dev.name||dev.cid||dev.id));\n    return arr;\n}\n        \n\n//base message to log\nvar newMsg = {\n     payload: {\n         deviceId : \"_system\",\n         data : {\n             dps : {}\n        }\n    }\n};\n\n\n// ============================  fast output processing\nvar req = {\n    to: null,\n    payload: {}\n}\n\n// ------------- main\nif (_isGetCommand(msg)) { //  GETs with runtime implementation\n    switch (msg.infodp) {\n    case \"_timerList\":\n        return ([null, null, null, {topic: \"list\"}]);\n    case \"_tuyastatus\":\n        return ([null, null, null, null, null, null, null, null, null, null, { payload: msg.payload.value}]);\n    case \"_benchmark\":\n        newMsg.payload.data.dps[msg.infodp] = flow.get(\"benchmark\");\n        return ([null, newMsg]);\n    case \"_zeroLog\":\n    case \"_zeroTask\":               // doing nothing\n        newMsg.payload.data.dps[msg.infodp] = \"nothing\";\n        return ([null, newMsg]);\n    case \"_benchmark_step\":               // doing nothing\n    case \"_benchmark_end\":               // doing nothing\n          return ([null]);\n    }\n} // end GET\n\nif (_isSetCommand(msg)) { // a SET\n switch (msg.infodp) {\n // timer\n    case \"_timerON\":\n        if (msg.payload.value.id === undefined)\n            msg.payload.value[\"id\"] = msg._msgid;\n        return ([null, null, null, { topic: \"set\", payload: msg.payload.value } ]);\n    case \"_timerOFF\":\n        newMsg.payload.data.dps[msg.infodp] = \"sent\";\n        return ([null, newMsg, null, { topic: \"clear\", payload: { id: msg.payload.value } } ]);\n// direct access\n    case \"_doTrigger\":\n        if(! global.get(\"modules.core_trigger\")){\n           newMsg.payload.data.dps[msg.infodp] = \"WARNING: this property requires the TRIGGER module.\";\n           return ([null, newMsg]);\n        }\n        let triggerDP = global.get(\"COUNTDP\");  // tuya-bridge countdown\n        let nt = (typeof msg.payload.value === 'string')?parseInt(msg.payload.value):msg.payload.value ;\n        msg = { \"payload\": {  \"dps\": triggerDP, \"set\": nt } };  // this destroy msg.infodp\n        newMsg.payload.data.dps[\"_doTrigger\"] = nt.toString();\n        return ([msg, newMsg]); // _to tuya_bridge:output 1\n    case \"_toLowIN\":\n        newMsg.payload.data.dps[msg.infodp] = msg.payload.value;\n        return ([null, newMsg, null, null, msg.payload.value]);\n    case \"_toFastIN\":\n        newMsg.payload.data.dps[msg.infodp] = msg.payload.value;\n         return ([null, newMsg, null, null, null, { payload: msg.payload.value }]);\n    case \"_toStdCmd\":\n        newMsg.payload.data.dps[msg.infodp] = msg.payload.value;\n        return ([null, newMsg, null, null, null, null, { payload: msg.payload.value }]);\n    case \"_toShare\":\n        newMsg.payload.data.dps[msg.infodp] = msg.payload.value;\n        return ([null, newMsg, null, null, null, null, null, msg.payload.value]);\n    case \"_toLogging\":\n        newMsg.payload.data.dps[msg.infodp] = \"sent\";\n        return ([null, newMsg, null, null, null, null, null, null, { payload: msg.payload.value } ]);\n    case \"_toWarn\":\n       node.warn(msg.payload.value);\n       newMsg.payload.data.dps[msg.infodp] = \"sent\";\n       return ([null, newMsg]);\n    case \"_toGlobal\":       \n        if((msg.payload.value.value === undefined) || (msg.payload.value.variable === undefined)) {\n            node.warn([\"ERROR in SET _system.toGlobal: \", msg]);\n            return ([null]);     \n        }\n        const akey = msg.payload.value.variable;\n        const avalue = msg.payload.value.value;\n        if ((avalue == 'null')|| (avalue == 'NULL')){\n                // is GET\n               newMsg.payload.data.dps[msg.infodp] = msg.payload.value;\n               newMsg.payload.data.dps[msg.infodp].value = global.get(akey);\n        } else {\n                // is SET\n               global.set(akey, avalue);\n               newMsg.payload.data.dps[msg.infodp] = msg.payload.value;\n        }\n        return ([null, newMsg]);     \n    case \"_toDebug\":\n       newMsg.payload.data.dps[msg.infodp] = \"sent\";\n       return ([null, newMsg, null, null, null, null, null, null, null, { payload: msg.payload.value } ]);\n    case \"_beep\":\n        newMsg.payload.data.dps[msg.infodp] =\"done\";\n        return ([null, newMsg, null, null, null, null, null, null, null, null, null, { payload: flow.get(\"beep64\") }]);\n    case \"_play\" :\n        newMsg.payload.data.dps[msg.infodp] = \"sent\";\n        return ([null, newMsg, null, null, null, null, null, null, null, null, null, null, { payload: msg.payload.value }]);\n        \n// global.tuyastus\n    case \"_doSCHEMA\":\n        // 2.2  returns always a LIST[] \n     // becase is used 'fast_cmds', the controls must be done here\n      let o1 = context.global.alldevices.getODev(msg.payload.value);\n      let devName = context.global.alldevices.getDevName(o1);\n      if ((o1 === undefined)||(o1.dps === undefined)||(o1.dps.count <1) || (o1.capability && o1.capability.includes('NONE'))) {\n               newMsg.payload.data.dps[msg.infodp] =  \"WARNING: \"+ devName + \" does not exist or is inaccessible.\"\n               return ([null, newMsg]);\n               }\n       // uses only multiple GETs\n       let list1 = [];\n       o1.dps.forEach(function(property) {                               // uses GETs\n           let dpname = property.name || property.dp.toString();\n           if ((property.capability === undefined) || ([\"RW\",\"RO\",\"GW\",\"WW\"].includes(property.capability)) ) {\n                 const gmsg ={  payload:{'device': devName,'property': dpname }} ;  // local GET\n                 node.send([null, null, null, null, null, gmsg]);\n                 list1.push(dpname);\n                 }\n          });\n         if (list1.length == 0){\n                 newMsg.payload.data.dps[msg.infodp] = \"WARNING: \"+ devName + \" without READ DPs.\";\n                 return ([null, newMsg]);\n                 }\n      newMsg.payload.data.dps[msg.infodp] = {device: devName, dps_get: list1};\n      return ([null, newMsg]);\n      \n    case \"_doUPDATE\":\n        let tuyastatus = global.get(\"tuyastatus\");\n        let allList    = getIdArray(msg.payload.value);\n        let list = [];\n        // becase is used 'fast_cmds', the controls must be done here\n        if ((allList === undefined)||(allList.count <1)) {\n               newMsg.payload.data.dps[msg.infodp] = \"WARNING: Not found \" +msg.payload.value+\" devices\";\n               return ([null, newMsg]);\n               }\n        allList.forEach(function(device) {\n            let devO = context.global.alldevices.getODev(device);\n            var cnx  = context.global.alldevices.getConnectName(devO);\n            let devconnected = ((tuyastatus[cnx]) && tuyastatus[cnx]._connected);\n            if (devconnected) {\n                const gmsg ={  payload:{'device': '_system','property': '_doSCHEMA', 'value': device }} ;\n                node.send([null, null, null, null, null,gmsg]);\n                list.push(device + '; ok');\n                } else {\n                    if (tuyastatus[device])\n                       list.push(device + '; NOT connected');\n                    else\n                       list.push(device + '; *** NOT FOUND in tuyastatus');\n                }\n            });\n        newMsg.payload.data.dps[msg.infodp] = {[(msg.payload.value ? msg.payload.value + \"_devices\":\"devices\")]:list};\n        return ([null, newMsg]);\n\n    case \"_tuyastatus\":\n        return ([null, null, null, null, null, null, null, null, null, null, {\n                    payload: msg.payload.value,\n                    sysname: msg.payload.device,\n                    propname: msg.payload.property } ]);  // to use the usr-names on answer\n// benchmark\n    case \"_zeroTask\":        //  a return msg is required to process 'share'\n        newMsg.payload.data.dps[msg.infodp] = \"done SET \" + msg.infodp;\n        return ([null, newMsg]);\n    case \"_zeroLog\":         //  analyzes the given 'value' for tests   \n       newMsg.payload.data.dps[msg.infodp] = [\"Normalized SET value: \" + typeof(msg.payload.value), msg.payload.value];\n       return ([null, newMsg]); \n    case \"_benchmark\":\n        flow.set(\"benchmark\", msg.payload.value);\n        newMsg.payload.data.dps[msg.infodp] = msg.payload.value;\n        return ([null, newMsg]);\n    case \"_doBenchmark\":\n        let benchmark = flow.get(\"benchmark\");\n         //\n        flow.set(\"benchmark_count\", 1);\n        flow.set(\"bnch_status\", \"run\")\n        //  timer for end benckmark\n        var timex = {\n            \"device\": \"_system\",\n            \"property\": \"_timerON\",\n            \"value\": {\n                \"id\": \"bench\",\n                \"timeout\": benchmark.timeout || 10000,\n                \"alarmPayload\":{\n                    \"share\": [{\n                            \"action\": [{\n                                    \"device\": \"_system\",\n                                    \"property\": \"_benchmark_end\",\n                                    \"value\":\"any\"\n                            }] }]\n                }\n            }\n        }\n        newMsg.payload.data.dps[msg.infodp] = \"started\";\n         return([null, newMsg, null, null, null, {payload:benchmark}, {payload: timex}]);\n     case \"_benchmark_step\":\n        let bnch_status = flow.get(\"bnch_status\");\n        let c = flow.get(\"benchmark_count\");\n// security exit\n        if (c > 50000){\n              flow.set(\"bnch_status\", \"done\");\n              bnch_status = \"done\";\n         }\n        let benchx = flow.get(\"benchmark\");\n        switch (bnch_status){\n            case(\"run\"):\n               flow.set(\"benchmark_count\", c +1);\n               return ([null, null, null, null, null, {payload: benchx}]);        \n            case(\"done\"):\n                flow.set(\"bnch_status\", \"wait\")\n                newMsg.payload.data.dps[\"_doBenchmark\"] = {\n                    \"count\": c > 50000 ? \"owerflow\":c,\n                    \"timeout\":  benchx.timeout,\n                    \"device\":   benchx.device,\n                    \"property\": benchx.property };\n                return ([null, newMsg]);\n        }\n        return ([null]);\n     case \"_benchmark_end\":\n       flow.set(\"bnch_status\", \"done\");\n       return([null]);\n    case \"_exec\":\n       newMsg.payload.data.dps[msg.infodp] = \"started\";\n       return ([null, newMsg, null, null, null, null, null, null, null, null, null, null, null, { payload: msg.payload.value } ]);\n    } // end case\n} // endif SET\n// not found: no error.  goto next selector\nreturn ([null, null, null, null, null, null, null, null, null, null, null, null, null, null, msg]);\n",
        "outputs": 15,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 700,
        "wires": [
            [
                "134a47631a141e3e"
            ],
            [
                "f81aafbe0a2b5a31"
            ],
            [
                "134a47631a141e3e"
            ],
            [
                "692b466f6b797680"
            ],
            [
                "4ab7da19b068b4a6"
            ],
            [
                "5624bd3752571577"
            ],
            [
                "371255b9d130b435"
            ],
            [
                "00017fb9fd04aca6"
            ],
            [
                "05fea1027e2695a8"
            ],
            [
                "8a271a21bfe2917c"
            ],
            [
                "8f1cf611bc2788e5"
            ],
            [
                "6a5d8f796db6049e"
            ],
            [
                "a62c4e5943b62421"
            ],
            [
                "570ccca9343c85ba"
            ],
            [
                "5734ca4897ce98d2"
            ]
        ],
        "outputLabels": [
            "to tuya_bridge",
            "to logging",
            "do trg_ping",
            "do Timer",
            "to low_IN",
            "to fast_IN",
            "to std_IN",
            "to share_IN",
            "to logging_IN",
            "do debug",
            "do tuyastatus",
            "do beep64",
            "do play",
            "to_next",
            ""
        ],
        "info": "Select GET/SET/SCHEMA/MULTIPLE  commands \nfor 'fake' device\n\nImplementation:\n\n\"_system\":\"_trgPing\" accepts only GET: fires a data refresh.\n             \nThe stadard GET tuyaDAEMON request\n````\n    msg.payload:{\n        \"device\":\"_system\", \n        \"property\":\"_trgPing\"  \n        } \n````        \nfires a flow that implements the command.\n"
    },
    {
        "id": "f81aafbe0a2b5a31",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 635,
        "y": 520,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "134a47631a141e3e",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to trigger.tuya_bridge_IN",
        "mode": "link",
        "links": [
            "c9f43698db6a94fd"
        ],
        "x": 635,
        "y": 560,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "d3cc1989079091e3",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "_system (fake device) ",
        "info": "a) Initial configuration: see `*Global SYSTEM config` node.\n\nb) EXPECTED OUTPUT\nat start, in sidebar:\n\n````\n26/4/2023, 10:48:13node: tuyaDAEMON.core.info\nmsg.payload : array[2]\n[ \"RX: HAL@home/_laststart\", \"2023-04-26 10:48:14\" ]\n````\n\nb) TEST FLOW\nTest mini-flows are present for virtually all features.\nSee result in sidebar.\n\n### Troubleshooting ###\n\n1. _After 'Deploy' the module don't send nothing to sidebar log_\n2. _Some tests do not work at all (no log)_\n\n   _Cause_: The 'Deploy', after an 'Import', sometime (not clear why) do not set external 'link' nodes.\n\n   **Important: After 'Import' + 'Deploy' CHECK all external links nodes**. <br>\n   As help, the name of all Links shows the origin or the destination (e.g.: `from core.'to fake devices'`, `to core.'logging'`)\n\n3. _fake deviceID 'required'_<br>\n  Doing any DB test, or using `'_system._sqlDBlocal'` or  `'_system._sqlDBremote'` you get as response:\n````\n 0: \"ERROR [OUT data]: ADD to alldevices the real/fake deviceId: required (undefined)\"\n 1: object\n````\n  The cause is an null value for 'deviceID' (after an `'import'+'deploy'`)\nin the `CORE.do logging` subflow near the `CORE.execute on DB local` node.<br>\n  Set it to `[string] _system`. (credential not required).\n\n4. _SYSTEM STARTUP ERROR: adjust the startup delay_\n  You need to increment the delay in 'startup delay' node. See [starup process](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#the-tuyadaemon-three-step-startup-process).\n  \n\n**GENERAL WARNING**: the `'import'+'Deploy'` does not copy `'credential' parameters`.\nTuyaDAEMON uses `credential` only in input fields containing `'id'` and `'key'` of Tuya devices (optional).<br>\n_So you must check all nodes with the 'credential' option:_\n - `tuya-smart-device` node\n - `do logging`, `do command`, `static retry`, `dynamic retry`, `REFRESH` CORE subflows.\n\nnote: exception is the `CORE.'*device selector'` node because the `switch` node-red node does not accept `credentials` (see [request77622](https://discourse.nodered.org/t/switch-node-accepts-credentials-in-test-value/77622))\n \n------------------------------------\n2.2.2\n- refactoring some nodes (added 'let', 'const': var declaration)\n- updated installation istructions\n\n2.2.1: Bug list\n\n- Reduced 'power' options to BAT, AC, UPS\nW\n- Bad use of 'Max time' in REFRESCH parameter, replaced by 'Max_time' (MUST be a js variable name)\n",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "5554f60a5ca2ce3c",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "GET _name",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_core\",\"property\":\"_name\"}",
        "payloadType": "json",
        "x": 710,
        "y": 1260,
        "wires": [
            [
                "76b2fa834194d529"
            ]
        ],
        "info": "simple GET command\n\nname from 'Global CORE configuration'.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#_proxy"
    },
    {
        "id": "692b466f6b797680",
        "type": "jsontimer",
        "z": "a5526c71dbbdfc5a",
        "name": "",
        "locale": "it-IT",
        "localeOptions": "{\"weekday\":\"long\",\"month\":\"2-digit\",\"day\":\"2-digit\"}",
        "x": 740,
        "y": 600,
        "wires": [
            [
                "f08f28bbb55d5317"
            ],
            [
                "37813cab57096498"
            ]
        ]
    },
    {
        "id": "f08f28bbb55d5317",
        "type": "switch",
        "z": "a5526c71dbbdfc5a",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "list",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "settimer",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "clearedtimer",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "alarm",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 990,
        "y": 580,
        "wires": [
            [
                "0f502a237b5f6ac4"
            ],
            [
                "95ad5d6cc8d1b1de"
            ],
            [
                "48d5b7f6bdf05328"
            ],
            [
                "1ed972331da87c92"
            ],
            [
                "f420808f2018f536"
            ]
        ]
    },
    {
        "id": "91204bfd0f7db998",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.share IN",
        "mode": "link",
        "links": [
            "2b1bbabc29e7e844"
        ],
        "x": 1445,
        "y": 800,
        "wires": []
    },
    {
        "id": "48d5b7f6bdf05328",
        "type": "subflow:81d3b584.14c888",
        "z": "a5526c71dbbdfc5a",
        "name": "make ERROR event",
        "env": [
            {
                "name": "deviceID",
                "value": "_system",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "_timerON",
                "type": "str"
            },
            {
                "name": "value",
                "value": "@\"ERROR \"+msg.error",
                "type": "str"
            }
        ],
        "x": 1240,
        "y": 640,
        "wires": [
            [
                "f6ac765bbb80fb29"
            ]
        ]
    },
    {
        "id": "95ad5d6cc8d1b1de",
        "type": "subflow:81d3b584.14c888",
        "z": "a5526c71dbbdfc5a",
        "name": "make timerON event",
        "env": [
            {
                "name": "deviceID",
                "value": "_system",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "_timerON",
                "type": "str"
            },
            {
                "name": "value",
                "value": "msg.datetime",
                "type": "str"
            }
        ],
        "x": 1240,
        "y": 600,
        "wires": [
            [
                "f6ac765bbb80fb29"
            ]
        ]
    },
    {
        "id": "0f502a237b5f6ac4",
        "type": "subflow:81d3b584.14c888",
        "z": "a5526c71dbbdfc5a",
        "name": "make list event",
        "env": [
            {
                "name": "deviceID",
                "value": "_system",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "_timerList",
                "type": "str"
            },
            {
                "name": "value",
                "value": "msg.timers",
                "type": "str"
            }
        ],
        "x": 1220,
        "y": 560,
        "wires": [
            [
                "f6ac765bbb80fb29"
            ]
        ]
    },
    {
        "id": "f6ac765bbb80fb29",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 1445,
        "y": 560,
        "wires": []
    },
    {
        "id": "175481bf0bd1abec",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "timerON test1: delayed beep (20s)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_timerON\",\"value\":{\"id\":\"test1\",\"timeout\":20000,\"alarmPayload\":{\"device\":\"_system\",\"property\":\"_beep\",\"value\":\"any\"}}}",
        "payloadType": "json",
        "x": 1280,
        "y": 1600,
        "wires": [
            [
                "b79d9669ece59f4b"
            ]
        ],
        "info": "NOTE:\nIt's okay if it sends a _beep command 20 s later.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#timer-functions\n\n"
    },
    {
        "id": "b79d9669ece59f4b",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1515,
        "y": 1600,
        "wires": []
    },
    {
        "id": "782d305649304746",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "timerOFF test1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_timerOFF\",\"value\":\"test1\"}",
        "payloadType": "json",
        "x": 1220,
        "y": 1680,
        "wires": [
            [
                "b79d9669ece59f4b"
            ]
        ],
        "info": "_timerOFF\n   Abort timer 'test1', no _beep.\n   note: do it after 'timerON test1: delayed beep (20s)'\n   \n   see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#timer-functions\n   "
    },
    {
        "id": "9cc7296265143868",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "timer  GET list",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_timerList\"}",
        "payloadType": "json",
        "x": 1210,
        "y": 1720,
        "wires": [
            [
                "b79d9669ece59f4b"
            ]
        ],
        "info": "_timerList:\n   Get a list of running  timers.\n      note: do it after 'timerON test1: delayed beep (20s)' and/or 'imerON test2: 30s (share)'\n   \nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#timer-functions"
    },
    {
        "id": "1ed972331da87c92",
        "type": "subflow:81d3b584.14c888",
        "z": "a5526c71dbbdfc5a",
        "name": "make timerOFF event",
        "env": [
            {
                "name": "deviceID",
                "value": "_system",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "_timerOFF",
                "type": "str"
            },
            {
                "name": "value",
                "value": "@\"Cleared timer id: \"+ msg.id",
                "type": "str"
            }
        ],
        "x": 1240,
        "y": 680,
        "wires": [
            [
                "f6ac765bbb80fb29"
            ]
        ]
    },
    {
        "id": "eab589c40c2126da",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "Test cases for  core + system",
        "info": "see:\nhttps://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system\n\nnote: \"none\" is the default initial value for many dPs.",
        "x": 200,
        "y": 1200,
        "wires": []
    },
    {
        "id": "48c16323d3b7ce0d",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "timer",
        "info": "Timer for user commands.\nSee system:  `_timerON`, `_timerOFF`, `_timerList`  DPs.",
        "x": 1010,
        "y": 660,
        "wires": []
    },
    {
        "id": "e66651872c7ae837",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "proxy",
        "info": "used to do REST between tuyaDAEMON instances",
        "x": 1230,
        "y": 140,
        "wires": []
    },
    {
        "id": "c482c05a43ab2a94",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "Alarms (readme)",
        "info": "SYSTEM Alarms:\n\nSee system, `_ACpower`, `_ACunconnected`,  `_LANnet`, `_WIFInet`, `_WIFIunconnected`, `_laststart` DPs.\n\nChecked for any changes in the state of the devices and according to the definition of \"power\" of the device\n(requires some devices to work):\n\n- **AC_ALARM**:      some real devices are 'AC' powered AND  all are unconnected\n\n- **WIFI_ALARM**:    some real devices are not 'BAT' powered AND not AC_ALARM AND all are unconnected\n\n- **LAN_ALARM**:     can not cannect a web site (default: nodered.com).\n\nOnly at start:\n\n- **start_DEAMON**:  signals tuyaDAEMON start, after the initial connection activity.\n                     User defined delay (defaut 10 s). Example: can be used to do initial UI refresh.\n\nnote: user can reduce the Alarm visibility (see [hide](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices#output-control))  or disable related nodes. ",
        "x": 700,
        "y": 460,
        "wires": []
    },
    {
        "id": "4ab7da19b068b4a6",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.low_level_IN",
        "mode": "link",
        "links": [
            "2915d560219eaa90"
        ],
        "x": 635,
        "y": 640,
        "wires": []
    },
    {
        "id": "00017fb9fd04aca6",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.share IN",
        "mode": "link",
        "links": [
            "2b1bbabc29e7e844"
        ],
        "x": 635,
        "y": 760,
        "wires": []
    },
    {
        "id": "371255b9d130b435",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 635,
        "y": 720,
        "wires": []
    },
    {
        "id": "5624bd3752571577",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.fast_cmds",
        "mode": "link",
        "links": [
            "58d95ec5fc3c0d06"
        ],
        "x": 635,
        "y": 680,
        "wires": []
    },
    {
        "id": "8f1cf611bc2788e5",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "tuyastatus",
        "func": "//  GET, SCHEMA: solved from tuyastaus, returns data \n//  SET, MULTIPLE: added to tuyastatus\n// input: payload:{device:<name>,property:<name>,value} note: names, not id/dp\n\n\nvar tuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined) return null;\n\n// builds a message for log\nvar newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_system\",\n            \"data\": {\n                \"dps\": {}\n            }\n        }\n    };\n// ----------- is LIST\nif ((msg.payload === undefined) || (msg.payload.device === undefined)){  \n         msg[\"payload\"] = {list: Object.keys(tuyastatus)};\n         newMsg.payload.data.dps[\"_tuyastatus\"] = msg.payload;\n         return (newMsg);\n       }\n\n// -----------------------  device normalization\nvar devObj = context.global.alldevices.getODev(msg.payload.device);\nif (devObj === undefined) {\n    node.warn([\"ERROR _system.tuyastatus: not found in alldevices the device '\" + msg.payload.device + \"'\", msg]);\n    return [null];\n}\nmsg.payload.device =context.global.alldevices.getDevName(devObj);\nmsg[\"to\"] = (devObj.cid !== undefined)? devObj.cid: devObj.id;\n// ------------------------ property normalization\nmsg[\"infodp\"] = \"schema\";\nif (msg.payload.property !== undefined)  { \n       const dpObj =context.global.alldevices.getODps(devObj, msg.payload.property);\n       if (dpObj !== undefined) {\n            msg[\"infodp\"] =  dpObj.dp.toString();\n            msg.payload.property = (dpObj.name === undefined) ? dpObj.dp : dpObj.name; \n        } else {\n           msg[\"infodp\"] = msg.payload.property.toString(); \n        }\n}\n//  end normalization\n\n// clear old response, if any\nif (tuyastatus[msg.sysname][msg.propname] !== undefined)\n  delete tuyastatus[msg.sysname][msg.propname];\n // bad, abort (unused ?)\nif ( tuyastatus[msg.payload.device] === undefined) {\n             node.warn([\"Not found in tuyastatus \"+ msg.payload.device, tuyastatus, msg]);\n             return null;\n         }\n \n// ------------ is SCHEMA\nif (msg[\"infodp\"] === \"schema\")  { \n         msg.payload['value'] =  {schema: tuyastatus[msg.payload.device]};\n         newMsg.payload.data.dps[\"_tuyastatus\"] = msg.payload;\n         return (newMsg);\n}\n// ------------ is GET\nif (msg.payload.value === undefined) { \n        if ( tuyastatus[msg.payload.device][msg.payload.property] === undefined) {\n             node.warn([\"Not found in tuyastatus \"+ msg.payload.device + \".\"+msg.payload.property, tuyastatus, msg]);\n             return null;\n         }\n         msg.payload['value'] = tuyastatus[msg.payload.device][msg.payload.property];\n         newMsg.payload.data.dps[\"_tuyastatus\"] = msg.payload;\n         return (newMsg);\n      }\n// ------------ is SET\n     tuyastatus[msg.payload.device][msg.payload.property] = msg.payload.value;\n     newMsg.payload.data.dps[\"_tuyastatus\"] = msg.payload;\n     global.set(\"tuyastatus\", tuyastatus);\n     return (newMsg);\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 880,
        "wires": [
            [
                "a53af0d5e5df6d7f"
            ]
        ]
    },
    {
        "id": "25805a5e251b72e3",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 475,
        "y": 980,
        "wires": []
    },
    {
        "id": "05fea1027e2695a8",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 635,
        "y": 800,
        "wires": []
    },
    {
        "id": "8a271a21bfe2917c",
        "type": "debug",
        "z": "a5526c71dbbdfc5a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 635,
        "y": 840,
        "wires": [],
        "l": false
    },
    {
        "id": "05c4ecdb8cd3555d",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.fast_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1015,
        "y": 1580,
        "wires": []
    },
    {
        "id": "f25828148e15e6be",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test GET last benckmark",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_benchmark\"}",
        "payloadType": "json",
        "x": 750,
        "y": 1840,
        "wires": [
            [
                "ba11857305a8d634"
            ]
        ],
        "info": "GET: returns benchmark settings.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#benchmark"
    },
    {
        "id": "a07d5c31ae2eda16",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test zeroTASK",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_zeroTask\"}",
        "payloadType": "json",
        "x": 710,
        "y": 1580,
        "wires": [
            [
                "05c4ecdb8cd3555d"
            ]
        ],
        "info": "\nZeroTask is the simplest and fastest task of tuyaDAEMON: it does nothing.\nWithout any logs, it is used for stress tests and benchmarks.\n\nRunning this you do not see any effect, any log.... of course !\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#benchmark"
    },
    {
        "id": "e648af2138bf6b43",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test zeroLOG",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_zeroLog\",\"value\":\"any\"}",
        "payloadType": "json",
        "x": 710,
        "y": 1620,
        "wires": [
            [
                "05c4ecdb8cd3555d"
            ]
        ],
        "info": "ZeroLog does nothing, but it does logs. Also used for stress tests and benchmarks.\n\nIN SET case, it returns the actal value.\n\nnote: this feature can be used to test an ENCODE function, or, in general, to ceck the user values processing, changing temporally the alldevices definition for _zeroLOG (\"type\" or \"typefield\") and putting a test value in \"value\".\n\nhttps://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#benchmark\n\nOn the Debug sidebar:\n\n           25/4/2023, 09:09:49node: tuyaDAEMON.core.info\n           msg.payload : array[2]\n             array[2]\n             0: \"RX: HAL@home/_zeroLog\"\n             1: array[2]\n                 0: \"Normalized SET value: string\"\n                 1: \"any\"       "
    },
    {
        "id": "361b2b4143a9c7a5",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "START doBenckmark (SET)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_doBenchmark\",\"value\":\"start\"}",
        "payloadType": "json",
        "x": 750,
        "y": 1760,
        "wires": [
            [
                "ba11857305a8d634"
            ]
        ],
        "info": "This start a benchmark, prepared by '_benchmark' property.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#benchmark\n\nExpected result:\n \n     [ \"TX: SET fake HAL@home/_doBench…\", \"start\" ]\n     [ \"RX: HAL@home/_doBenchmark\", \"started\" ]\n\n     [ \"TX: SET fake HAL@home/_timerON\", object ]\n     [ \"RX: HAL@home/_timerON\", \"Sat Apr 02 2022 13:14:21 GMT+0…\" ]\n\n Now run the test task (in this case zeroTASK, so no messages )\n\n     [ \"RX: HAL@home/_timerON\", \"Done id: bench\" ]\n     \n     [ \"RX: HAL@home/_doBenchmark\", object ]\n     \nnote: in `node-red` the order of debug pad messages is not guaranteed.     "
    },
    {
        "id": "ca3d67a771af9a07",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "choose benckmark:  zeroTask  (5s)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_benchmark\",\"value\":{\"device\":\"_system\",\"property\":\"_zeroTask\",\"timeout\":5000}}",
        "payloadType": "json",
        "x": 770,
        "y": 1660,
        "wires": [
            [
                "05c4ecdb8cd3555d"
            ]
        ],
        "info": "This prepare a benchmak using _zeroTask for 10 s.\nThe benchmark starts using doBenchmark\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#benchmark"
    },
    {
        "id": "f62777297936d67d",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "choose benckmark:  zeroLog (10s)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_benchmark\",\"value\":{\"device\":\"_system\",\"property\":\"_zeroLog\",\"timeout\":10000}}",
        "payloadType": "json",
        "x": 780,
        "y": 1700,
        "wires": [
            [
                "05c4ecdb8cd3555d"
            ]
        ],
        "info": "This prepare a benchmak using _zeroLog for 20 s.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#benchmark"
    },
    {
        "id": "e4df6008966d719f",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test  GET doBenckmark",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_doBenchmark\"}",
        "payloadType": "json",
        "x": 740,
        "y": 1800,
        "wires": [
            [
                "ba11857305a8d634"
            ]
        ],
        "info": "\nGET: it returns last result or 'none'."
    },
    {
        "id": "d3e3bb62746e093a",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.sql_DB",
        "mode": "link",
        "links": [
            "e25bb184102329ba"
        ],
        "x": 475,
        "y": 1040,
        "wires": []
    },
    {
        "id": "5734ca4897ce98d2",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "*_system custom selector (3)",
        "func": "// selects&executes commands for _system: part 3\n// CUSTOMIZATION for used DB, error messages\n//\n// --------------- locals\nconst DEVID = \"_system\";\n\nfunction _getGlobalValue(mx){\nvar tuyastatus = global.get(\"tuyastatus\");\nif ((tuyastatus !== undefined) && (tuyastatus[mx.payload.device] !== undefined)) { // ok device field\n   if (mx.infodp === \"schema\") \n          return tuyastatus[mx.payload.device];\n   return tuyastatus[mx.payload.device][mx.payload.property];\n   }\nreturn undefined;\n}\n\n// test: _system GET command?\nfunction _isGetCommand(msx) {\n    return ((msx.infodp !== undefined) && (msx.payload.value === undefined));\n}\n\n// test: _system SET command?\nfunction _isSetCommand(msx) {\n    return ((msx.infodp !== undefined) && (msx.payload.value !== undefined));\n}\n\n//base message to log\nvar newMsg = {\n     payload: {\n         deviceId : DEVID,\n         data : {\n             dps : {}\n        }\n    }\n};\n// TO COSTOMIZE for more DataBase used: set  one 'dp' for DB!\n// To NOT use some/all DBs: disable nodes and configuration\n// --------------------------  main\nif (_isGetCommand(msg)) { // a GET\n    switch (msg.infodp) {\n      case \"_sqlDBlocal\":     \n      case \"_sqlDBremote\":            // default uses 2 DBs\n// GET implemented reading tuyastatus\n            newMsg.payload.data.dps[msg.infodp] = _getGlobalValue(msg);\n            return([newMsg]);\n    }\n// ----------------\n// last selector: warning if not processed\n  node.warn([\"WARNING [\"+DEVID+\"] The GET of dp '\"+msg.infodp+\"' is NOT allowed.\", msg])\n  newMsg.payload.data.dps[msg.infodp] = \"WARNING: GET not allowed\";\n return ([newMsg]);\n}\n\nif (_isSetCommand(msg)) { // a SET\n    switch (msg.infodp) {\n      case \"_sqlDBlocal\":\n      case \"_sqlDBremote\":              // one 'dp' for DB: HERE CUSTOM\n//\n// test: are DBs ok? reading tuyastatus._system. _BBase (for all DBs, true|false)\n// ---- get user name\n    const devObj = context.global.alldevices.getODev(\"_core\", \"fake\");\n    const dpObj  =context.global.alldevices.getODps( devObj, \"_DBase\");\n    const devName= devObj.name? devObj.name:\"_core\";\n    const dpName = dpObj.name? dpObj.name: \"_DBase\";\n// test\n   let dbase = global.get(\"tuyastatus.\"+devName+\".\"+dpName);\n   if (dbase && (dbase !== \"none\")) {\n// since 2.2.0: added hide, \"_dbase\"       \n        return ( [null,  {topic: msg.payload.value,\n                         to: \"_dbase\",\n                         hide: msg.hide,\n                         infodp: msg.infodp }]);  \n   }\n   newMsg.payload.data.dps[msg.infodp] = \"WARNING: DataBase disconnected\";\n   return ([newMsg]);\n     }\n// ------------------------     \n// last selector: warning if not processed\n node.warn([\"WARNING [\"+DEVID+\"] The SET of dp '\"+msg.infodp+\"' is NOT allowed.\", msg])\n newMsg.payload.data.dps[msg.infodp] = \"WARNING: SET not allowed\";\n return ([newMsg]);\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1000,
        "wires": [
            [
                "25805a5e251b72e3"
            ],
            [
                "d3e3bb62746e093a"
            ]
        ],
        "info": "CUSTOMIZATION\n\nAdding/deleting DB: here is the case of 2 DB \n\nTo add/modify DB\n  \n - set 2 nodes for every DB (log, no-log)\n - update '*all DB status' node\n  \n - define a `_system` property for every DB (like `_sqlDBlocal`, `_sqlDBremote`) \n \n - add properties to alldevices (using `tuyadaemotoolkit` if you like)\n \n - edit this function: one 'dp' for DB\n  \n"
    },
    {
        "id": "a62c4e5943b62421",
        "type": "play audio",
        "z": "a5526c71dbbdfc5a",
        "name": "*Telemachus",
        "voice": "21",
        "x": 690,
        "y": 980,
        "wires": [],
        "info": "Set language and voice in the node interface (system dependent)."
    },
    {
        "id": "6a5d8f796db6049e",
        "type": "base64",
        "z": "a5526c71dbbdfc5a",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 680,
        "y": 920,
        "wires": [
            [
                "a62c4e5943b62421"
            ]
        ]
    },
    {
        "id": "6ccc07b921efa5ca",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test  BEEP",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_beep",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "any",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1320,
        "wires": [
            [
                "37510f83c59a7f38"
            ]
        ],
        "info": "Acustic signal.\nnote: \n  This sound is stored as string in Global.beep64\n  \nsee  https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#user-interface\n"
    },
    {
        "id": "4a17ac298cf89a83",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test  Hello Word",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_play",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "Hello word, I'm HAL@home, your tuyadaemon System device.",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1260,
        "wires": [
            [
                "37510f83c59a7f38"
            ]
        ],
        "info": "Set the language and the voice in the node interface (system dependent).\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#user-interface"
    },
    {
        "id": "37510f83c59a7f38",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 545,
        "y": 1260,
        "wires": []
    },
    {
        "id": "31a585e134365ef4",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test  BEEP LOOP",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_beep_loop",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "{\"count\":3, \"timeout\":1000}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1360,
        "wires": [
            [
                "37510f83c59a7f38"
            ]
        ],
        "info": "\nnote:\nThis is an example of command repetiton, build in \nGlobal.AllDevice structure, using 'share' capabilities.\n\nsee  https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#user-interface\n\nOUTPUT (with default 'hide' setting)\n````\n       //  no TX for `HAL@home/_beep_loop` because defined 'SKIP', only RX\nmsg.payload : array[2]\n[ \"RX: HAL@home/_beep_loop\", object ]\n26/4/2023, 21:26:16node: tuyaDAEMON.core.info\n       //  no TX for `HAL@home/_beep` because 'share' uses 'fast_cmd'\nmsg.payload : array[2]\n[ \"RX: HAL@home/_beep\", \"done\" ]\n26/4/2023, 21:26:17node: tuyaDAEMON.core.info\n       // no timer TX/RX because hide = 'K' for 'HAL@home/_timerON'\n       // round 2\nmsg.payload : array[2]\n[ \"RX: HAL@home/_beep_loop\", object ]\n26/4/2023, 21:26:17node: tuyaDAEMON.core.info\n\nmsg.payload : array[2]\n[ \"RX: HAL@home/_beep\", \"done\" ]\n26/4/2023, 21:26:18node: tuyaDAEMON.core.info\n       // round 3\nmsg.payload : array[2]\n[ \"RX: HAL@home/_beep_loop\", object ]\n26/4/2023, 21:26:17node: tuyaDAEMON.core.info\n\nmsg.payload : array[2]\n[ \"RX: HAL@home/_beep\", \"done\" ]\n26/4/2023, 21:26:18node: tuyaDAEMON.core.info\n        // round 4: exit\nmsg.payload : array[2]\narray[2]\n0: \"RX: HAL@home/_beep_loop\"\n1: object\ncount: 0          // exit condition\ntimeout: 1000\n\n````\n\n\n"
    },
    {
        "id": "570ccca9343c85ba",
        "type": "exec",
        "z": "a5526c71dbbdfc5a",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 670,
        "y": 1040,
        "wires": [
            [
                "f3954eb10508735a"
            ],
            [
                "f3954eb10508735a"
            ],
            []
        ]
    },
    {
        "id": "f3954eb10508735a",
        "type": "subflow:81d3b584.14c888",
        "z": "a5526c71dbbdfc5a",
        "name": "",
        "env": [
            {
                "name": "deviceID",
                "value": "_system",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "_exec",
                "type": "str"
            },
            {
                "name": "value",
                "value": "@msg.payload||\"done\"",
                "type": "str"
            }
        ],
        "x": 870,
        "y": 1040,
        "wires": [
            [
                "caae4605bf6a9215"
            ]
        ]
    },
    {
        "id": "d57e5bb382584fd3",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "remote log",
        "func": "\n\nvar newMsg = { \n    \"payload\":{\n        \"deviceId\": null, \n        \"data\": {\n            \"t\": Math.floor( Date.now() / 1000 ),    // timestamp (sec), optional, \n            \"dps\":{\n            }}}};\n\n\n// ------  main\n    let paydata = JSON.parse(msg.payload);\n    \n//---------------------- some assert\n    if (!( paydata.remote_from )) {\n        node.warn([\"ASSERT [proxy] fail: msg.payload.remote_from  must exist\", msg]);\n        return [null];\n        }\n    \n    var o = context.global.alldevices.getODev (paydata.device || \"_system\");\n    \n    if (o === undefined){\n        node.warn([\"ERROR [proxy]: not found remote device \"+ paydata.device, msg]);\n        return [null];\n     }\n     //    newMsg.from = o.id;\n    newMsg.payload.deviceId =o.id;\n    newMsg.payload[\"remote_from\"] =  paydata.remote_from;\n\n        \n    if (paydata.list !== undefined){  // is list\n        newMsg.payload.data.dps[\"list\"]= paydata.list.sort();\n        return newMsg;\n    }\n    \n    if (paydata.schema !== undefined){     // is schema: record for any dp - pseudoDP\n       Object.entries(paydata.schema).forEach(([key, value]) =>{\n          if ( ! context.global.PSEUDODP.includes(key.toUpperCase())) {\n              newMsg.payload.data.dps[key]=  value;\n              }\n          });\n    return newMsg;\n    }\n//    node.warn([\"IN REST \", paydata])\n    if(paydata.status)  // is SET\n        return null;\n//       newMsg.payload.data.dps[ paydata.property]=  paydata.status;   // extra value 'sent'\n//    else                // is GET\n      newMsg.payload.data.dps[ paydata.property]=  paydata.value; \n //   node.warn([\" OUT msg remote \", newMsg]);\n    return newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "dca16029d21c7459"
            ]
        ]
    },
    {
        "id": "ab08cd796da23c3c",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.fast_cmds",
        "mode": "link",
        "links": [
            "58d95ec5fc3c0d06"
        ],
        "x": 1445,
        "y": 740,
        "wires": []
    },
    {
        "id": "37813cab57096498",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "command/share select",
        "func": "if (msg.share)           // is share\n   return([null, msg]);\nlet newMsg = {payload:msg};  // is command\nreturn ([newMsg, null]);",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 780,
        "wires": [
            [
                "ab08cd796da23c3c"
            ],
            [
                "91204bfd0f7db998"
            ]
        ],
        "outputLabels": [
            "to core.fst_cmds",
            "to core.share_IN"
        ]
    },
    {
        "id": "a293b6a9f39b4b4d",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "GET _laststart  property",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_laststart",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 740,
        "y": 1480,
        "wires": [
            [
                "f68d45a8191ae7d5"
            ]
        ],
        "info": "\nreturs this run value:\n          [\"RX: HAL@home/_laststart\",\"2022-03-27 08:56:24\"]\n          \nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#_laststart"
    },
    {
        "id": "e289f817134b4534",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1025,
        "y": 2060,
        "wires": []
    },
    {
        "id": "88d08e945ff3ca37",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "SET _tuyastatus ()",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_tuyastatus",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1480,
        "wires": [
            [
                "fa316c8dab06aab8"
            ]
        ],
        "info": "This is a SET (it as a value) but really it is a trigger for an action: to 'get tuyastatus data'.\n \n  If payload.value.device does NOT exist,\n         returns a 'list' of all devices in tuyastatus, using usernames (if defined).\n         \n  Example:\n   \n              list: array[3]\n                 0: \"tuya_bridge\"\n                 1: \"core\"\n                 2: \"HAL@home\"\n   \n   see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#tuyastatus"
    },
    {
        "id": "fa316c8dab06aab8",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 545,
        "y": 1480,
        "wires": []
    },
    {
        "id": "89e62e523fd9f8eb",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "SET tuyastatus ( _system. _laststart )  to a fake value",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_tuyastatus",
                "vt": "str"
            },
            {
                "p": "payload.value.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.value.property",
                "v": "_laststart",
                "vt": "str"
            },
            {
                "p": "payload.value.value",
                "v": "2000-01-02 03:04:05",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 1600,
        "wires": [
            [
                "fa316c8dab06aab8"
            ]
        ],
        "info": "This command is a SET (because it contains a value) but is actually a trigger for an action: to 'set tuyastatus data'.\n\n     If payload.value.device exists,\n     AND there is payload.value.property,\n     AND there is payload.value.value:\n         this SET the value to 'tuyastatus.device.property'.       \n       \n  ATTENTION: no checks are made on device, property and value, so it is possible to do anything (good) but it is dangerous, very dangerous: all the logic of tuyaDAMON can be broken (bad) !\n  \n    Example:\n       this example sets a 'fake' value for 'system.laststart'. Check the result with the 'GET _laststart property' test\n       \nsee  https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#tuyastatus       "
    },
    {
        "id": "0b0e8a5d5bed9041",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "GET _tuyastatus ( _core )",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_tuyastatus",
                "vt": "str"
            },
            {
                "p": "payload.value.device",
                "v": "_core",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 1520,
        "wires": [
            [
                "fa316c8dab06aab8"
            ]
        ],
        "info": "This command is a SET (it as a value) but really it is a trigger for an action: to 'get tuyastatus data'.\n\n\n     If payload.value.device exists,\n     and there is NO payload.value.property:   \n       it returns a object: a tuyastatus fragment\n \n   Example:\n       1: object\n          device: \"core\"\n          value: object\n             schema: object\n                _connected: true\n                _DBase: true\n                _heartbeat: \"21:38:51\"\n                version: \"none\"\n                _t: 1648327133\n\nnote: the 'schema' is 'as is' from 'tuyastatus', i.e. also with pseudoDPs (see https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#pseudodp), like '_connected'.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#tuyastatus\n"
    },
    {
        "id": "53907bdd6c301b7b",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "GET _tuyastatus ( _system . _laststart )",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_tuyastatus",
                "vt": "str"
            },
            {
                "p": "payload.value.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.value.property",
                "v": "_laststart",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 1560,
        "wires": [
            [
                "fa316c8dab06aab8"
            ]
        ],
        "info": "This command is a SET (because it contains a value) but is actually a trigger for an action: to 'get tuyastatus data'.\n\n     If payload.value.device exists,\n     AND there is payload.value.property,\n     AND there is NO payload.value.value:\n       it returns a message (GET) with the value of the tuyastatus.device.property\n \n   Example:\n       \n           device: \"HAL@home\"\n           property: \"_laststart\"\n           \n           you get a value like: \"2022-03-27 08:58:22\"\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#tuyastatus"
    },
    {
        "id": "e8d6ad262ea8764a",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "Test  SCHEMA  HAL@home",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 1660,
        "wires": [
            [
                "6025e92fa68b2116"
            ]
        ],
        "info": "Sends a SCHEMA request to the device,\n   if SCHEMA is allowed, returns DP values\n     else ERROR.\n\nFor_system, SCHEMA is implemented:\n\n  A message for every GETtable DP, getting last data from 'tuyastatus' (faster)\n\nsee  https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#tuyastatus"
    },
    {
        "id": "7db9919153152908",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 495,
        "y": 1780,
        "wires": []
    },
    {
        "id": "bd8c728719c1ba3e",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "Test case for  _system + local DBase",
        "info": "Test for _system properties DataBase related.\n\nsee:\nhttps://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system",
        "x": 220,
        "y": 1920,
        "wires": []
    },
    {
        "id": "a39808a2dc19774b",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "doUPDATE  virtual only",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_doUPDATE",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "virtual",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 740,
        "y": 2240,
        "wires": [
            [
                "e289f817134b4534"
            ]
        ],
        "info": "The _system doUPDATE property is implemented:\n  \n  for ALL connected devices found in real|virtual|fake|NULL(all) alldevices list:\n     a doSCHEMA request is sent.\n \n see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#tuyastatus"
    },
    {
        "id": "886cff99e3e51d1a",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "doUPDATE  fake only",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_doUPDATE",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "fake",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1780,
        "wires": [
            [
                "7db9919153152908"
            ]
        ],
        "info": "The _system doUPDATE property is implemented:\n  \n  for ALL connected devices found in real|virtual|fake|NULL(all) alldevices list:\n     a doSCHEMA request is sent.\n \n see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#tuyastatus"
    },
    {
        "id": "8180ef54bc025228",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "doUPDATE   ALL",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_doUPDATE",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "NULL",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 1820,
        "wires": [
            [
                "7db9919153152908"
            ]
        ],
        "info": "The _system doUPDATE property is implemented:\n  \n  for ALL connected devices found in real|virtual|fake|NULL(all) global.alldevices list:\n     a doSCHEMA request is sent.\n     \n     see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#tuyastatus\n "
    },
    {
        "id": "5c6990896e8004a6",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmd",
        "mode": "link",
        "links": [
            "661ba9866d627b2e"
        ],
        "x": 1015,
        "y": 1380,
        "wires": []
    },
    {
        "id": "76b2fa834194d529",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1015,
        "y": 1260,
        "wires": []
    },
    {
        "id": "341f59a30cb3ccc1",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test DB local: COUNT(*)",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_sqlDBlocal",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "SELECT COUNT(*) FROM messages",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 1980,
        "wires": [
            [
                "f0044790d1c69a60"
            ]
        ],
        "info": "\nSET: executes a simple SQL on DBlocal\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#db-functions "
    },
    {
        "id": "533ec7d5d2c35836",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test DBlocal: GET last result",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_sqlDBlocal",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 2020,
        "wires": [
            [
                "f0044790d1c69a60"
            ]
        ],
        "info": "\nGET: returns las SQL result.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#db-functions"
    },
    {
        "id": "f0044790d1c69a60",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 515,
        "y": 1980,
        "wires": []
    },
    {
        "id": "49ba2b3a1d6f52ad",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test DB local: COUNT records in last 3H",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_sqlDBlocal",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "set @lastdate = DATE_SUB(NOW(), INTERVAL 3 HOUR); SELECT COUNT(*)  FROM `messages` WHERE `timestamp` >  @lastdate",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 2100,
        "wires": [
            [
                "f0044790d1c69a60"
            ]
        ],
        "info": "SET: execute a useful SQL on DBlocal\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#db-functions"
    },
    {
        "id": "6d7e8388df038212",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test DB local: DELETE '_connected'",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_sqlDBlocal",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "DELETE FROM `messages` WHERE `dps` = '_connected'  LIMIT 100000",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 2060,
        "wires": [
            [
                "f0044790d1c69a60"
            ]
        ],
        "info": "SET : execute a SQL on DBlocal\n\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#db-functions"
    },
    {
        "id": "4bc5b1a17b7f3585",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "timerON test2: 30s (share)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.value.timeout",
                "v": "30000",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_timerON\",\"value\":{\"id\":\"test2\",\"alarmPayload\":{\"comment\":\"share to get Debug AND vocal output\",\"share\":[{\"action\":[{\"device\":\"_system\",\"property\":\"_play\",\"value\":\"Timer test2 done\"},{\"device\":\"_system\",\"property\":\"_toDebug\",\"value\":\"Timer test2 done\"}]}]}}}",
        "payloadType": "json",
        "x": 1250,
        "y": 1640,
        "wires": [
            [
                "b79d9669ece59f4b"
            ]
        ],
        "info": "NOTE:\nIt is OK if it executes,  30 s later, a 'shate':\n   - write in debug 'timer done'\n   - say: 'timer done'\n   \n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#timer-functions\n"
    },
    {
        "id": "c4bf3f0b5434c411",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "GET _ACpower",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_ACpower\"}",
        "payloadType": "json",
        "x": 720,
        "y": 2060,
        "wires": [
            [
                "e289f817134b4534"
            ]
        ],
        "info": "ALARM is true if all AC powered devices are disconnected.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#security-and-recovery"
    },
    {
        "id": "d19ed536e476c35c",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "GET _WiFiunconnected",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_WiFiunconnected\"}",
        "payloadType": "json",
        "x": 740,
        "y": 2140,
        "wires": [
            [
                "e289f817134b4534"
            ]
        ],
        "info": "GET the list of unconnected devices\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#security-and-recovery\n"
    },
    {
        "id": "f68d45a8191ae7d5",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1015,
        "y": 1480,
        "wires": []
    },
    {
        "id": "09237ff2b87de694",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "Test case for  _system + some devices",
        "info": "system properties requiring devices.\n\n- Some tests are based on WiFi and devices status, so some devices (UPS, BAT, AC)\n  are reqired to get valid results.\n\n- Some test require special devices, i.e. using RT/AVG subflow...(note using deviceID not in credentials)  \n\n- doUPDATE: forces a GET for all DPs of all connected devices: as effect, tuyastatus\n   is updated to last values.\n\nnote: \"none\" is the default initial value for many dPs.\n\nsee:\nhttps://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system",
        "x": 750,
        "y": 2000,
        "wires": []
    },
    {
        "id": "e57d6a8de3d78089",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "GET _WiFinet",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_WiFinet\"}",
        "payloadType": "json",
        "x": 710,
        "y": 2100,
        "wires": [
            [
                "e289f817134b4534"
            ]
        ],
        "info": "ALARM is true when WiFi looks down.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#security-and-recovery"
    },
    {
        "id": "aa750223e5b2a05e",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "_toStdCmd system.beep",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_toStdCmd",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "{\"device\":\"_system\",\"property\":\"_beep\",\"value\":\"any\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1250,
        "y": 1260,
        "wires": [
            [
                "8c81b10d20901314"
            ]
        ],
        "info": "_toStdCmd:\n   Send a command to std_cmds input. \n   \nsee  https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#helper-functions"
    },
    {
        "id": "318504db6681490b",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "_toFastIN system.beep",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_toFastIN",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "{\"device\":\"_system\",\"property\":\"_beep\",\"value\":\"any\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1240,
        "y": 1300,
        "wires": [
            [
                "8c81b10d20901314"
            ]
        ],
        "info": "_toFastIN:\n   Send a command to fast_cmds input. \n   \nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#helper-functions   "
    },
    {
        "id": "5ab44363de50c2da",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "sound+voice",
        "info": "sound and voice features:\nSee system, `_beep`, `_beep_loop`, `_play` DPs\n\n'Beep' sound (WAV code64) is in `*Global SYSTEM config` node.\nSet language and voice in the `Telemachus` node interface (system dependent).",
        "x": 870,
        "y": 940,
        "wires": []
    },
    {
        "id": "8c81b10d20901314",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1525,
        "y": 1260,
        "wires": []
    },
    {
        "id": "467e3a3b2119edea",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "_toWarn  \"user message\"",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_toWarn",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "User defined warning",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1250,
        "y": 1340,
        "wires": [
            [
                "8c81b10d20901314"
            ]
        ],
        "info": "_toWarn:\n   Send a warning message to debug pad, uses node.warn().\n   Useful to signal problems and to send warning to remote\n   \nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#user-interface"
    },
    {
        "id": "0b1c3735620915a7",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "_toDebug  \"user message\"",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_toDebug",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "User debug message",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1250,
        "y": 1380,
        "wires": [
            [
                "8c81b10d20901314"
            ]
        ],
        "info": "_toDebug:\n   Send a message to debug pad,\n   Useful to send messages to remote\n   \n   see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#user-interface"
    },
    {
        "id": "f34a426e4a22e741",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "_toLogging \"system._toWarn.Done\"",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_toLogging\",\"value\":{\"deviceId\":\"_system\",\"data\":{\"dps\":{\"_toWarn\":\"Done\"}}}}",
        "payloadType": "json",
        "x": 1280,
        "y": 1420,
        "wires": [
            [
                "8c81b10d20901314"
            ]
        ],
        "info": "_toLogging:\n    Send a message to core.logging node, as a devices response message.\n    Note:  device/property MUST exist in global.alldevices.\n    \n    \n    see  https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#helper-functions"
    },
    {
        "id": "ba11857305a8d634",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1015,
        "y": 1760,
        "wires": []
    },
    {
        "id": "4d4a8d8ac2e5382a",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "Test REST;  http://localhost:1984/tuyaDAEMON?device=_system&property=_beep&value=ok",
        "info": "",
        "x": 400,
        "y": 2360,
        "wires": []
    },
    {
        "id": "e0861132d6016c2b",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "Test Debug REST: http://localhost:1984/tuyaDAEMONdebug?device=_system&property=_beep&value=debug",
        "info": "",
        "x": 450,
        "y": 2400,
        "wires": []
    },
    {
        "id": "932537d22766fcfe",
        "type": "config",
        "z": "a5526c71dbbdfc5a",
        "name": "*Global SYSTEM config ",
        "properties": [
            {
                "p": "beep64",
                "pt": "flow",
                "to": "UklGRrguAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YZQuAAABAP8PAyD8LwNA/k8BVAFE/TMDJP4TAQQA9P/jAdT/wwG0/6cBuADI/9cB6P/3AQgBGP0nBDj8RwNY/0sAPAAsABwADAD8AOwA3ADM/7sDrPyvA8D+zwLh/vACAf0QBCH8MARB/FADU/5CATMBI/0SBAP88gPj/tICw/6yAqn+uAHJANkA6QD5AQn+GAIp/jgCSf9YAEsBO/8qABsACwD7Aev+2gLL/roBqwGx/sEB0gDi//ECAv8RACIAMgBCAFIAUgFC/jECIv8R/wEC8v7hAtL+wQKy/akEuvzJA9r+6QH6AAoAGv8pATr/SQJa/kkBOv8pAhr+CQL6/ekD2v/JALn/qAGz/8IC0/7iAfP+AgMT/SIDM/5CAFMBUQBB/jAEIfsQBQH88ALhANH/wAKx/aoCuwDL/9oC6/76AQsAG/8qATsASwBZ/0gCOf0oAxn+CAH5/+gC2P3HBLj8pwK0/8MB1ADk//MABAAUAST/MwFE/lMCUP8/ATAAIP8PAQD/7wHgANAAwACwAKwAvADMANwB7P77Agz+GwIs/jsCTP5XAkj9NwMo/hcCCP72Aef/1gHHALf/pgG1AMX+1APl/fQCBQAV/yQBNf9EAVX/TgI//S4DH/0OA//97gPf/M4Ev/6uAK0Bvf7MAt3/7AH9/gwCHf8sAD0BTf5WAkf+NgIm/xUABgD2AOYA1gHG/rUCpv+1AMYB1v7lAvb+BQIW/yX/NQJG/VUETv09AS4AHv8NA/787QTe/c0BvgGu/q0Cvv/NAN4A7gD+AA4AHgAuAT7+TQJW/kQBNQEl/hQCBf70AeUA1QHF/rQCp/62Asf/1gHn/vYCB/4WAyf9NgJH/lYCTf88AS3+HAIN/vwC7f/cAM0AvQCt/64Cv/7OAt/+7gH/AA//HgIv/j8BUP9TAkT9MwQk/RMABAL0/eMD1P/D/7MCqP63AcgA2P/nAfgACAAY/ycCOP1HA1j+SwE8/ysCHP0LBPz86wPc/ssBvAGs/q8CwP7PAuD/7wAAABAAIQEx/0D/UAJT/kIDM/0iAhP9AgTz/OIE0/3CAbMAqf+4Asn+2ALp/vgACQIZ/igCOf9I/lgES/w6BCv8GgQL/foB6wHb/soCu/6qAbEAwQDRAeH98AMC/hEBIgEy/UEEUvtRBUL8MQMi/hEAAgHy/+EC0v3BA7L9qQO6/ckD2v3pA/r9CQMa/SkDOv1JA1r9SQM6/SkDGv4JAfr/6QHa/8kCuv2pA7L9wQPT/eID8/0CAhP/IgAzAUP/UgBRAEEAMQAhABEAAf/wAuH+0ALB/bADq/66AcsB2/3qBPv8CgMb/yr/OgJL/lgBSQA5ACkAGf8IAvn+6AHZAMn/uAKp/bMDxP7TAeQA9P8DABQCJPwzBUT8UwNQ/T8BMAEg/g8EAPrvBuD7zwPAALD+qwK8/8v/2wPs/fsDDP0bAiz/OwBMAlj9RwM4/ScDGP0HA/j95wPY/sYAtwKn/bQDxf7UAeX/9AEFABX/JAI1/UQDVf1OAz/+LgEfAA/+/gPv/d4Dz/6+AK8Brf+8Ac3/3ADtAP0BDf8cAS3+PAJN/1YBR/82ACcBF/8GAvf95QLW/8UBtgCm/7UBxv7VA+b99QMG/RUDJv01A0b+VQFOAD7/LQIe/g0B/gDu/90Bzv+9Aa7/rQG+/80A3gDuAv79DQMe/S0BPgJO/VUCRv81ACYBFgAF/vQC5f7UA8X9tASn+rYFx/7WAOcC9/wGBBf9JgM3/kYBV/9MAD0BLf8cAQ3//ADtAN0AzQC9AK0ArwC/AM8A3wDvAP8ADwAfAC8APwBPAFX/RAI0/iMCFP4DAvT94wTU+8MFtP2nAbgAyP7XA+j+9wEI/xcBKP83AUj/VwBMATz/KwAcAQz/+wHs/9sBzP+7Aaz/rwHAAND/3wHw//8AEAEg/y8AQAFQ/1IAQwAzASP+EgMD/fIC4/7SA8P9sgOp/bgByQHZ/+gB+f8IARn/KAA5AEkBWf9KATv+KgEbAQv/+gDrANv/ygK7/6oAsQDBANH/4ALx/gABEQAh/zABQv9RAVL/QQEy/yEBEv8BAfIA4v/RAcL/sQGqALr/yQHa/+kB+v8JARr/KQE6AEr+WQNK/jkAKgEa/wkA+gLq/dkDyv65AKoCsv3BA9L94QLy/wEAEwEj/jIBQwBT/1ADQfwwAyH/EP8AAvH+4ALR/sACsf2qA7v/yv/aAuv9+gILARv9KgM7/koBWQBJ/zgBKf8YAgn++ADpAtn9yAO5/qgAswLD/tIB4wD0/wMBFP8jAjT9QwNU/U8CQP8vACABEP7/A/D93wHQAMD/rwOs/bsCzP7bAewB/P8LABwBLP47Akz/VwBIATj+JwEYAAgA+ADoANj/xwG4AKgAtP/EAdX/5AH1AAX/FAElADX/RAFVAE//PgMv/B4ED/3+Au//3gDPAb8Ar/+sAb3/zAHd/+wB/f8MAR3/LAE9/0wBV/9GATf/JgEX/wYB9//mAdf/xgC3Aab/tQHG/9UB5v71Awb8FQQm/TUCRv9VAE4BPv4tAx79DQP+/e0D3v3NA77+rQCuAb7/zQDeAu78/QUO+x0FLvs9BE7+VQBGATb/JQEW/wUA9gHm/9UCxf20Aqf/tgHH/9YC5/z2BQf8FgInADf+RgNX/UwDPf0sAh3/DAH9/+wB3f7MAr3/rAGv/74Bz/7eA+/8/gQP/R4DL/0+Ak//VABFATX+JAIV/wQB9P7jAtT/wwC0Aaj+twLI/9cB6P73Agj/FwAoATj/RwBYAUz/OwAsARz/CwH8/+sB3P7LA7z+qwCwAcD/zwHgAPD+/wMQ/h8BMABA/08BVP9DATQAJP8SAQP/8gHj/9IBw/+yAakAuf/IAdn/6AH5/wgBGf4oAzn8SARZ/UoBOwEr/hoCC/76Auv/2gDLALsAq/+wA8H80ATh/PADAf8Q/yACMf5AAVEAU/9BAjL+IQES/wEA8gLi/tEBwv+xAKoBuv/JAdr/6QD6AAoBGv4pAzr8SQNa/0kAOgAqABr/CQL6/ukC2v7JAboAqgCyAMIA0gDiAPIAAgAS/yECMv5BA1P8UANB/jABIQER/gAC8f7gAtH+wAKx/6oAuwHL/doE6/36Agv/GgArATv+SgJZ/kgCOf8oARn/CAD5AOkA2QDJArn9qAKz/8IA0wHj//IAAwET/iICNP9DAFQAUP8/AjD+HwIQ/v8C8P7fAtD9vwSw/asCvP7LAdwA7AH8/gsDHPwrAzwATP5XA0j8NwMo/xcACAD4AOgA2ADIALj/pwO0/cMC1P7jAvT+BAMV/SQCNf5EAlX+TgM//S4CH/8OAP8A7wHf/s4Dv/yuA63/vADNAd3+7AH9AQ3+HAMt/TwCTf5WAkf+NgMn/BYEB/32Auf+1gLH/rYCp/60AsX+1ALm/vUBBgAWACYANv9FAlb+TQI+/i0BHgAOAP4A7gDeAM4AvgCuAK4AvgHO/t0C7v/9AA4BHv4tAj7/TQBWAUb/NQAmARb+BQP2/eUD1v3FA7b+pQG2/8YB1//mAvf9BgMX/SYDN/1GAlf/TAE9AC3/HAANAf3/7AHdAM3/vAKt/q4AvwLP/t4C7//+AA//HgIv/j4DT/1UAUUANQAlARX/BAD1AeX+1ALFALT+pwO4/McE2P3nA/j9BwMY/CcEOP1HAlgATP47Aiz/G/8LA/z86wXc+ssGvPurBLD9vwLQ/98A8AEA/g8CIAAw/j8CUP5TAUQBNP4jAhT+AwH0AOQA0wDDAbP9qAW5+sgG2fvoBPn8CAMZ/igBOQBJ/1gASwI7/CoGG/kKBfv+6gDbAcv/ugGr/7AAwQHR/uAD8f0AAhEAIf4wA0H9UAJTAEP/MgEj/xIAAgLy/OEF0vvBBLL+qQC6AMoB2v/pAfr/CQAaASr/OQFK/lkDSvw5BCr+GQAKAfr/6f/ZA8r9uQOq/bEDwv3RA+L+8QECABIAIgAy/0ECUv1RBEL8MQIhABH+AAPx/uAB0f/AAbH/qgG7AMv/2gHrAPv/CgEb/yoBOwBLAFn/SAE5/ygCGf4IAfkA6f/YAsn+uAGpALMAwwDTAOP/8gID/hICI/4yAUMAUwBRAEAAMAAgABAAAADwAeD+zwLA/q8CrP67Asz+2wHsAfz9CwQc/CsDPP5LAlj+RwI4/icBGAEI/vcC6P/XAMgAuACoAbT/wwHU/uMC9P4DBBT7IwQ0/UQCVQBP/z4ALwEf/w4B///uAN8Bz/++Aa//rAG9/8wA3QLt/fwDDf0cAi3/PAFN/1YARwI3/SYCFwAH/vYE5/zWAscAtwCn/7QDxfrUCOX59AYF/BQBJgE2/0UAVgFO/j0DLv0dAQ4A/gDuAN4Bzv69Aa4Brv69As7/3QDuAf7/DQAeAS7/PQBOAlb9RQQ2/CUCFgAG//UC5v7VAcYAtv+lArb9xQTW/OUD9/8G/xYCJ/42AUcBV/5MAj3+LAId/gwD/f3sAt3/zAC9Aq39rgO//c4D3/3uA//9DgIfAC/+PgNP/FQDRQA1/iQDFf0EAvX/5AHV/8QBtf+mAbcAxwDY/+cB+AAIABj/JwE4/0cCWP1LAzz9KwMc/gsA/AHsANz/ywG8/6sAsAHA/88A4ADwAQD/DwAgADAAQABQAlT8QwM0/yP/EwIE/vMB5ADU/8MBtP+nArn9yALZAOn/+AEJABn+KAM5/kgAWQJL/ToDK/4aAQv/+gHrANv/ygK7/KoEsf7AAdEA4f7wAwH9EAMh/jAAQQFR/1ICQ/0yAiP+EgID//IB4//SAMIAsgCqAbr+yQLa/ukC+v8JABoAKv85Akr+WQJK/jkCKv4ZAgr++QLq/tkCyv65Aqr+sQLC/tEC4v/xAAIBEv8hADIAQgFS/1ECQv0xAiL/EQEC//EC4f3QA8H9sAKr/7oBy//aAOsB+/4KAhv/KgE7/0oBWf5IAzn9KAMZ/QgC+f/oANkAyQG5/qgCs/7CAdMB4/3yBAP9EgEjADMAQ/9SA1H8QAQx/CAEEfz/BPD93wLQ/7//rwKs/rsCzP7bAewA/P8LAhz+KwI8/ksBWP9HAjj/JwAY/wcB+P/nAtj9xwO4/acCtP/DAdT+4wP0/AMEFP4jADQBRP5TA1D9PwMv/R4CDwD//+4B3//OAb8Ar/+sAb3/zAHdAO3//AIN/hwALQI9/UwDV/9G/zYCJ/4WAQf/9gLn/tYCx/62Aaf/tALF/dQD5f30AwX9FAIl/zQARQFV/k0CPv4tAx78DQT+/e0C3v/NAL4Brv+tAb7+zQLe/+0B/v8NAB4ALgA+AE4AVgBGADYAJv8VAgb99QTm/NUDxv+1/6UCtv7FAtb+5QL2/gUCFv4lATcARwBXAE3/PAEtAB0ADQD9/+wC3f7MAb0ArQCv/74Dz/zeBO/8/gMP/x4ALwE//k4CVf9EADUAJQEV/gQC9f/kANUBxf60Aqf/tgDHANcA5wD3AAcAGAAoADgASP9XAkz+OwIs/RsDDP37A+z92wPM/bsCrP+vAMAB0P/fAPABAP8PASD/LwBAAVD/UwFE/zMBJP8TAQT/8wDkAdT/wwG0/6cAuAHI/tcD6P74AQkAGf8oATn/SAJZ/koBO/8qARv/CgH7/+oB2//KArv9qgOx/sAB0QDh//ACAf4QASEAMf9AAlH+UgJD/TIEI/wSBAP98gHjAdP+wgKz/6j/uALK/tkC6v75AQr/GQAqAToASv5ZA0r9OQIqABr+CQT6/OkD2v7JAboAqgCyAMIA0gDiAPL/AQIS/SEEMv1BAlL+UQFCADIAIgES/wH/8QLi/tEBwgGy/aoDu/3KAtsA6/76Awv9GgIrADv+SgJZAEn/OAEp/xgACQH5/+gB2f/IAbn/qACzAsP90gPj/fICAwATACP/MgFD/1IBUQBBADH/IAER/wAC8f3gA9D9vwOw/qsBvP/LAdz/6wL8/gsBHP8rATz/SwJY/UcDOP4nABgBCP/3Aej/1wHI/rcDqP6zAcT+0wPk/fMDBP4TACQBNP9DAVT/TwBAATD+HwQQ+/8E7/3eAs8Av/6uA638vATN/tz/7AP9/AwEHf4s/zwDTfxWBEf+Nv8mAxf8BgP3AOf91gTH/LYDp/+0/8QC1f3kBPX8BAMV/iQANQJF/VQDT/4+AS8AH/8NAv7+7QHeAM4Avv+tAa4Avv/NAt797QL+AA7+HQMu/T0DTv1VA0b9NQImABb/BQL2/eUD1v7FArb+pQG2AMYA1gDmAPYABgAWACb/NQJG/lUCTv88AC0AHQANAP0B7f/cAc3/vACtAK8Bv//OAd//7gD/AQ//HgEv/z4BT/9UAkX9NAMl/hQBBQD1/+QC1f7EArX+pgG3AMf/1gHn//YBB/8WASf+NgJH/1cBTP87ACwBHP8LAfz/6wHc/8sBvP6rA7D9vwTQ+98E8P3/AxD+HwEw/z8BUP9TAkT9MwMk/RMDBP7zAeT/0wHEALQAqP+3AcgA2ADoAPj/BwEYACkAOf9IAln9SgM7/ioBGwAL//oB6//aAcv/ugGr/7ACwf7QAOEC8f0ABBH9IAExAEH/UAJT/UIDM/4iARMAA//yAeMA0wDD/7IBqf+4Asn+2ALp/vgACgIa/SkEOvxJA1r+SQE6ACoAGgAKAPr/6QLa/skCuv6pArL+wQLS/uEB8gEC/hECIv4xAkL+UQJS/kECMv4hAhL+AQLy/uEC0v7BArL+qQK6/8kA2gDrAPsBC/8aACsBO/5KA1n8SAQ5/SgCGf8I//gC6f/YAMkBuf6oArP/wgDTAeP+8gID/xIAIwEz/kICU/9QAUH/MAAhARH/AAHxAOH+0APB/bACqwC8/8sB3P/rAfz/CwEc/ysBPABM/1cBSP83ASj/FwII/vcB6ADY/8cDuP2nAbQAxP/TAuT/8wAE/xMBJP8zAUQAVP9PAUAAMP8fARAAAADw/98B0ADAAK8ArQC9/8wC3f7sAf0BDf4cAi3/PP9MA1f9RgI3/yYAFwEH/vYC5/7WAsf+tgKn/rQBxQDV/+QC9f4EARX/JAE1/0QCVf1OBD/8LgIfAA///gPv/d4BzgC+AK4Brv+9AM4A3gHuAP7/DQEe/y0BPv9NAVYARv81ASb/FQEG//UA5gLW/MUFtvulBLb+xQDWAOYB9gAG/xUAJgE2/0UCVv1NAz79LQMe/Q0D/f3sAt3/zAC9AK0Br/6+As//3v/uA//9DgIf/y4APwBPAVX/RAE1/yQAFQAFAPUB5f/UAcX+tAKn/7YBx/7WAuf+9gIH/xYAJwA3AEcAVwBNAD0ALQEc/gsC/P7rAdwBzP67Aqz+rwLA/88A4ADwAAABEP8fATD+PwNQ/lMBRP8zASQAFP8DAvT94wPU/sMBtP+nAbj/xwHYAOj/9wEI/xcBKAA4/0cCWP1KBDv7KgUb+woG+/nqBtv7ygW7+6oEsfzAA9H/4ADxAAEAEf8gAjH+QAFRAFP/QgIz/iIBEwADAPMA4//SAsP/sgCpALkAyQDZAOkA+QAJARn/KP84A0r7WQZK+zkDKv8Z/wkB+v/pAtr+yQG6AKr/sQLC/tEB4gDy/wEDEvshBTL8QQJSAFIAQv8xASL/EQECAPIA4v/RAsL9sQOq/rkCyv7ZAur9+QQK/RkBKwA7/0oCWf5IATn/KAIZ/ggB+QDp/tgEyfy4A6n+sgHD/9IB4//yAQMAE/8iATP/QgFT/1ABQf8wACEBEf4AA/H94ALR/8AAsQGr/roDy/3aA+v9+wIM/xsBLP87AUz/VwBIATj/JwEY/gcC+P7nAtj/x/+3A6j8swTE/dMB5AH0/wMAFAEk/jMCRABU/k8DQP0vAiAAEP7/A/D93wPQ/r8AsAGs/rsEzPzcA+39/AMN/hwBLQA9AE0AVwBHADf/JgIX/gYC9/7mAdcAxwC3AKcAtf/EAdUA5QD1AAUAFf8kAjX+RAJV/k4CP/4uAh//DgD/AO8A3wDPAL8ArwCuAL4AzgDeAO4A/gAOAB4ALgA+AE4BVv5FAzb7JQYW+wUE9v3lAdYBxv61A6b8tQXG+9UE5v31Agb/FQAmADYARgFW/k0DPvwtBB78DQT+/O0F3vvNA73/rP+uA7/9zgLf/+4A/wIP/R4DL/0+Ak//VABFATX/JAEV/gQC9f7kA9X+xAC1AKcAtwHH/9YB5//2AAcAFwEn/jYDR/5WAE0BPf4sAh0ADf/8Ae3/2wDMAbz/qwCwAsD8zwTg/e8BAAEQ/h8CMP4/AlD9UwRE/TMBJAEU/QMD9P/j/9MCxP6zAagAuP/HAtj95wP4/QcEGPsnBTj7RwVY/UsBPAAs/xsCC/76Auv/2gDL/7oBqwCxAMEA0f/gAPECAf0QAyH+MAFBAFH/UgFDADMAIwAT/wIC8/3iBdP5wgez+6gDuf/I/9gC6f74Agn+GAEpATn9SARZ/EoDO/4pARr/CQL6/ekD2v3JA7r9qQOy/cEC0v/hAfL/AQIS/CEFMvtBBlL6UQVC/DEDIv8R/wEC8v7hAtL/wQCyAKoAugDKANoA6gD6AAoAGgAq/zkCSv9ZAEkAOQApARn/CAH5/ugC2f/IALkAqQCzAMMA0wDj//IBA/8SAiP+MgFDAFP+UARB/DADIf4QAQH/8ALh/dAEwfywAqsAu//KAtv+6gH7/woCG/4qAjz+SwJY/kcCOP8nABgBCP/3Aej+1wPI/LcFqPuzBMT90wLk//MABAEU/yMBNP5DAlT+TwJAADD+HwMQ/P8D8P/fANABwP6vAqz+uwHMANz/6wL8/gsBHf8sAj39TARX+0YFN/wmAhcAB//2Aef/1gDHAbf/pgG1/8QB1f/kAfX/BAEV/yQBNQBF/1QBT/8+AS8AH/8OAv/+7gLf/s4BvwCvAK0AvQDNAN0A7gD+AA7/HQIu/z0ATgBWAEb/NQIm/hUBBgD2/+UC1v3FBLb8pQO2/sUB1gDmAPYABv8VAib9NQNG/lUATgI+/S0EHvsNBf777QTe/s0BvgCu/60Bvv/OAd//7gL//Q4DH/4uAT8ATwBVAEX/NAIl/hQCBf/0/+QC1f7EArX+pgK3/sYC1//m//YCB/4WAScAN/9GAVf/TAA9AS3+HAIN//wA7QHd/swCvf+sALABwP7PA+D97wIA/w8AIAEw/z8BUP9TAUT/MwEk/xMBBP/zAeT/0wHE/7MBqP+3Acj/1wLo/fcECPsXBSj8NwNI/lcCTP47ASz/GwEMAfz+6wLc/coDu/6qArH+wAHRAOH/8AEB/xABIf8wAUH/UABTAUP/MgAjAhP9AgLz/+IA0wHDALP/qAC5Acn/2AHp//gACQEZ/igDOfxIBFn8SgM7/ioCG/4KAvv+6QLa/skCuv+pALIAwgDSAOIA8gACABL/IQIy/kECUv5RAkL+MQMi/RECAv/xAeL/0QHC/rEDqv25A8r82QTq/fkCCv8ZASr+OQNK/FkESv05Air/GAAJAPkA6QDZAMkAuf+oArP+wgLT/eID8/4CARMAI/8yAUMAUwBR/0ACMf4gAREAAf/wAuH+0AHBALH/qgK7/coD2/3qA/v9CgMb/SoCOwBL/lgDSf03Ayj9FwMI/vcB6ADY/8cBuACo/7MCxP7TAeQA9P8DART/IwE0AET/UwFQ/j8DMP0fAxD+/wDwAuD+zwHAALAArP+7Asz/2wDsAfz+CwIc/isCPP9LAFcBR/42AScAFwAHAff+5gHXAMcAtwCnAbX+xALV/uQB9QAFARX/JAE1/kQCVf9OAD8CL/0eAw/9/gLv/t4Ez/y+A6/9rAK9/8wB3f/sAP0CDf0cAi7/PQBOAlb9RQI2ACb/FQIG/fUC5gDW/8UBtgCm/rUExvzVAuYA9v4FAxb+JQE2/0UBVv9NAT7/LQEe/w0B/gDu/90Bzv+9Aa7/rQG+AM7+3QPu/v0ADwIf/i4APwJP/VQERf00AiX+FAEFAfX+5APV/MQEtf2mArf/xgDXAOcB9/8GARf+JgM3/kYBV/9MAD0BLQAd/wwB/f/sAd0Azf+8Aq39rgO//s4B3wHw/f8DEP4fATAAQABQ/1MBRAA0/yMCFP0DAvQA5P/TAsT+swGoALgAyADYAOgA+AAIABgBKP43Akj+VwJM/jsCLP8bAAwB/P7rAtz/ywC8AKwBsP/AAdH+4ALx/wABEf8gADEBQf9QAVP/QgAzAiP9EgID//IB4wDTAMP+sgOp/bgDyf7YAOkB+f8IARn/KAE5/0gBWf9KATv/KgEbAAv++gPr/NoFy/u6Bar7sQTC/tEA4gHy/wEBEgAi/zEBQgBSAFIAQgAy/yEBEgEC/fEE4vvRBcL8sQOq/rkBygDaAOoA+gAK/xkCKv05A0r+WQBKAjr8KQUa+wkE+v7pANkByf+4AakAs//CANMB4//yAgP9EgIj/zIBQwBT/1ABQf8wASEAEQAB//AC4f7QAsH+sAGrALsAywHb/uoC+/4KARsAKwE7/koCWf5IATkAKQAZ/wgC+P7nAtj9xwO4/qcCtP7DAtT94wX0+wMEFP0jATQBRP9TAVD/P/8vAiD+DwIA/u8C4P3PBMD8rwOs/rsBzAHc/usC/P4LAhz+KwI8/ksDWP1HAjj/JwAXAQf/9gDnAdf/xgC3Aaf/tADFAdX+5AP1/gQAFQEl/jQDRf1UA0/9PgIv/x4ADwH//u4C3//OAb//rgGt/bwEzf7cAe3//AANAB0BLf88AE0AVwFG/zUAJgEW/gUD9v3lAtYAxv61A6b9tQPG/dUD5v31Agb/FQEm/zUARgFW/k0DPv0tAh7/DQD+Ae7+3QLO/r0Crv6tAb4Azv/dA+77/QUO/B0DLv89/04CVf1EBDX8JAMV/QQD9f7kAtX+xAG1/6YCt/7GAtf+5gL3/gYCF/4mAjf+RgJX/kwCPf4sAh3+DAL9/uwC3f7MAr3+rAGvAL8AzwDfAO8A/wAPASD+LwJA/08BVP9DATT+IwMU/QMC9P/jANQAxAC0AKgAuADI/9cD6Pz3BAj9FwEoAjj9RwNY/UsDPP0rAxz9CwP8/esD3P7LALwBrP+vAMAC0PzfBfD7AAUR+yAEMf5AAVEAU/9CATP/IgIT/gIB8wDj/9ICw/6yAakAuQDJ/9gC6f34BAn7GAUp/DgDSf5YAUsAOwAr/xoCC/76Auv/2v/KArv/qgCxAMEA0QDiAfL/AQASACIBMv9BAVL+UQJC/zEAIgES/QEE8vzhA9L/wQCy/6kBuv/JAtr+6QH6AAr/GQEq/zkBSgBa/0kBOv8pARr/CQD6Aer/2QDKAbr+qQOz/cIC0//iAPMBA/8SACMAMwBDAVP+UANB/DADIf8QAAEB8f7gAtH+wAOx/aoCu//KAdv+6gP7/QoCGwAr/joDS/1YAkkAOf4oAxn9CAL5AOn+2ALJ/7cAqAC0AMQA1ADkAPQABAAUACQANABEAFQBUP4/AjD+HwEQAQD+7wLg/88AwACwAKwAvAHM/9sB7P77Agz+GwIs/jsCTP5XAkj+NwEo/xcCCP33BOf81gLHALf+pgO1/sQB1f/kAfX+BAQV/CQDNf5EAVUATwA//y4CH/4OAv/+7gHfAM8Av/+uAq3+vAHNAd387Ab9+gwFHf0sAD0CTf5WAkf+NgEnABcABgH2/uUB1gDGALYApgC2AMYA1gHm/fUFBvoVBib7NQRG/VUCTv49Ai7/HQEO/v0C7v/dAM4Cvv2tA679vQLOAN7/7QH+AA7+HQMu/T0DTv5VAEYANgEl/xQCBfz0BOX91APF/rQApwC3Acf/1gLn/PYEB/0WAif/NgBHAFcBTf88AC0BHf4MAv3/7ADdAM0Bvf6sAa8Bv/3OBN/87gT//A4EH/wuAz//Tv9TAUQBNP0jAxT+AwH0AOQA1P/DArT+pwK4/scB2ADo//cCCP0XAyj9NwJI/1cBTP47Ayz9GwMM/fsD7P3bA8z+uwCsAbD/vwDQAOAA8AEA/w8AIP8vAUEBUf9SAEMAM/8iAhP/Av/yAuP90gPD/rICqf64Acn/2AHpAPkACQAZ/ygCOf5IAVkBS/06BCv8GgML//r/6gLb/soCu/6qArH+wAPR/OAE8fwAAxH/If8xA0L8UQNS/0H/MQIi/xEAAgHy/uEB0gHC/rECqv+5/8kC2v7pAvr/CQEa/ikCOv9JAFoCSvw5BCr9GQIKAPr/6QDaAcr/uQGq/7EBwv/RAeL/8gADABMBI/4yA0P9UgFRAUH+MAIh/xAAAQDxAeH/0ADBAbH+qgO7/coD2/3qAvsAC/4aAyv8OgVL+1gESf04AikAGf4IA/n96APZ/cgDuf2oA7P9wgLU/+MB9P8DABQAJAE0/0MBVP5PA0D9LwIgABD+/wPw/d8D0P2/ArD/qwC8Acz/2wHs/vsDDPwbBSz7OwRM/lcBSP83ACgAGAEI//cA6ADYAMgAuACn/7QCxf7UAeUB9f4EAhX+JAE1AUX/VABPAT/+LgMf/g4A/wHv/94Bz/++Aa//rAG9/8wB3f/sAf3/DAId/SwCPf9MAFcCR/42ASf/FgEH//YC5/3WA8b+tQGm/7UBxv/VAeb/9QEG/xUBJv81AUb/VQJO/T0DLv4dAg7+/QLu/t0Czv69A678rQO+/83/3QPu/f0BDgAeAS7+PQNO/FUERv01Ayb9FQIG//UA5QHV/8QAtQCnALcBx/7WAuf+9gIH/xYBJ/42A0f9VgNN/TwDLf0cAw3+/ADtAd3/zAG9AK3+rgO//c4C3wDv//4ADwEf/i4CPwBP/lQCRf80/yQDFP0DAvT+4wLU/sMDtPynBLj9xwHYAOj/9wMI/RcBKP83Akj+VwNM+zsFLP0bAgz++wHsANwAzAG8/qsCsP6/AtD/3wDwAAAAEAAgATD/P/9PAlT/QwAzAiP8EgQD/vIB4wDT/sIEs/yoBLn8yAPZ/egF+foIBRn9KAA5Akn+WAFLADv/KgIb/goC+/7rAtz+ywO8/asDsv3BAtL/4QDyAgD9DwMg/S8CQP9QAVEAQf8wASH+EAMB/fID4/7SAMMBs/+qAbv/ygHb/+oC+/0IAxn9KAM5/kgBWf9IATn+KAMZ/QgC+//q/9oDy/26Aqv/sv/CA9P94gLz/gACEf8gATL/QQBSAVD/PwEwACAAEAAA//EC4v7RAsL/sf+rArz+ywHcAez++wIK/hkCKv45Akr/VwBIADgAKAAYAAgA+gDqANoAygC6Aar+swPE/NME5P3zAgL/EgAjATP+QgFTAE8APwAvAB//DgEAAfH94APR/cADsf6sAr39zAPd/ewD/f4KARv/KgE7/0oBV/9GATf/JgEX/wYB+f/oAdn+yAO5/qgBtf/EANUB5v/1AQT/EwEk/zMBRP5TAk4APv8tAB4ADgAAAPAC4PzPBMD8rwSu/b0Czv/dAO4B/v8LABwALAE8/0sBVv9FADYAJgAWAQb+9wPo/NcDyP+3AKgAtgHH/tYD5/z2BAX8FAUl/DQBRQFV/kwDPf0sAh3/DAH//+4A3wHP/r4Dr/2uA7/9zgPf/e4D//0MAx39LAQ9/EwCVQBF/jQDJf4UAQX/9gDnAdf/xgG3/6f/twPI/dcC6P/3/wUDFv0lAzb9RQFWAUz+OwMs/RsCDP79Au7+3QLO/r0Crv6vAcAA0P/fAvD+/wEO/x0CLv49AU7/UwBEAjT9IwMU/AME9v7lANUBxf+0AKkBuQDJ/tgE6fr4Bgf8FgEnATf9RgRX/EoEO/sqBRv8CgP9/+z/3AHN/7wCrf2wA8H90ALh//ABAP8OAR//LgA/AU8AU/5CAzP9IgMT/gIB9P7jAtQAxP+zAar/uQHK/9kC6v35Awj+FwEoADj/RwJY/UkDOv0pAxr9CQP8/esC3P/LAbz+qwOy/MEE0v3hAvL+/wIQ/h8BMAFA/k8CUv9BADIBIf4QAgH/8gHj/9IBw/+yAKsBu//KANsB6/76Awn9GAMp/TgBSQFZ/0gBOQAp/hgDCf36AusA2/7KA7v9qgKz/8IB0/7iA/P9AAIRACH+MARB+1AEUf4/ATAAIAAQ/v8E8vvhBtL6wQWy/KsCvADM/9sB7AD8/gkDGv4pATr/SQFY/0cBOP8nARj/BwL6/ukA2gLK/bkEqv2zAMQC1P3jA/T+AQASASL/MQFC/1IBT/4+Ay/9HgMP/f8C8QDh/9ABwQCx/qwDvf7MAN0C7f38AgsAG/4qAjsAS/5WA0f+NgEn/xYBB//4AekA2f/IAbkAqf+0AcUA1f/kAvX9AgMT/iMBNP9DAlT8TQQ+/S0CHgAO/v8D8PzfBND9vwKwAK7+vQLO/t0C7v/9AQz+GwIs/jsCTP9VAEYANgAmABYABgD4AOgA2P/HArj+pwK2/sUA1gLm//X/BAEV/yQBNQBFAFX+TAM9/iwAHQEN//4A7wLf/c4Dv/2uA6/9vgPP/t4B7wD/AA3/HAEt/zwBTQBV/0QBNf8kARX/BAH3/+YB1//GAbf/pgC3Acf/1wHo/vcCBv8VASb/NQFG/1UBTP87ASwAHP8LAv797QPe/s0AvgKu/a8DwP7PAOAB8P7/Aw7+HQEuAD7+TQNU/kMBNAAk/xMCBP71AOYC1v3FA7b+pwC5Acn/2AHpAPn+BgMX/SYDN/5GAFcBS/86ASsAG/4KA/397APd/swBvf+sArH9wAPR/uAB8QAA/w4BH/8uAj/+TgFTAEP/MgIj/hIBAwH1/uQC1f/EALQBqv+5AMoB2v/pAfr/BwEY/icEOPpHB1j5SQY6/CkCGv8JAPwB7P7bA8z9uwKs/7EAwgHS/+EB8v//ARD/HwEw/z8BUABS/0EBMv8hABICAv3zA+P90gLD/7IBq/+6AMsB2//qAfv/CAAZAin9OAJJ/1gASQI5/SgDGf0IAvv/6gHb/8oCu/2qA7P+wgDTAuP98gQB/BAEIfwwA0H+UAFRAEEAMQAhABEAAP/xAeIA0gDCALIArP+7Asz+2wHsAPz/CQIa/ikBOgBK/1cCSP43ASgAGP8HAfoA6v/ZAsr9uQSq/LMDxP7TAeQB9P4BARIAIv8xA0L7UQVQ/D8DMP8e/w4CAP7wAeEA0f/AAbEArf+8As393ALtAP3/CgIb/SoDO/5KAlf9RgQ3+yYFF/wGAvkA6f/YAcn+uAKp/7QAxQDVAOUA9QADABMAIwAzAEMBU/5NAz78LQMe/w0AAAHw/t8C0P6/ArD+rQK+/80A3gHu//0ADAIc/CsFPPtLBVb8RQI2/yUBFv8FAfj+5wPY/scCuP2nArb/xQHWAOb/9QAEART/IwE0/0QAVQFNAD3+LAMd/QwD//7uAN8Bz/++Aq/+rgG//84C3/7uAv/+DAEdAC0APQBNAFUARf80AiX9FAQF/PYD5/7WAMcCt/2mBLf8xgLX/+YB9/8EARb/JQA2AUb/VQBMADwBLP8bAgz8/QTu/d0Dzv69AK4BsP+/AdAA4P/vAQD/DQAeAi79PQNO/VMCRP8zAST/EwEE//UB5v/VAsb+tQGoALj/xwLY/ucC+f4GAhf+JgE3AUf+VgJL/zoAKwAbAQv+/ALt/9wAzQG9/6wAsQDBANEB4f7wAgD+DgIf/i4CP/1OBFP9QgIz/iIBEwADAPUB5v7WAsj+uAKv/70Bzf/cAez++QMH/RQDI/0wAT4BS/4+AjH/Iv8VAgj9+wTw/eIC1//K/74CxP/QAN0B6v71AgD/CwAXASL/LP82Azj8LAQh/RYBDAABAPgA7gDlANsA0gDNAdf/4AHr//MB/QAF/w0BFv8dASYALv8kAh38EwUM+wMF/vz1A+/+5wHhANsA3wDm/+wC9P76AwD8BQIMABL/FgId/hsBFgAQ/woCBf7/Avz+9wLz/u4C6/7pAu/+8gL3/fsE//wBBAX8BwML/g0BEAEM/QgDBv4CAgH9/wP9/fsD+v74APcC+f36Av3//QAAAgD9/wIB/wAAAQEB/wAAAA==",
                "tot": "str"
            }
        ],
        "active": true,
        "x": 230,
        "y": 120,
        "wires": [],
        "info": "**SYSTEM** Configuration\nUser defined values:\n\n_beep64_<br>\n    The audio WAV data used by the `_beep` command is a string coded code64.<br>\n    see 'Telemachus' node.\n    \n### INSTALLATION   \n\n - **Global.alldevice**\n Update CORE.`Global.alldevice` adding the `_system` device:<br>\n   - Add to 'fake' devices the '_system' definitions in the \"device__system.json\" file.\n   - Customize it adding  2 lines on top (you can change the 'name'):\n````\n   {\n add>  \t\t\"id\": \"_system\",\n add> \t\t\"name\": \"HAL@home\",\n \t    \t\"device\": \"_system\",\n\t\t     ... more ...           \n````\n\n - **Language**<br>\n  To change the TTS _Voice/Language_, browser dependent, see SYSTEM.`*Telemachus` node properties.<br> \n  On my Chrome the choice is: `en/it/es/fr/de/hi/jp/id`.\n \n- Some commands require the `'TRIGGER'` module installed to work.\n  Optional: in case of misuse is sent a warning.\n\n- The start setup delay (see [starup procvess](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#the-tuyadaemon-three-step-startup-process))\n------------------------------\n\n### Programmer's notes:\n- To test the LAN connection, `_system` reads the home page of `http://nodered.com`, and checks for some text: this can change in future, update the 'LAN check' node, const FINDSTRING.\n\n - **DataBase** commands: changing the number or use of BDs, it may be necessary to update the `*_system custom selector (3)` node, reserved to DB commands.<br>\n See the comment node `CUSTOMIZE: DBase servers (readme)`  in 'CORE'.\n\n### Details\n\n1. For users convenice, `system` also present some public node LINK (you can use them in applications):\n   - **start_DAEMON**  _fired after the initial delay_.\n   - **AC ALARM**:     _sends a msg every change of AC power_.\n   - **WIFI ALARM**:   _sends a msg every change of WiFi, if ACpower is true._\n   - **LAN ALARM**:    _sends a msg every change of LAN status_.\n \n\n2. `_system` is built as an addon: if your application doesn't need those resources, you can disable/delete this flow. \n \n\n  \n"
    },
    {
        "id": "2673718fc7207d4c",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "Test _doSCHEMA (HAL@home)",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_doSCHEMA",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "HAL@home",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 1700,
        "wires": [
            [
                "6025e92fa68b2116"
            ]
        ],
        "info": "The _system doSCHEMA property is implemented:\n  \n  for the device in Value:\n     a GET request is done for every GETtable DP (slow)\n     side effect: tuyastatus is updated.\n     \n   returns: a list of DPs.\n   \n   Example:\n         device: \"HAL@home\"\n         dps_get: array[21]\n            [0 … 9]\n                0: \"_doSCHEMA\"\n                1: \"_doUPDATE\"\n                2: \"_ACpower\"\n                ... more ...\n   \n   Plus all GETs:\n\n                [ \"RX: HAL@home/_doSCHEMA\", object ]\n                [ \"RX: HAL@home/_doUPDATE\", \"none\" ]\n                [ \"RX: HAL@home/_ACpower\", \"none\" ]\n                ... more ...\n     \nnot: doSCHEMA can be used with ANY device, also if device.SCHEMA is not available.     \n\nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#tuyastatus"
    },
    {
        "id": "6025e92fa68b2116",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 495,
        "y": 1660,
        "wires": []
    },
    {
        "id": "eeb57960e95f1bb2",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "_toShare: SET (zeroLog 3s) + START benchmark ",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_toShare\",\"value\":{\"share\":[{\"action\":[{\"device\":\"_system\",\"property\":\"_benchmark\",\"value\":{\"device\":\"_system\",\"property\":\"_zeroLog\",\"timeout\":3000}},{\"device\":\"_system\",\"property\":\"_doBenchmark\",\"value\":\"start\"}]}]}}",
        "payloadType": "json",
        "x": 820,
        "y": 1880,
        "wires": [
            [
                "ba11857305a8d634"
            ]
        ],
        "info": "\nThis test uses system.doShare to do 2 tasks in sequence:\n    1) system._benchmark (to prepare a benchmark using zeroLog for 15 s).\n    2) system._doBenchmark (to execute the benchmark)\n    \n    \nsee https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#benchmark    "
    },
    {
        "id": "a53af0d5e5df6d7f",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 815,
        "y": 880,
        "wires": []
    },
    {
        "id": "a85968429d79c148",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "statup delay",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 120,
        "wires": [
            [
                "5431c1890366aa31"
            ]
        ],
        "icon": "node-red/trigger.svg",
        "info": "startup delay\r\n\r\nserver hardware dependent, values: 1..5 s\r\n  "
    },
    {
        "id": "5431c1890366aa31",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "system flow startup",
        "func": "// Run as soon as possible after all 'On Start' and 'Global Config'.\n// So, if some 'On Start' function  requires 'Global Config' data, palace it there.\n// --------------- locals\nconst asDEVICE = \"_system\";           // singleton in alldevices\nconst asMODULE = \"modules.core_system\";\nconst VERSION  = \"2.2.2\";\n// --------------------------------------------------- standard\nif (!global.get(\"coresetup\")){\n    node.warn(\"SYSTEM STARTUP ERROR: adjust the startup delay.\");\n    return([null]);\n}\n// --------------------- global handled by this flow:\nglobal.set( asMODULE, VERSION);\n// stuff to access data\nvar oDev = context.global.alldevices.getODev(asDEVICE, \"fake\");\nif (oDev === undefined){\n   node.warn(\"[startup]ERROR [normalize]: not found the device '\"+asDEVICE+\"' in global.alldevices.\");\n   return;\n}\nvar pmDevName = context.global.alldevices.getDevName(oDev);\n// ---------------- inizializes global tuyastatus\n\nlet tstatus = \"tuyastatus['\"+pmDevName+\"']\";\n// init using only _connected (not in alldevices), so does cleanup\nglobal.set(tstatus, {_connected: true});\n// init all GETable dps with default value\noDev.dps.forEach(adp => {\n   if (['RW','WW','GW','RO','UNK','PUSH', undefined].includes(adp.capability)){\n      // this required to handle spaces un usr-names\n      let dpname = \"['\"+ (adp.name ? adp.name:adp.dp) + \"']\";\n      switch (adp.dp){     // some special init:   \n        case \"_ACunconnected\":        // array required\n        case \"_WiFiunconnected\":\n            global.set(tstatus+dpname, [\"none\"]);\n            break;\n        case \"_benchmark\":\n             global.set(tstatus+dpname, flow.get(\"benchmark\"));  // from 'On Start'\n            break;\n       default:\n            global.set(tstatus+dpname, \"none\");\n        }\n    }});\n// --------------------------------------------- standard processing ends\n// more flow init required now (and not in 'On Start') by some properties    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// more flow init for _system properties    \nvar zerobnch = {\n    \"device\":\"_system\",\n    \"property\":\"_zeroTask\",\n    \"timeout\" : 10000\n     }\n// default benchmark command\nflow.set(\"benchmark\", zerobnch);\nflow.set(\"bnch_status\", \"wait\")\n\n",
        "finalize": "global.set(\"modules.core_system\",  undefined);\n",
        "libs": [],
        "x": 710,
        "y": 120,
        "wires": [
            []
        ],
        "info": "## Programmer's note on startup.\n\nIf you add new proprties to _system (e.g. new DB commands),\nmaybe you must update this to do all required initializations.\n\nSee also 'On Start', 'On Stop' functions."
    },
    {
        "id": "4c359d0d745b4931",
        "type": "function",
        "z": "a5526c71dbbdfc5a",
        "name": "core start",
        "func": "\nlet d = new Date();\nmsg.payload.data.dps._laststart = d.toLocaleString(\"sv-SE\");  // format yyyy-mm-DD, sortable\n//\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"core running\"\n    });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n   node.status({\n        fill: \"yellow\",\n        shape: \"ring\",\n        text: \"core startup\"\n    });\n\n",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 460,
        "wires": [
            [
                "f13597ce36035ee2",
                "81d5549c5954d366"
            ]
        ]
    },
    {
        "id": "43d5522a973332bd",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "doUPDATE   real only",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_doUPDATE",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "real",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 730,
        "y": 2200,
        "wires": [
            [
                "e289f817134b4534"
            ]
        ],
        "info": "The _system doUPDATE property is implemented:\n  \n  for ALL connected devices found in real|virtual|fake|NULL(all) alldevices list:\n     a doSCHEMA request is sent.\n \n see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#tuyastatus"
    },
    {
        "id": "4e596b9062bf88ca",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "Test case for  _system + TRIGGER module",
        "info": "Test for _system properties tuya_bridge related.\n\n",
        "x": 240,
        "y": 2200,
        "wires": []
    },
    {
        "id": "87538da6c1721bbb",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test  SET _doTrigger (1050)",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_doTrigger",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "1050",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 2260,
        "wires": [
            [
                "507563bc4ec6b05e"
            ]
        ]
    },
    {
        "id": "507563bc4ec6b05e",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmd",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 505,
        "y": 2260,
        "wires": []
    },
    {
        "id": "f420808f2018f536",
        "type": "subflow:81d3b584.14c888",
        "z": "a5526c71dbbdfc5a",
        "name": "make done event",
        "env": [
            {
                "name": "deviceID",
                "value": "_system",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "_timerON",
                "type": "str"
            },
            {
                "name": "value",
                "value": "@\"Done id: \"+ msg.id",
                "type": "str"
            }
        ],
        "x": 1230,
        "y": 720,
        "wires": [
            [
                "f6ac765bbb80fb29"
            ]
        ]
    },
    {
        "id": "caae4605bf6a9215",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 1055,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f633ea0ff5ec78f9",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "GET local LIST",
        "props": [
            {
                "p": "payload.remote",
                "v": "instance_name",
                "vt": "global"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 1300,
        "wires": [
            [
                "76b2fa834194d529"
            ]
        ]
    },
    {
        "id": "0b588e8331f0e771",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "GET global.MAXREFRESH",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_toGlobal",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "{\"variable\":\"MAXREFRESH\",\"value\":\"null\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1250,
        "y": 1460,
        "wires": [
            [
                "8c81b10d20901314"
            ]
        ],
        "info": "_toDebug:\n   Send a message to debug pad,\n   Useful to send messages to remote\n   \n   see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#user-interface"
    },
    {
        "id": "941970913b94e5fd",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "SET global.MAXREFRESH 100",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_toGlobal",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "{\"variable\":\"MAXREFRESH\",\"value\":100}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1270,
        "y": 1500,
        "wires": [
            [
                "8c81b10d20901314"
            ]
        ],
        "info": "_toDebug:\n   Send a message to debug pad,\n   Useful to send messages to remote\n   \n   see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#user-interface"
    },
    {
        "id": "ec6c4adbc89f18c9",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test start RT, stop AVG",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_toGlobal",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "{\"variable\":\"<device_id>_AVERAGE\",\"value\":false}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1240,
        "y": 2060,
        "wires": [
            [
                "eed7f0b65623065c"
            ]
        ],
        "info": "_toGlobal\n   Requires a device using RT/AVG subflow.\n   SET a Global variable, to start RT mode\n "
    },
    {
        "id": "4eacf7762bf8be26",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "test end RT, start AVG",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_toGlobal",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "{\"variable\":\"<device_id>_AVERAGE\",\"value\":true}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1240,
        "y": 2100,
        "wires": [
            [
                "eed7f0b65623065c"
            ]
        ],
        "info": "_toGlobal\n   Requires a device using RT/AVG subflow.\n   SET a Global variable, to start AVG mode"
    },
    {
        "id": "7e349c338e711343",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "Test _exec ( notepad.exe )",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_exec",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "notepad.exe",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 1380,
        "wires": [
            [
                "5c6990896e8004a6"
            ]
        ],
        "info": "\nSystem exec (System dependece)\n Used for test 'notepad.exe'.\n \n This task ends when the application is closed.\n \n see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#_exec\n \n expected result:\n \n    [\"TX: SET fake HAL@home/_exec\", \"notepad.exe\" ]\n    [ \"RX: HAL@home/_exec\", \"started\" ]\n   \n  notepad pops up.\n  After closed notepad:\n\n   [ \"RX: HAL@home/_exec\", \"done\" ]\n"
    },
    {
        "id": "2026509020eb2b5f",
        "type": "inject",
        "z": "a5526c71dbbdfc5a",
        "name": "Test _exec ( ls -l)",
        "props": [
            {
                "p": "payload.device",
                "v": "_system",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_exec",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "ls -l",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 1420,
        "wires": [
            [
                "5c6990896e8004a6"
            ]
        ],
        "info": "\nSystem exec (System dependece)\n Used for test 'notepad.exe'.\n \n This task ends when the application is closed.\n \n see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#_exec\n \n expected result:\n \n24/4/2023, 08:50:51node: tuyaDAEMON.core.info\nmsg.payload : array[2]\n[ \"TX: SET fake HAL@home/_exec\", \"ls -l\" ]\n\n24/4/2023, 08:50:51node: tuyaDAEMON.core.info\nmsg.payload : array[2]\n[ \"RX: HAL@home/_exec\", \"started\" ]\n\n24/4/2023, 08:50:51node: tuyaDAEMON.core.info\nmsg.payload : array[2]\narray[2]\n0: \"RX: HAL@home/_exec\"\n1: string\ntotal 522934\n-rwxr-xr-x 1 u0_a68 u0_a68       129 Apr 13 10:09 backup.sh\ndrwx------ 2 u0_a68 u0_a68      3452 Apr 12 20:19 htdocs\ndrwx------ 6 u0_a68 u0_a68      3452 Apr 12 20:16 lampTermux\n-rwxr-xr-x 1 u0_a68 u0_a68        99 Apr 13 08:37 listservices.sh\n-rwxr-xr-x 1 u0_a68 u0_a68       161 Apr 13 10:11 restore.sh\n-rw------- 1 u0_a68 u0_a68         2 Apr 24 08:49 saved_jsontimers_886cdd12.7efdd.json\ndrwx------ 2 u0_a68 u0_a68      3452 Apr 13 10:43 storage\ndrwx------ 2 u0_a68 u0_a68      3452 Apr 14 08:46 tuyadaemon\n-rw------- 1 u0_a68 u0_a68 534924452 Apr 13 10:53 v   \n \n\n"
    },
    {
        "id": "eed7f0b65623065c",
        "type": "link out",
        "z": "a5526c71dbbdfc5a",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1455,
        "y": 2060,
        "wires": []
    },
    {
        "id": "6a46a0207877f08d",
        "type": "comment",
        "z": "a5526c71dbbdfc5a",
        "name": "Special test case: RT/AVG node",
        "info": "system properties requiring RT/AWG node, locval, remote DB\n\n\nsee [global.<device_id>_AVERAGE(https://github.com/msillano/tuyaDAEMON/wiki/case-study:-433-MHz-weather-station#details)]\n",
        "x": 1230,
        "y": 2000,
        "wires": []
    },
    {
        "id": "16841912dc8eb04c",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 1305,
        "y": 400,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "f9741682bf3b5020",
        "type": "comment",
        "z": "885794d873f674af",
        "name": "CORE TRIGGER  extension 2.2.2",
        "info": "a) Initial configuration: see `*Global TRIGGER config` node.\n\nb) TEST FLOW\nTest mini-flows are present for virtually all features.\nSee result in sidebar.\n\n### Troubleshooting ###\n\n1. _After 'Deploy' the module don't send nothing to sidebar log_\n2. _Some tests do not work at all (no log)_\n\n   _Cause_: The 'Deploy', after an 'Import', sometime (not clear why) do not set external 'link' nodes.\n\n   **Important: after 'Import' + 'Deploy' CHECK all external links nodes**. <br>\n   As help, the name of all Links shows the origin or the destination (e.g.: `from core.'to fake devices'`, `to core.'logging'`)\n\n3. _\"[startup] ERROR: not found the device_ '_tuya_bridge' in global.alldevices.\"_<br>\n   Verify `alldevices` in `Global CORE config` node, and `TUYABRDG` in `Global TRIGGER config` node.\n   Usually a writing mistake.\n\n\n4. _TRIGGER STARTUP ERROR: adjust the startup delay_<br>\n  You need to increment the delay in 'startup delay' node. See [starup process](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#the-tuyadaemon-three-step-startup-process).\n\n5. **GENERAL WARNING**: the `'import'+'Deploy'` does not copy `'credential' parameters`.\nTuyaDAEMON uses `credential` only in input fields containing `'id'` and `'key'` of Tuya devices (optional).<br>\n_So you must check all nodes with the 'credential' option:_\n   - `tuya-smart-device` node\n   - `do logging`, `do command`, `static retry`, `dynamic retry`, `REFRESH` CORE subflows.\n \n5. _If a 'real' Tuya device refuses the connection at startup_:\n   - double check the [device `id`](https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON#1-preconditions). A bad `key` prevents the data from being properly decrypted (see [TuyAPI note 5](https://github.com/codetheweb/tuyapi#-notes))\n   - wait and be patient: usually  a device connects in 1-6 retries\n   - try node-red \"Deploy\" command\n   - try node-red \"Restart flows\" command (very effective)\n   - Switch off then switch on the device power.\n   - Restart node-red.\n   - Switch off then switch on the WiFi router power.\n   - Weak signal: consider moving the device or extending the WiFi with a repeater\n\n------------------------------------\n2.2.2\n- updated installation istructions\n",
        "x": 210,
        "y": 100,
        "wires": []
    },
    {
        "id": "c9f43698db6a94fd",
        "type": "link in",
        "z": "885794d873f674af",
        "name": "tuya_bridge_IN",
        "links": [
            "055f2c0389c9d8c2",
            "134a47631a141e3e",
            "1bd688a87436ccac",
            "3c7ce69147ffd936",
            "83ab4822.a4d028",
            "9114bc51fbe925c0",
            "eaa0294fa9bcaa60",
            "ed2ec57f05ea9507",
            "f91f7b1b0a3e911f"
        ],
        "x": 180,
        "y": 480,
        "wires": [
            [
                "0a391693eddda083"
            ]
        ],
        "icon": "node-red/arrow-in.svg",
        "l": true,
        "info": "\nAccepts device low level msg\nlike: \n\nmsg.payload:\n    {\n    \"operation\": \"SET\",\n    \"dps\": \"7\",        // HW dependent, used defined in `core-trigger.global.COUNTDP`\n    \"set\": 1050           // user defined values: see `core-trigger.triggerMAP` node.\n    }\n    \nsee also the subflow `REDTRG`, to build this msg.   \n"
    },
    {
        "id": "bed10ef4827dd0ee",
        "type": "debug",
        "z": "885794d873f674af",
        "d": true,
        "name": "*trace: msg OUT from tuya_bridge",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 140,
        "wires": [],
        "info": "CUSTOMIZATION\n\n- Enable to see in the debug pad all msg FROM the 'tuya_bridge' device.\n- Normal use: disabled"
    },
    {
        "id": "d32097783c29d84d",
        "type": "debug",
        "z": "885794d873f674af",
        "d": true,
        "name": "*trace: msg IN for tuya_bridge",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 100,
        "wires": [],
        "info": "CUSTOMIZATION\n\n- Enable to see in the debug pad all msg TO the 'tuya_bridge' device.\n- Normal use: disabled"
    },
    {
        "id": "3954e84e7c450956",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.more_devices_IN",
        "mode": "link",
        "links": [
            "fbb618a4bd787cde"
        ],
        "x": 1305,
        "y": 460,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "0addf7b206820c76",
        "type": "subflow:ee953c15.ada29",
        "z": "885794d873f674af",
        "name": "",
        "env": [
            {
                "name": "deviceId",
                "value": "tuya_bridge id",
                "type": "str"
            },
            {
                "name": "deviceID",
                "value": "bfa355aa196ae5975cy6ii",
                "type": "str"
            }
        ],
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "3954e84e7c450956"
            ]
        ]
    },
    {
        "id": "29e378e3d71802ac",
        "type": "delay",
        "z": "885794d873f674af",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "30",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 740,
        "y": 380,
        "wires": [
            [
                "2bfe908d6cb817ae",
                "d32097783c29d84d"
            ]
        ],
        "info": "limit throughput, but allows smooth operations and less connection problems\n\nnote: node not usable for fast rates: internal delay limit about 690/10s\n"
    },
    {
        "id": "f6cd5fd21607f941",
        "type": "comment",
        "z": "885794d873f674af",
        "name": "Debug trace",
        "info": "\n - Disable unwonted trace nodes.\n  \n ",
        "x": 910,
        "y": 100,
        "wires": []
    },
    {
        "id": "2bfe908d6cb817ae",
        "type": "tuya-smart-device",
        "z": "885794d873f674af",
        "deviceName": "*_tuya_bridge",
        "disableAutoStart": false,
        "deviceId": "",
        "deviceKey": "",
        "storeAsCreds": true,
        "deviceIp": "",
        "retryTimeout": "2000",
        "findTimeout": "1000",
        "tuyaVersion": "3.1",
        "eventMode": "event-both",
        "x": 980,
        "y": 380,
        "wires": [
            [
                "16841912dc8eb04c",
                "bed10ef4827dd0ee",
                "5d7f8266bbfda88a",
                "06be4132ca3c2bb7"
            ],
            [
                "0addf7b206820c76",
                "ac1a6fce4130d5bb"
            ]
        ],
        "info": "CUSTOMIZATION\n\n- About TRIGGERS and devices [see here](https://github.com/msillano/tuyaDAEMON/tree/main/tuyaTRIGGER#implementation) \n\nSetup for a new tuya_bridge device: any device as a different 'countdown' dp, so you must update the cconst 'triggerDP':\n\n- the node trigger.'dp convert'\n- the sub-flow 'red-trigger'\n- the code for 'case \"_doTrigger\":' in _system.'sistem cmd selector 2' node."
    },
    {
        "id": "e170520e286bb22a",
        "type": "comment",
        "z": "885794d873f674af",
        "name": "test   Tuya_bridge counter  + CORE",
        "info": "\nTest some TRIGGER capabilities.\n\nRuquires core trigger  'Global TRIGGER config' node updated.",
        "x": 180,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c6efc183c33d644b",
        "type": "comment",
        "z": "885794d873f674af",
        "name": "triggerMAP (readme)",
        "info": "\nThis is hardware depended, and can be modified.\n\n1) HW:  I use a TYWR 7-32  switch (see the [wiki](https://github.com/msillano/tuyaDAEMON/tree/main/tuyaTRIGGER) and the [switch](https://github.com/msillano/tuyaDAEMON/blob/main/devices/switch-1CH/device_switch-1CH.pdf)), \n   - the countdown (`dps = 7`) has a range `0..86400` s (24 H).\n   - the countdown is PUSHed `every 30 s`.\n   - `SET(countdown, 0)` does not change the switch status.<br><br>\n2) >The switch is free and usable by any applications: the TRIGGER uses only the `countdown` function and does NOT interfere with the status of the switch.\n\n3) RULES:\n   - _Tuya limits_:  100 automations for 'home' and 20 'homes' per account, i.e. max. 2000 triggers (see info on [wiki](https://github.com/msillano/tuyaDAEMON/wiki/tuyaTRIGGER-info)).\n   - _The problem is that the `countdown` counts anytime, so, if an ACK is missed, the count can TRIGGER the next lower value (interference)_.\n   - If the direction is _Tuya-cloud -> tuyaDAEMON_, the receiver (tuyaDAEMON) MUST send asap an ACK (`SET to 0 the dp 7`).\n   - If the direction is _tuyaDAEMON -> Tuya-cloud_, the related automation MUST, as first action, `set to 0 the countdown`.\n   - In the used tuya_bridge device, the countdown sends every 30s the actual value, as PUSH. This PUSH is used as fallback mechanism to reset the countdown to 0.\n   - So: the receiver MUST send an `ACK` asap, max. 30s. If missed, the fallback (countdown PUSH + code in `ACK and filter` node) resets the conter.\n   - However, interference between two events or commands that are too close together is possible: if necessary, a complete HANDSHAKE protocol can be implemented.\n>The range 1 - 86400 can be used, for user commands or mirror devices.\nI use following rules:\n4) RULES\n   - All parameters are stored in the `Global TRIGGER Config` node, for easy update.\n\n   - Assign close values to each device/application but use values _multiple of a fixed amount,_ e.g. `70`s. This gives us a total 1235 triggers and it allows 2 fallback intervents before interference.\n \n   - Before a critical application (e.g. alarm), to be safe, you can insert an extra guard.\n \n   - Place commands `TO Tuya-cloud` in the upper range, messages `FROM Tuya-cloud` in the lower range: in case of `tuyaDEAMON` down, cammands are not sended, and the messages from devices, not handled, are without dangerous conseguences.\n  \n   - I keep separate the trigger used for the 'mirror' devices (i.e. devices NOT handled by `node-tuya-smart-device`) and the `user-trigger`, used to do other communications to/from tuya-cloud.\n \n------------------------- \n## the trigger MAP for  TYWR 7-32  switch (default)\n\n| count [s]  |  Description                                     |\n|-------:|:---------------------------------------------------------------------|       \n|    0     |  _This MUST never be reached, because the switch toggles at 0_.<br>`SET(countdown, 0)` (`ACK`) is allowed, the switch does not toggle. |\n| &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1..1049  | Not used (security gap). |\n|  1050    | LOWGUARD value, handled by Tuya-cloud (case of tuyaDAEMON shutdown). The management of a guard is entirely entrusted to _Tuya automation_ (add it to SmartLife).<br>_note: This automation is also used to measure the tuyaDAEMON roundtrip time (see_ `tuya_bridge.trgPing` _property_). |\n```\n        if \"tuya_bridge\"(countdown1) = 1050,\n             then 0 => \"tuya_bridge\"(countdown1)\n```     \n| count [s]  |  Description                                     |\n|----:|:----------------------------------------------|       \n| 1051..10009 |   Reserved (future uses) |\n| 10010..20019| area for about 130 user-events FROM TUYA (TuyaTRG)|\n| 20020..29959| area for about 130 user-commands  TO TUYA (RedTRG)\n| 29960  |  MIRRORGUARD value (add the Tuya-cloud guard Automation)|\n```\n        if \"tuya_bridge\"(countdown1) = 29960,\n             then 0 => \"tuya_bridge\"(countdown1)\n``` \n| count [s]  |  Description                                     |\n|----:|:----------------------------------------------|       \n| 30030..50049 | Area for about 270  events FROM TUYA 'mirror' devices |\n| 50050..70069 | Area for about 270 commands TO TUYA 'mirror' devices  |\n| 70070.. 86500 | Reserved (future uses)  |\n\n---------------------------\n\n \n",
        "x": 490,
        "y": 260,
        "wires": []
    },
    {
        "id": "3ea894c88e5d4159",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "test:  GET(1)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"operation\":\"SET\",\"dps\":\"1\",\"set\":null}",
        "payloadType": "json",
        "x": 170,
        "y": 900,
        "wires": [
            [
                "3c7ce69147ffd936"
            ]
        ],
        "info": "test: GET switch status\n\nprecondition:\n     tuya_bridge device connected.\n\nexpected result:\n      in debugpad the message with the correct tuya_bridge switch status;\n      [\"RX: 'tuya_bridge'/'relay' \",\"OFF\"]  (or \"ON\")"
    },
    {
        "id": "ac1a6fce4130d5bb",
        "type": "debug",
        "z": "885794d873f674af",
        "d": true,
        "name": "trace tuya_bridge control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 180,
        "wires": []
    },
    {
        "id": "1a6dc55f5f7fb299",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "test:  SET(1) = false",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"operation\":\"SET\",\"dps\":\"1\",\"set\":false}",
        "payloadType": "json",
        "x": 190,
        "y": 820,
        "wires": [
            [
                "3c7ce69147ffd936"
            ]
        ],
        "info": "test: SET switch OFF\n\nprecondition:\n     tuya_bridge device connected.\n\nexpected result:\n      on debugpad the message:\n      [\"RX: 'tuya_bridge'/'relay' \",\"OFF\"]"
    },
    {
        "id": "0737fa76bb69ad7a",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "test:  SET(1) = true",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"operation\":\"SET\",\"dps\":\"1\",\"set\":true}",
        "payloadType": "json",
        "x": 190,
        "y": 860,
        "wires": [
            [
                "3c7ce69147ffd936"
            ]
        ],
        "info": "test: SET switch ON\n\nprecondition:\n     tuya_bridge device connected.\n\nexpected result:\n      on debugpad the message:\n      [\"RX: 'tuya_bridge'/'relay' \",\"ON\"]"
    },
    {
        "id": "334ea0a0d57f2875",
        "type": "comment",
        "z": "885794d873f674af",
        "name": "LOW LEVEL only for test (device dependent) ",
        "info": "Test the tuya_bridge device.\nHere some LOW LEVEL test to verify TuyaDAEMON real device management\n\nEnable node *trace: msg IN for tuya_bridge\nEnable node *trace: msg OUT from tuya_bridge\n\n\nTested on Switch-1CH (TYWR 7-32, see https://github.com/msillano/tuyaDAEMON/blob/main/devices/switch-1CH/device_switch-1CH.pdf):\n\n- The switch is dp 1\n- The countdown is dp 7\n- The countdow is refreshed every 30s (PUSH)\n\nCUSTIMIZATION:\n- using a different device maybe not all DPs are implemented and you must update all LOW LEVEL messages.",
        "x": 230,
        "y": 720,
        "wires": []
    },
    {
        "id": "3c7ce69147ffd936",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to tuya_bridge IN",
        "mode": "link",
        "links": [
            "c9f43698db6a94fd"
        ],
        "x": 545,
        "y": 820,
        "wires": []
    },
    {
        "id": "620cb8b613da9842",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "counter:  GET(COUNTDP)  ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.dps",
                "v": "COUNTDP",
                "vt": "global"
            },
            {
                "p": "operation",
                "v": "SET",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"set\": null}",
        "payloadType": "json",
        "x": 1250,
        "y": 820,
        "wires": [
            [
                "055f2c0389c9d8c2"
            ]
        ],
        "info": "counter READ\n\nnote about the used device:\n  -  Read returns not the actual value, but the last PUSHed.\n  -  GET(dp) must be implemented as SET(dp, null).\n\nsee https://github.com/msillano/tuyaDAEMON/blob/main/devices/switch-1CH/device_switch-1CH.pdf\n\nprecondition:\n     tuya_bridge device connected.\n\nexpected result:\n      [ \"RX: 'tuya_bridge'/'trigger (re…\", xxx ]   (usually 0)"
    },
    {
        "id": "efd9e25bfee6eefe",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "fallback:   SET counter 7000",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.dps",
                "v": "COUNTDP",
                "vt": "global"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"operation\":\"SET\",\"set\":7000}",
        "payloadType": "json",
        "x": 1250,
        "y": 960,
        "wires": [
            [
                "055f2c0389c9d8c2"
            ]
        ],
        "info": "test fallback \n\n _The values used in the counter as TRIGGER are multiple of 70 (flow.COUNTSTEP)._\n _See 'Tuya-bridge MAP (example)' node._\n \n _Normally the receiver, when a TRIGGER arrives, sends an ACK (reset 0) to the counter, to avoid interference with the previous TRIGGER, or worse, the relay toggle if the counter reaches 0._\n \n _To reduce interference, tuyaDAEMON exploits PUSHed values every 30s from the counter to do a fallback auto-reset in case of ACK failure for any reason._\n    \n _7000 is multiple of 70, i.e. it can be a TRIGGER: therefore tuyaDEAMON dont auto-sends the ACK. But 7000 is not a defined TRIGGER, so nobody sends the ACK._\n\n _tuyaDEAMON auto-sends an ACK at next message PUSHed from the device counter not multiple of 700, i.e. 7000-30 = 6970. If 6970 is also missed for any reason, a second chance is at 7000-60 = 6940._\n_note: some devices send the countdown when 30*k, i.e. at 6990: same result._\n\nexpected result:\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \", 7000]  // echo \n  \n  after 30s: \n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \", 6970]  // counter PUSH \n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \",0]     // echo auto-ACK\n\nTroubleshooting (more than one tuyaDAEMON instance):\n1)  If after:\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \", 6970]\n  is missed:\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \",0]\n  Check trigger.global.is_master: one instance must be 'true'.\n  \n2) After:\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \", 6970]\n  if you have two tuyaDAEMON instances, you can send two ACK:\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \",0]\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \",0]\n  Check trigger.global.is_master: only one instance must be 'true' (usually the one 24/7)\n"
    },
    {
        "id": "055f2c0389c9d8c2",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to tuya_bridge IN",
        "mode": "link",
        "links": [
            "c9f43698db6a94fd"
        ],
        "x": 1485,
        "y": 820,
        "wires": []
    },
    {
        "id": "70b0b83ea40a4b44",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "test:  SCHEMA",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"operation\":\"GET\",\"schema\":true}",
        "payloadType": "json",
        "x": 170,
        "y": 940,
        "wires": [
            [
                "3c7ce69147ffd936"
            ]
        ],
        "info": "test: tuya_bridge SCHEMA command\n\nprecondition:\n     tuya_bridge device connected.\n\nexpected result (device dependent):\n     on debugpad a RX message for every property with the actual value:\n     [\"RX: 'tuya_bridge'/'relay' \",\"OFF\"]\n     [\"RX: 'tuya_bridge'/'trigger (reserved)' \",0]\n     [\"RX: 'tuya_bridge'/'restart status' \",\"memory\"]\n     ... more\n"
    },
    {
        "id": "c41ef0bd9b79a54c",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "Test tuya LOW GUARD",
        "props": [
            {
                "p": "payload.operation",
                "v": "SET",
                "vt": "str"
            },
            {
                "p": "payload.dps",
                "v": "$globalContext(\"COUNTDP\")",
                "vt": "jsonata"
            },
            {
                "p": "payload.set",
                "v": "$number($globalContext(\"LOWGUARD\"))",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1240,
        "y": 1020,
        "wires": [
            [
                "055f2c0389c9d8c2"
            ]
        ],
        "info": "The reset comes from Tuya-cloud automation.\nnote: uses the global.LOWGUARD value (1050): see triggerMAP.\n\nIt requre (mandatory) the guard automation in tuya-cloud:\n     if tuya_bridge countdown 1 = 1050\n         then tuya_bridge countdown 1 <= 0\n\nexpected result:\n  on debugpad the message:\n      [ \"RX: 'tuya_bridge'/'trigger (re…\", 1050 ]\n and after that:         \n      [ \"RX: 'tuya_bridge'/'trigger (re…\", 0 ]\n"
    },
    {
        "id": "dbccf536af42afbd",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "test: SET  counter 0",
        "props": [
            {
                "p": "payload.operation",
                "v": "SET",
                "vt": "str"
            },
            {
                "p": "payload.dps",
                "v": "COUNTDP",
                "vt": "global"
            },
            {
                "p": "payload.set",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1230,
        "y": 860,
        "wires": [
            [
                "055f2c0389c9d8c2"
            ]
        ],
        "info": "test: SET counter to 0\n\nprecondition:\n     tuya_bridge device connected.\n\nexpected result:\n      on debugpad the message:\n      [\"RX: 'tuya_bridge'/'relay' \",\"ON\"]"
    },
    {
        "id": "06be4132ca3c2bb7",
        "type": "function",
        "z": "885794d873f674af",
        "name": "TRIGGER filter",
        "func": "// input  checks tuya_bridge messages\n// output 1: the msg.tuyatrigger is the value from tuya-bridge, for more processing.\n// output 2: the low-level SET 0 (ACK) for tuya-bridge.\nvar xdp = global.get('COUNTDP');\n\nvar xtime = 0;\n// it is a counter message?\nif (msg.payload.data && (msg.payload.data.dps[xdp] != undefined))\n    xtime = msg.payload.data.dps[xdp];\nelse\n    return [];\n\nif (xtime < 60) return [null];   // 0 or bad value, nothing to do    \n// special case for 'GUARD', to allow tests (pings)\n// ACH not required, done allway by tuya automation\nif (xtime == global.get('LOWGUARD')) return [null];\nif (xtime == global.get('MIRRORGUARD')) return [null];\n\n// set in msg the dedicated value tuyatrigger\nmsg.payload.tuyatrigger = xtime;\nmsg.payload.data = {};\n\nconst isMaster = flow.get('is_master');\n\n// it is a TRIGGER?\nif (xtime % flow.get('COUNTSTEP') == 0) {\n// uses triggerMAP values to select TUYATRG and to send ACK (if master)   \n    if ((xtime >= 10010) && (xtime < 20020)){\n        return [null, msg, isMaster ? msg : null];\n    };\n    if ((xtime >= 30030) && (xtime < 50050)){\n        return [msg, null, isMaster ? msg : null];\n    }\n // else nothing to do   \n return [null, null, null];\n}\n\n// not a TRIGGER, it is a PUSH: does only the ACK fallback)\nreturn [null, null, isMaster ? msg : null];\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "\n",
        "libs": [],
        "x": 980,
        "y": 300,
        "wires": [
            [
                "9c722072d8652d08"
            ],
            [
                "c0057180f9fecfa9"
            ],
            [
                "e7555082dde44cf8"
            ]
        ],
        "inputLabels": [
            "from device"
        ],
        "outputLabels": [
            "TUYATRG events from mirror",
            "TUYATRG custom events",
            "to ACK"
        ]
    },
    {
        "id": "c0057180f9fecfa9",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "user events",
        "mode": "link",
        "links": [
            "1c054ced9cb3bc9c"
        ],
        "x": 1230,
        "y": 300,
        "wires": [],
        "l": true
    },
    {
        "id": "7c54612bc045014d",
        "type": "config",
        "z": "885794d873f674af",
        "name": "*Global TRIGGER config",
        "properties": [
            {
                "p": "COUNTDP",
                "pt": "global",
                "to": "7",
                "tot": "str"
            },
            {
                "p": "COUNTSTEP",
                "pt": "flow",
                "to": "70",
                "tot": "str"
            },
            {
                "p": "is_master",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "p": "MIRRORGUARD",
                "pt": "global",
                "to": "29960",
                "tot": "str"
            },
            {
                "p": "LOWGUARD",
                "pt": "global",
                "to": "1050",
                "tot": "str"
            },
            {
                "p": "NPING",
                "pt": "flow",
                "to": "5",
                "tot": "str"
            },
            {
                "p": "TUYABRDG",
                "pt": "global",
                "to": "_tuya_bridge",
                "tot": "str"
            }
        ],
        "active": true,
        "x": 210,
        "y": 160,
        "wires": [],
        "info": "## TRIGGER Configuration\n\nVALUES for the [TYWR 7-32](https://github.com/msillano/tuyaDAEMON/blob/main/devices/switch-1CH/device_switch-1CH.pdf) switch.\n\nUser defined CONSTANTs, see '`Tuya-bridge MAP`' node for details:\n\n   _COUNTDP_ (7)<br>\n      the dp for the cunter in tuya_bridge device (see datasheet)\n\n   _COUNTSTEP_  (70)\n      time between TRIGGERs:<br>\n         (COUNTSTEP > 2 * delta-count_)<br>\n      Example: delta-count = 30s => 2* 30 + 10 = **70** \n      i.e. 2 fallback chances before interference.\n      \n   _MIRRORGUARD_ (29960)<br>\n       Tuya-cloud guard between 'mirror' devices and custom events. Must be COUNTSTEP multiple:\n          (_MIRRORGUARD = COUNTSTEP * n1_), used in Tuya automation.\n       \n   _LOWGUARD_ (1050)<br>\n       The Tuya-cloud guard low value.  Must be COUNTSTEP multiple:\n          (_LOWGUARD = COUNTSTEP * n2_), used in Tuya automation.\n\n \n Configuration:\n \n _TUYABRDG_  ('_tuya-bridge')<br>\n        The name of the used device, as in global.alldevices.\n        \n  _is-master_  true (default)| false<br>\n        In case of multiple instances using the same 'tuya_bridge' device, only one is the 'master' that does the fallback (auto ACK).  \n\n  _NPING_ (5)<br>\n        Numbers of pings used by _tstPing capability.\n --------------------------------       \n\n### INSTALLATION  \n\n**Preconditions** \n  * TuyaDAEMON CORE, SYSTEM installed and working\n\n You MUST have one HW Tuya device (switch):\n  * Identify the counter DP (for the 'TYWR 7-32': dp = 7)\n  * Verify that `SET(counter, 0)` does not change the switch status ON/OFF\n  * Identify the `delta-count`, the count PUSH rate (for the 'TYWR 7-32': 30s)\n  * _Define a `triggerMAP` for your device._ (see `triggerMAP (readme)` node)\n\n_If the [device is known](https://github.com/msillano/tuyaDAEMON/tree/main/devices) verify the datasheet, else do some tests to verify preconditions._\n    \nHardware used values:\n   device counter DP:   7                        ( in _COUNTDP_)\n   device delta-count: 30 s            (used in MAP definitions)\n   step between used values: 70                ( in _COUNTSTEP_) \n  \n**flow setup** <br>\n - Import in node-red the  `core_TRIGGER` flow ()\n - Set in `trigger.tuya-smart-device` node the `ID` and `Key` of the actual device.\n - 'tuya_bridge' must reconnect fast: set both timeout to 500-1000 ms.\n - Set in `trigger.static-retry node` the `ID` of the actual device.\n - **Important: After 'Import' + 'Deploy' CHECK all external links nodes**.\n\nIn CORE, update the '*device selector': '_tuya_bridge' MUST be the first device.\n\n**Update  the `global.alldevices.real` in '`Global CORE setup`' node:** <br>\n Insert the data for the switch used (if not already installed for tests). \n Then do following updates:\n - Change the switch device name as in  _TUYABRDG_  (default '_tuya-bridge').\n - Add (merge) 2 new dPs to the device, from the file `device__trigger.json`.\n      - update also the device-name at line 26!\n      - Pay attention to curly braces and commas when editing the global.alldevices !!\n - Edit the `switch.countdown` dP used (dp in _COUNTDP_):\n      - name: \"trigger (reserved)\"\n      - capabilities: \"TRG\" \n\ndone.\nDeploy and try the tests in the 'core_TRIGGER' flow.\n\n \nnote: After debugging, in production, it is better to hide all trigger messages:\nAdd \"hide\"=\"K\" to dp used (_COUNTDP_).\n"
    },
    {
        "id": "fd8071339ca9c39b",
        "type": "link in",
        "z": "885794d873f674af",
        "name": "ACK IN",
        "links": [
            "e7555082dde44cf8",
            "796450ef58285ec6",
            "5ceb67635c4ea577"
        ],
        "x": 210,
        "y": 380,
        "wires": [
            [
                "c9d78cea377c816f"
            ]
        ],
        "l": true,
        "info": "Sends a SET 0 counter to tuya_bridge.\nInput: any (acts as trigger)\n"
    },
    {
        "id": "9c722072d8652d08",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "mirror events",
        "mode": "link",
        "links": [
            "3b1a0cbbfb083c57"
        ],
        "x": 1230,
        "y": 260,
        "wires": [],
        "l": true
    },
    {
        "id": "5edd62cf3d75cb4d",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "test: SET counter 20020",
        "props": [
            {
                "p": "payload.operation",
                "v": "SET",
                "vt": "str"
            },
            {
                "p": "payload.dps",
                "v": "COUNTDP",
                "vt": "global"
            },
            {
                "p": "payload.set",
                "v": "20020",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1250,
        "y": 1120,
        "wires": [
            [
                "055f2c0389c9d8c2"
            ]
        ],
        "info": "Test for REDTRG20020 (user command to Tuya-cloud) direct.\n\nprecondition:\n   tuya_bridge device connected.\n\n  For this test is required a Tuya-cloud automation:\n     \n     if tuya_bridge counter1 = 20020\n         then \n            tuya_bridge counter1 <= 0          // the ACK\n         and\n            <do_anything> (e.g. notification)\n            \nexpected result:\n  on debugpad the message:\n      [ \"RX: 'tuya_bridge'/'trigger (re…\", 20020 ]   //echo from device\n  after that the ACK:      \n      [ \"RX: 'tuya_bridge'/'trigger (re…\", 0 ]       //echo from device \n and:         \n      <do_anything>  Tuya-cloud action.\n            "
    },
    {
        "id": "edc14ea297207d7a",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "Test tuya MIRROR GUARD",
        "props": [
            {
                "p": "payload.operation",
                "v": "SET",
                "vt": "str"
            },
            {
                "p": "payload.dps",
                "v": "$globalContext(\"COUNTDP\")",
                "vt": "jsonata"
            },
            {
                "p": "payload.set",
                "v": "$number($globalContext(\"MIRRORGUARD\"))",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1260,
        "y": 1060,
        "wires": [
            [
                "055f2c0389c9d8c2"
            ]
        ],
        "info": "The reset comes from Tuya-cloud automation.\nnote: uses the global.MIRRORGUARD value (e.g. 29960) see 'triggerMAP' node.\n\nIt requre (mandatory) the guard automation in tuya-cloud:\n     if tuya_bridge countdown 1 = 29960     \n         then tuya_bridge countdown 1 <= 0\n\nexpected result:\n  on debugpad the message:\n      [ \"RX: 'tuya_bridge'/'trigger (re…\", 29960 ]  // echo from device\n and after that:         \n      [ \"RX: 'tuya_bridge'/'trigger (re…\", 0 ]      // echo from device\n"
    },
    {
        "id": "9f6f85339215cf9a",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "test: SET FIND 3s",
        "props": [
            {
                "p": "payload.operation",
                "v": "CONTROL",
                "vt": "str"
            },
            {
                "p": "payload.action",
                "v": "SET_FIND_TIMEOUT",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "3000",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 940,
        "wires": [
            [
                "1bd688a87436ccac"
            ]
        ],
        "info": "test: SET the FIND phase timeout (default in device node properties)\n\nprecondition:\n     tuya_bridge device connected.\n\nexpected result:\n     internal command: no visible result.\n     In case of bad connection: this is the wait time for a device response.\n\n     "
    },
    {
        "id": "4b93438871d7b8a1",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "RECONNECT tuya_bridge",
        "props": [
            {
                "p": "payload.operation",
                "v": "CONTROL",
                "vt": "str"
            },
            {
                "p": "payload.action",
                "v": "RECONNECT",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 900,
        "wires": [
            [
                "1bd688a87436ccac"
            ]
        ],
        "info": "test: RECONNECT tuya_bridge device\n\nprecondition:\n    1) if tuya_bridge device connected: disconnect then connect\n    1) if tuya_bridge device disconnected: connect\n\nexpected result:\n      tuya_bridge device connected and in debugpad some RX messages:\n      [ \"RX: 'tuya_bridge'/'_connected'…\", true ]\n      [ \"RX: 'HAL@home'/'_WiFinet' \", true ]\n      [ \"RX: 'HAL@home'/'_WiFiunconnect…\", array[0] ]\n      ... more (more status messages can be present)\n\n"
    },
    {
        "id": "5b148396910dff40",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "CONNECT tuya_bridge",
        "props": [
            {
                "p": "payload.operation",
                "v": "CONTROL",
                "vt": "str"
            },
            {
                "p": "payload.action",
                "v": "CONNECT",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 760,
        "y": 860,
        "wires": [
            [
                "1bd688a87436ccac"
            ]
        ],
        "info": "test: CONNECT tuya_bridge device\n\nprecondition:\n     tuya_bridge device disconnected.\n\nexpected result:\n      tuya_bridge device connected and in debugpad some RX messages:\n      [ \"RX: 'tuya_bridge'/'_connected'…\", true ]\n      [ \"RX: 'HAL@home'/'_WiFinet' \", true ]\n      [ \"RX: 'HAL@home'/'_WiFiunconnect…\", array[0] ]\n      ... more (more status messages can be present)\n\n"
    },
    {
        "id": "544bc0146d4b4f4f",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "DISCONNECT tuya_bridge",
        "props": [
            {
                "p": "payload.operation",
                "v": "CONTROL",
                "vt": "str"
            },
            {
                "p": "payload.action",
                "v": "DISCONNECT",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 820,
        "wires": [
            [
                "1bd688a87436ccac"
            ]
        ],
        "info": "test: DISCONNECT tuya_bridge device\n\nprecondition:\n     tuya_bridge device connected.\n\nexpected result:\n      tuya_bridge device disconnected and in debugpad some RX messages:\n      [ \"RX: 'tuya_bridge'/'_connected'…\", false ]\n      [ \"RX: 'HAL@home'/'_WiFinet' \", false ]\n      [ \"RX: 'HAL@home'/'_WiFiunconnect…\", array[1] ]\n      ... more (more status messages can be present)"
    },
    {
        "id": "1bd688a87436ccac",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to tuya_bridge IN",
        "mode": "link",
        "links": [
            "c9f43698db6a94fd"
        ],
        "x": 1015,
        "y": 820,
        "wires": []
    },
    {
        "id": "13158b71478e08e4",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "test: SET RETRY 5s",
        "props": [
            {
                "p": "payload.operation",
                "v": "CONTROL",
                "vt": "str"
            },
            {
                "p": "payload.action",
                "v": "SET_RETRY_TIMEOUT",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "5000",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 980,
        "wires": [
            [
                "1bd688a87436ccac"
            ]
        ],
        "info": "test: SET the RETRY phase timeout (default in device node properties)\n\nprecondition:\n     tuya_bridge device connected.\n\nexpected result:\n     internal command: no visible result.\n     In case of bad connection: next retry after this time.\n    \n"
    },
    {
        "id": "b94fb7355eaf0785",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "tuya_bridge Standby true",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "_standby",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "true",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1260,
        "wires": [
            [
                "270b7038e90bdcd9"
            ]
        ],
        "info": "standard tuyad_bridge standby mode on (disconnected). Don't use direct 'DISCONNECT' low level command."
    },
    {
        "id": "270b7038e90bdcd9",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 425,
        "y": 1260,
        "wires": []
    },
    {
        "id": "a5ddc4615fd1b12c",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "tuya_bridge Standby false",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "_standby",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "false",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1300,
        "wires": [
            [
                "270b7038e90bdcd9"
            ]
        ],
        "info": "standard tuya_bridge standby mode off (connected). Don't use direct 'CONNECT' low level command."
    },
    {
        "id": "4e8a2601c63000c7",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "tuya_bridge findTimeout  2s",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "_findTimeout",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "2000",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1340,
        "wires": [
            [
                "270b7038e90bdcd9"
            ]
        ]
    },
    {
        "id": "6203df5c42efc4f5",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "tuya_bridge retryTimeout  5s",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "_findTimeout",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "5000",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1380,
        "wires": [
            [
                "270b7038e90bdcd9"
            ]
        ]
    },
    {
        "id": "35fa5039f6513aa4",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 425,
        "y": 1440,
        "wires": []
    },
    {
        "id": "eaa0294fa9bcaa60",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to triggers.tuya_bridge_IN",
        "mode": "link",
        "links": [
            "c9f43698db6a94fd"
        ],
        "x": 1305,
        "y": 540,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "5d7f8266bbfda88a",
        "type": "function",
        "z": "885794d873f674af",
        "name": "ACK  process",
        "func": "var delta;\nvar xdp = global.get('COUNTDP');\n// in 'On Start' sets flow._tsstart to 0 (init)\n// it is a counter message?  is ACK ?\nif (!(msg.payload.data && (msg.payload.data.dps[xdp] == 0)))\n        return [];\n\n// output:  finish/more loops\n\n// is test on ?\nvar old = flow.get(\"_tsstart\");\nif (old === 0) return [];  // not in ping test\n\n// close this ping    \nvar back = Date.now();\ndelta = back - old;\n// fallback in case of timeout: keep alive\nif ((delta > 5000) || (delta < 20)) {\n        flow.set(\"_tsstart\", 0);\n        return ([null, msg]);\n}\n\n// accept, updates stats\nvar stats = flow.get(\"_pingstat\");\n//flow.set(\"pingstat\",{\n//     test: 0,\n//     total:0,\n//     min: 100000000000,\n//     max:0\n// set data    \nstats.sum += delta;\nif (stats.min > delta)\n        stats.min = delta;\nif (stats.max < delta)\n        stats.max = delta;\nstats.test++;\nstats.total--;\nflow.set(\"_pingstat\", stats);\nflow.set(\"_tsstart\", 0);\n\nif (stats.total > 0) {       // more  tests  to do\n        return [null, msg];\n}\n\n// done, does statistics & response msg  \nvar st = {\n        \"deviceId\": global.get('TUYABRDG'),\n        \"data\": {\n                \"dps\": {\n                        \"_tstPing\": {\n                                \"count\": stats.test,\n                                \"avg\": Math.floor(stats.sum / stats.test),\n                                \"max\": stats.max,\n                                \"min\": stats.min\n                        }\n                }\n        }\n};\nmsg.payload = st;\n// sends results  \nreturn ([msg, null]);\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// init for ping test\nflow.set(\"_tsstart\", 0);\n\n\n",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 460,
        "wires": [
            [
                "6eb69fb682542266"
            ],
            [
                "1cda41d53408e70d"
            ]
        ],
        "outputLabels": [
            "log result",
            "reset0"
        ]
    },
    {
        "id": "1cda41d53408e70d",
        "type": "delay",
        "z": "885794d873f674af",
        "name": "test delay 2",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 730,
        "y": 540,
        "wires": [
            [
                "f69299014c0ce5b6"
            ]
        ],
        "info": "delay between ping tests"
    },
    {
        "id": "0a391693eddda083",
        "type": "function",
        "z": "885794d873f674af",
        "name": "tuya_bridge selector ",
        "func": "// Select on dp and send to tuya-smart-device or handle new pseudo-DP commands.\n\nconst TUYABRDG = global.get('TUYABRDG'); // the user device-name\nconst o = context.global.alldevices.getODev(TUYABRDG);  \n\n//base message to log\nvar newMsg = {\n  payload: {\n    deviceId: o.id,\n    data: {\n      dps: {}\n    }\n  }\n};\n\nfunction GetOld() {\n  // stuff to get old value from tuyastatus\n  var uname = context.global.alldevices.getDpsName(o, \"_tstPing\");     // the dp user name\n  var old = global.get(\"tuyastatus\")[TUYABRDG][uname];\n  if (!(old)) old = \"none\";\n  newMsg.payload.data.dps[\"_tstPing\"] = old;\n  return (newMsg);\n}\n\n\n// ------------- main\n// schema case\nif (msg.payload.schema) {\n  // send GET _tstPing(old) + standard switch SCHEMA\n  return [msg, null, GetOld()]; \n}\n\nswitch (msg.payload.dps) {\n  case \"_tstPing\":   // is tstping;\n    if (msg.payload.operation == 'GET') {\n      return [null, null, GetOld()];\n    } else { // SET = start\n      flow.set(\"_pingstat\", {\n        // Pings number: user defined in trigger.config node.\n        total: flow.get('NPING'),\n        test: 0,\n        sum: 0,\n        min: 1000000,\n        max: 0,\n      });\n      newMsg.payload.data.dps[\"_tstPing\"] = \"started\";\n      return [null, msg, newMsg];\n    }\n    break;\n  // here future expansions\n  default:\n    // standard switch processing\n    return [msg, null];\n}\n\n\n\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "// initialize rigth value\n",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 480,
        "wires": [
            [
                "29e378e3d71802ac"
            ],
            [
                "1cda41d53408e70d"
            ],
            [
                "6eb69fb682542266"
            ]
        ],
        "outputLabels": [
            "std",
            "tstping",
            ""
        ],
        "icon": "node-red/switch.svg",
        "info": "Set the node name only to the ping number required for the test"
    },
    {
        "id": "f69299014c0ce5b6",
        "type": "function",
        "z": "885794d873f674af",
        "name": "start time",
        "func": "\nflow.set(\"_tsstart\", Date.now());\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 540,
        "wires": [
            [
                "3ad2b3995e853905"
            ]
        ]
    },
    {
        "id": "183f12d075199364",
        "type": "comment",
        "z": "885794d873f674af",
        "name": "tstPing",
        "info": "\n_tstPing  DP implementation",
        "x": 910,
        "y": 460,
        "wires": []
    },
    {
        "id": "6eb69fb682542266",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 915,
        "y": 500,
        "wires": [],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "e7555082dde44cf8",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to ACK IN",
        "mode": "link",
        "links": [
            "fd8071339ca9c39b"
        ],
        "x": 1175,
        "y": 340,
        "wires": [],
        "icon": "font-awesome/fa-expand"
    },
    {
        "id": "efdc85c67319011f",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "*test  SET:  trgPing",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "_tstPing",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "any",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 1440,
        "wires": [
            [
                "35fa5039f6513aa4"
            ]
        ],
        "info": "Test custom function _tstping\n\nThis function does a test of the TRIGGER communication speed. A statistical valutation  of the total tuyaDAEMON -> tuya_bridge -> Tuya-cloud -> automation -> tuya_bridge -> tuyaDAEMON round trip time. \n\nThe timer start sending to tuya_bridge counter the SET(LOWGUARD) command, and stop at ACK (0) echo  from tuya_bridge device.\nThe test is done flow.NPING times (default 5, a good value) and result shows average, min. and max. values.\n\nImplementation\n    This test is implemented as a new custom tuya_bridge property (dp = 100), handled by the code in the core.trigger flow.\n    You MUST add this dp (and related friendly name, e.g. 'tstping') to tuya_bridge device in core.global.alldevices.\n    \nexpected result:\n   \n         [ \"TX SET: device 'tuya_bridge'/'…\", \"any\" ]            // command sended\n         [ \"RX: tuya_bridge/_tstPing\", \"started\" ]   // echo \n  \n  after 2s delay:\n         [ \"RX: 'tuya_bridge'/'trigger (re…\", 1050 ]             // echo tuyaDAEMON command\n  then     \n         [ \"RX: 'tuya_bridge'/'trigger (re…\", 0 ]                // echo ACK\n         \n  repeated NPING times, then:\n   \n         [ \"RX: 'tuya_bridge'/'tstping' \", object ]             // done: result\n         \n  if I open it (click the triangle) I get like:\n         array[2] \n           0: \"RX: 'tuya_bridge'/'tstping' \"\n           1: object\n             count: 5      \n             avg: 138    (times in ms)\n             max: 204\n             min: 112    \n  \n           \n             "
    },
    {
        "id": "c0f814668c92c1db",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "*test  GET last  trgPing",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "_tstPing",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 1480,
        "wires": [
            [
                "35fa5039f6513aa4"
            ]
        ],
        "info": "Standar GET for tstping.\n\n"
    },
    {
        "id": "1c567b64d7d10b09",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "*statup delay",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "7ec546f3690600ea"
            ]
        ],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "7ec546f3690600ea",
        "type": "function",
        "z": "885794d873f674af",
        "name": "trigger flow startup",
        "func": "// Run as soon as possible after all 'On Start' and 'Global Config'.\n// note: the run order of all 'Global config' and all 'On Start' is undefined.\n// So, if some 'On Start' function  requires 'Global Config' data, palace it there.\n// --------------------------------------------------- standard\nconst asDEVICE = global.get(\"TUYABRDG\");     // singleton in alldevices\nconst asMODULE = \"modules.core_trigger\";\nconst VERSION = \"2.2.2\";\n\nfunction init_tuyastatus(odev, conn0) {\n    var pmDevName = context.global.alldevices.getDevName(odev);\n    // ---------------- inizializes global tuyastatus\n    let tstatus = \"tuyastatus['\" + pmDevName + \"']\";\n    // init using only _connected (not in alldevices), so does cleanup\n    global.set(tstatus, { _connected: conn0 });\n    // init all GETable dps with default value\n    odev.dps.forEach(adp => {\n        if (['RW', 'WW', 'GW', 'RO', 'UNK', 'PUSH', undefined].includes(adp.capability)) {\n            // this access style required to handle spaces in usr-names\n            let dpname = \"['\" + (adp.name ? adp.name : adp.dp) + \"']\";\n            switch (adp.dp) {     // some special init:   \n                default:\n                    global.set(tstatus + dpname, \"none\");\n            }\n        }\n    });\n};\n\n// --------------------------------------------------- standard\nif (!global.get(\"coresetup\")) {\n    node.warn(\"TRIGGER STARTUP ERROR: adjust this startup delay.\");\n    return ([null]);\n}\n// --------------------- init startup for the flow.\nglobal.set(asMODULE, VERSION);  // update modules\n// access stuff\n// --- see also different implementation in 'core.core flow setup' node.\nconst oDev = context.global.alldevices.getODev(asDEVICE,\"real\");\nif (oDev === undefined) {\n    node.warn(\"[startup] ERROR: not found the device '\" + asDEVICE + \"' in global.alldevices.\");\n    return;\n}\ninit_tuyastatus(oDev, false);\n// --------------------------------------------- standard processing ends\n//\n// more flow init required now (and not in 'On Start') by some properties    \n// int all 'mirror' devices\ncontext.global.alldevices.fake.forEach(device => {\n    if ((!device.id.startsWith(\"_\")) && (device.id.length == 20)) {  // test mirror\n        init_tuyastatus(device, true);\n    };\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// nothing to do\n",
        "finalize": "\nglobal.set(\"modules.core_trigger\", undefined);\n",
        "libs": [],
        "x": 750,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "fb9885b662923288",
        "type": "comment",
        "z": "885794d873f674af",
        "name": "test Tuya_bridge switch (free)",
        "info": "\nTest some `tuya_bridge` device capabilities, NOT used by TRIGGER,\n so free for custom applications.\n\nRuquires core trigger 'Global TRIGGER config' node updated.\nFor the device \"switch-1CH\". (HW dependent)\n\nUsing a different device you maybe you must:\n - change some dp 'names' in commands\n - disable some tests if not handled by the actual device. \n\n",
        "x": 740,
        "y": 1200,
        "wires": []
    },
    {
        "id": "6ff2b983e731f893",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "*test  SET: relay ON ",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "switch",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "ON",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 1300,
        "wires": [
            [
                "b09f1a6d13a701de"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nstandard set relay ON"
    },
    {
        "id": "b09f1a6d13a701de",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1095,
        "y": 1260,
        "wires": []
    },
    {
        "id": "d288aaa235258150",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "test GET relay status",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "switch",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 1260,
        "wires": [
            [
                "b09f1a6d13a701de"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nstandard read relay status"
    },
    {
        "id": "10bb84a7f4b3d7f5",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "*test  SET: relay OFF",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "switch",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "OFF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 1340,
        "wires": [
            [
                "b09f1a6d13a701de"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nStandard set relay OFF"
    },
    {
        "id": "dc5f01a2489adbf8",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "SET default restart (memory)",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "on reset",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "memory",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 780,
        "y": 1600,
        "wires": [
            [
                "9cf6b17884bfaaac"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nStandard SET reset mode to 'memory'"
    },
    {
        "id": "ec9cd17426d60827",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "*test  GET: restart ",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "on reset",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 740,
        "y": 1560,
        "wires": [
            [
                "9cf6b17884bfaaac"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nStandard GET actual relay reset mode"
    },
    {
        "id": "9cf6b17884bfaaac",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.std_cmd",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1095,
        "y": 1520,
        "wires": []
    },
    {
        "id": "274579441435eb64",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "SET light mode default (none)",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "light mode",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "none",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 780,
        "y": 1740,
        "wires": [
            [
                "8683d16c4601dfe9"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nStandard SET light mode to 'none'"
    },
    {
        "id": "d513456e14ea6c85",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "*test  GET:  light mode",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "light mode",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 760,
        "y": 1700,
        "wires": [
            [
                "8683d16c4601dfe9"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nStandard GET actual light mode"
    },
    {
        "id": "8683d16c4601dfe9",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.std_cmd",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1095,
        "y": 1660,
        "wires": []
    },
    {
        "id": "a2920da59908b8b0",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "test SET default restart (ON)",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "on reset",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "ON",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 780,
        "y": 1520,
        "wires": [
            [
                "9cf6b17884bfaaac"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nStandard SET reset mode to ON"
    },
    {
        "id": "d1fd2dc83e50e71b",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "*test  SET: light mode (pos)",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "light mode",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "pos",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 1660,
        "wires": [
            [
                "8683d16c4601dfe9"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nStandard SET light mode "
    },
    {
        "id": "923085f79e8d49f8",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "*test  SET: backlight ON ",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "backlight",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "true",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 760,
        "y": 1840,
        "wires": [
            [
                "a250d073160f1f93"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nstandard set backlight ON"
    },
    {
        "id": "a250d073160f1f93",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.std_cmd",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1095,
        "y": 1800,
        "wires": []
    },
    {
        "id": "bd3f78daa861b8e4",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "test GET backlight",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "backlight",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 1800,
        "wires": [
            [
                "a250d073160f1f93"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nstandard read backlight status"
    },
    {
        "id": "85fb06f67ef837d9",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "*test  SET: backlight OFF",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "backlight",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "false",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 770,
        "y": 1880,
        "wires": [
            [
                "a250d073160f1f93"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nStandard set backlight OFF"
    },
    {
        "id": "ec6c8191bc357271",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "*test  GET circulate ",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "circulate ",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 1980,
        "wires": [
            [
                "8e3ff028175fc9c8"
            ]
        ],
        "info": "standard set relay ON"
    },
    {
        "id": "8e3ff028175fc9c8",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.std_cmd",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1095,
        "y": 1940,
        "wires": []
    },
    {
        "id": "6a382453c9b9a292",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "test SET circulate 5m/7m 13-20 alldays",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "circulate ",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "[{\"active\":true,\"days\":\"SMTWTFS\",\"start\":\"13:00\",\"end\":\"20:00\",\"on\":\"00:05\",\"off\":\"00:07\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 1940,
        "wires": [
            [
                "8e3ff028175fc9c8"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\n\nCirculate standard SET recirculate"
    },
    {
        "id": "e713c984f614029d",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "*SET: circulate default (none)",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "circulate",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "[]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 780,
        "y": 2020,
        "wires": [
            [
                "8e3ff028175fc9c8"
            ]
        ],
        "info": "Standard set relay OFF"
    },
    {
        "id": "8ab0ef63794bf8d2",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "*test  GET random",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "random",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 2120,
        "wires": [
            [
                "46205f1e12b0e731"
            ]
        ],
        "info": "standard set relay ON"
    },
    {
        "id": "46205f1e12b0e731",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.std_cmd",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1095,
        "y": 2080,
        "wires": []
    },
    {
        "id": "d45b04aa59755426",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "test SET random 08/10 alldays",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "random",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "{\"active\":true,\"days\":\"SMTWTFS\",\"start\":\"08:00\",\"end\":\"10:00\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 790,
        "y": 2080,
        "wires": [
            [
                "46205f1e12b0e731"
            ]
        ],
        "info": "standard read relay status"
    },
    {
        "id": "818be3636298dc56",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "*SET: random default (none)",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "random",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "[]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 780,
        "y": 2160,
        "wires": [
            [
                "46205f1e12b0e731"
            ]
        ],
        "info": "Standard set relay OFF"
    },
    {
        "id": "49b114cf18fe5fa4",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "test  GET inching",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "inching",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 740,
        "y": 1420,
        "wires": [
            [
                "2d4391ebe4ad6677"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nstandard GET inching,"
    },
    {
        "id": "2d4391ebe4ad6677",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1095,
        "y": 1380,
        "wires": []
    },
    {
        "id": "7ad12b2221e2c27c",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "test SET inching  20s",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "inching",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "{\"inching\":true,\"delay\":20}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 1380,
        "wires": [
            [
                "2d4391ebe4ad6677"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nstandard SET inching, i.e. auto shutoff time"
    },
    {
        "id": "a34783f8493b247f",
        "type": "inject",
        "z": "885794d873f674af",
        "d": true,
        "name": "*SET: inching default (none)",
        "props": [
            {
                "p": "payload.device",
                "v": "TUYABRDG",
                "vt": "global"
            },
            {
                "p": "payload.property",
                "v": "inching",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "[]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 780,
        "y": 1460,
        "wires": [
            [
                "2d4391ebe4ad6677"
            ]
        ],
        "info": "Only the counter is used by TRIGGERs, this feature is free and can be used in any project.\n\nReset inching to OFF"
    },
    {
        "id": "fadd6783c6fcc644",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "go",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 75,
        "y": 1660,
        "wires": [
            [
                "0d20ea23576c6907"
            ]
        ],
        "l": false
    },
    {
        "id": "f91f7b1b0a3e911f",
        "type": "link out",
        "z": "885794d873f674af",
        "name": "",
        "mode": "link",
        "links": [
            "c9f43698db6a94fd"
        ],
        "x": 425,
        "y": 1660,
        "wires": []
    },
    {
        "id": "40e0e78ae15d472a",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "start TEST PING 24H",
        "props": [
            {
                "p": "payload.device",
                "v": "tuya_bridge",
                "vt": "str"
            },
            {
                "p": "payload.property",
                "v": "_testPing24H",
                "vt": "str"
            },
            {
                "p": "payload.value",
                "v": "{\"count\":72,\"timeout\":1200000}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 1520,
        "wires": [
            [
                "35fa5039f6513aa4"
            ]
        ],
        "info": "\nhttps://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#user-interface\n\nnote:\nThis is an example of command repetiton, build in \nGlobal.AllDevice structure, using 'share' capabilities.\n\nParm: \n\"timeout\":   test interval, [ms]  (e.g. 1200000 => 20 min)\n\"count\":     test number, e.g. 24 * 60 / timeout [min] = 72\n\nsee  https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#user-interface\n"
    },
    {
        "id": "b36aae0731ddb4b8",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "abort TEST PING 24H",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"device\":\"_system\",\"property\":\"_timerOFF\",\"value\":\"_testPing24H\"}",
        "payloadType": "json",
        "x": 160,
        "y": 1560,
        "wires": [
            [
                "35fa5039f6513aa4"
            ]
        ],
        "info": "_timerOFF\n   Abort timer 'test1', no _beep.\n   note: do it after 'timerON test1: delayed beep (20s)'\n   \n   see https://github.com/msillano/tuyaDAEMON/wiki/custom-device-_system#timer-functions\n   "
    },
    {
        "id": "c9d78cea377c816f",
        "type": "subflow:66ca1554.e4c85c",
        "z": "885794d873f674af",
        "name": "make ACK",
        "env": [
            {
                "name": "TRGnumber",
                "value": "0",
                "type": "str"
            }
        ],
        "x": 430,
        "y": 380,
        "wires": [
            [
                "29e378e3d71802ac"
            ]
        ]
    },
    {
        "id": "0d20ea23576c6907",
        "type": "subflow:66ca1554.e4c85c",
        "z": "885794d873f674af",
        "name": "REDTRG20020",
        "env": [
            {
                "name": "TRGnumber",
                "value": "20020",
                "type": "str"
            }
        ],
        "x": 260,
        "y": 1660,
        "wires": [
            [
                "f91f7b1b0a3e911f"
            ]
        ]
    },
    {
        "id": "3ad2b3995e853905",
        "type": "subflow:66ca1554.e4c85c",
        "z": "885794d873f674af",
        "name": "ping LOWGUARD",
        "env": [
            {
                "name": "TRGnumber",
                "value": "global.LOWGUARD",
                "type": "str"
            }
        ],
        "x": 1150,
        "y": 540,
        "wires": [
            [
                "eaa0294fa9bcaa60"
            ]
        ]
    },
    {
        "id": "5f250a9d6c53462e",
        "type": "inject",
        "z": "885794d873f674af",
        "name": "fallback:   SET counter 7010",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.dps",
                "v": "COUNTDP",
                "vt": "global"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"operation\":\"SET\",\"set\":7010}",
        "payloadType": "json",
        "x": 1250,
        "y": 920,
        "wires": [
            [
                "055f2c0389c9d8c2"
            ]
        ],
        "info": "test fallback \n\n _The values used in the counter as TRIGGER are multiple of 70 (flow.COUNTSTEP)._\n _See 'Tuya-bridge MAP (example)' node._\n \n _ If the conter is SET (by any way) to a value NOT  multiple of 70  (e.g. 7010) sends an ACK (reset 0) to the counter, to avoid interference with the previous TRIGGER, or worse, the relay toggle if the counter reaches 0._\n \n\nexpected result:\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \", 7010]  // echo \n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \",0]     // echo auto-ACK\n\nTroubleshooting (more than one tuyaDAEMON instance):\n1)  If after:\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \", 7010]\n  is missed:\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \",0]\n  Check trigger.global.is_master: one instance must be 'true'.\n  \n2) After:\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \", 7010]\n  if you have two tuyaDAEMON instances, you can send two ACK:\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \",0]\n      [\"RX: 'tuya_bridge'/'trigger (reserved)' \",0]\n  Check trigger.global.is_master: only one instance must be 'true' (usually the one 24/7)\n"
    },
    {
        "id": "7a1504f3dc05ec5f",
        "type": "mqtt out",
        "z": "18bb68e662c98334",
        "name": "client MQTT out: events",
        "topic": "",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b1477888b2bc18dd",
        "x": 550,
        "y": 280,
        "wires": []
    },
    {
        "id": "1a032e91f91d8723",
        "type": "mqtt in",
        "z": "18bb68e662c98334",
        "name": "client MQTT in: commands",
        "topic": "tuyaDAEMON/ANDROID/+/commands/#",
        "qos": "1",
        "datatype": "auto",
        "broker": "b1477888b2bc18dd",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 550,
        "y": 340,
        "wires": [
            [
                "9244c8fdf9021804"
            ]
        ]
    },
    {
        "id": "a52c303745cdf1d1",
        "type": "aedes broker",
        "z": "18bb68e662c98334",
        "name": "tuyaDEAMON broker",
        "mqtt_port": 1883,
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "8088",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 540,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9244c8fdf9021804",
        "type": "function",
        "z": "18bb68e662c98334",
        "name": "format std command",
        "func": "function yesSpecial(str) {\n    if (!str) return str;\n    let tmp = str.replace('%23', '#').replace('%2B', '+').trim();\n    return ((tmp === undefined) || (tmp === '')) ? undefined : tmp.replace('%25', '%');     // the only spaces (' ') becomes undefined\n}\n\nlet inptop = msg.topic + '//////';\nlet pars = inptop.split(\"/\");\n// 11/05/2023: updated using ir, id, ip\nlet xtopic = flow.get(\"topic-commands\");\nlet xparts = xtopic.split(\"/\");\nlet ir, id, ip = -1;\nfor (let idx = 0; idx < xparts.length; idx++) {\n    if (xparts[idx] === '+remote+') ir = idx;\n    if (xparts[idx] === '+device+') id = idx;\n    if (xparts[idx] === '+property+') ip = idx;\n}\nlet newmsg = { payload: {} };\n// node.warn([\"pre in MQTT\", pars, xparts]);\n// if (pars[0] == xparts[0]) {\nnewmsg.payload['remote'] = ir >= 0 ? pars[ir] : null;\nnewmsg.payload['device'] = yesSpecial(id >= 0 ? pars[id] : null);\nnewmsg.payload['property'] = yesSpecial(ip >= 0 ? pars[ip] : null);\nnewmsg.payload['value'] = (msg.payload) ? JSON.parse(msg.payload) : msg.payload;\n// node.warn([\"post in MQTT\", ir, id, ip, newmsg]);\n// null cases\nif (!newmsg.payload.value) delete (newmsg.payload.value);\nif (!newmsg.payload.property) delete (newmsg.payload.property);\nif (!newmsg.payload.device) delete (newmsg.payload.device);\nreturn newmsg;\n//}\n// return null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 340,
        "wires": [
            [
                "f294d70eec07e15c",
                "b653443523c44ad8"
            ]
        ]
    },
    {
        "id": "b07f4a1bd427c7fc",
        "type": "link in",
        "z": "18bb68e662c98334",
        "name": "from core.events info",
        "links": [
            "19bd7e8a4f4718d0"
        ],
        "x": 115,
        "y": 280,
        "wires": [
            [
                "d3d367f3fa3ff8a7",
                "9ee95a3bd3b893a3"
            ]
        ]
    },
    {
        "id": "d3d367f3fa3ff8a7",
        "type": "function",
        "z": "18bb68e662c98334",
        "name": "format event",
        "func": "//\nfunction noSpecial(str) {\n    if (str === undefined) return (\"\");\n    let tmp = str.replace('%', '%25').replace('#', '%23');\n    return tmp.replace('+', '%2B');\n}\n\nlet remote = global.get(\"instance_name\");\nif (msg.remote_from && (msg.remote_from !== \"NULL\"))\n    remote = msg.remote_from;\nlet xtopic = flow.get(\"topic-events\").replace(\"+remote+\", remote);\n\n// Special case list devices \nif ((msg.from === \"_system\") && (msg.infodp === \"list\") && (msg.info.value.length > 0)) {\n    msg.info.value.forEach((device, index) => {\n        const lmsg = {\n            topic: xtopic.replace(\"+device+\", noSpecial(device)).replace(\"/+property+\", \"\"),\n            //            topic: 'tuyaDAEMON/' + remote + '/' + noSpecial(device) + '/event',\n            payload: null\n        };\n        node.send(lmsg);\n    });\n    return null;\n}\n\n// Special case list devices   ( from _system/_tuyastatus)\nif ((msg.from === \"_system\") && (msg.infodp === \"_tuyastatus\") && (msg.info.value.list !== undefined)) {\n    msg.info.value.list.forEach((device, index) => {\n        const lmsg = {\n            topic: xtopic.replace(\"+device+\", noSpecial(device)).replace(\"/+property+\", \"\"),\n            //        topic: 'tuyaDAEMON/' + remote + '/' + noSpecial(device) + '/events',\n            payload: null\n        };\n        node.send(lmsg);\n    });\n    return null;\n}\n\n// Special case schema devices   ( from _system/_tuyastatus)\nif ((msg.from === \"_system\") && (msg.infodp === \"_tuyastatus\") && (msg.info.value.value.schema !== undefined)) {\n    //         msg.info.value.value.schema.forEach((dps, val) => {\n    for (const [dps, val] of Object.entries(msg.info.value.value.schema)) {\n        const lmsg = {\n            //           topic: 'tuyaDAEMON/' + remote + '/' + noSpecial(msg.info.value.device) + '/events/' + noSpecial(dps),\n            topic: xtopic.replace(\"+device+\", noSpecial(msg.info.value.device)).replace(\"+property+\", noSpecial(dps)),\n            payload: (val === null || val === \"\") ? '\"null\"' : JSON.stringify(val)\n        };\n        if (dps !== '_t')\n            node.send(lmsg);\n    }\n    return null;\n}\n// general case\n// let xtopic = 'tuyaDAEMON/' + remote + '/' + noSpecial(msg.info.device) + '/events/' + noSpecial(msg.info.property);\nconst newmsg = {\n    topic: xtopic.replace(\"+device+\", noSpecial(msg.info.device)).replace(\"+property+\", noSpecial(msg.info.property)),\n    payload: (msg.info.value === \"\" || msg.info.value === \"\") ? '\"null\"' : JSON.stringify(msg.info.value)\n}\nif (msg.info.property === '_t')\n    return null;\nreturn newmsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 280,
        "wires": [
            [
                "7a1504f3dc05ec5f",
                "38156fd28acc0327"
            ]
        ]
    },
    {
        "id": "38156fd28acc0327",
        "type": "debug",
        "z": "18bb68e662c98334",
        "d": true,
        "name": "MQTT TX EVENTS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 500,
        "wires": []
    },
    {
        "id": "f294d70eec07e15c",
        "type": "link out",
        "z": "18bb68e662c98334",
        "name": "to core.std_cmds",
        "mode": "link",
        "links": [
            "3c5b3f3fdf018e85"
        ],
        "x": 1055,
        "y": 340,
        "wires": []
    },
    {
        "id": "b653443523c44ad8",
        "type": "debug",
        "z": "18bb68e662c98334",
        "d": true,
        "name": "MQTT COMMANDS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 460,
        "wires": []
    },
    {
        "id": "9ee95a3bd3b893a3",
        "type": "debug",
        "z": "18bb68e662c98334",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 420,
        "wires": []
    },
    {
        "id": "9735a33de7fb7854",
        "type": "comment",
        "z": "18bb68e662c98334",
        "name": "CORE MQTT extension  2.2.2",
        "info": "a) Initial configuration: see `*Global MQTT config` node.\n \n\n### Troubleshooting ###\n\n1. **Important: After 'Import' + 'Deploy' CHECK all external links nodes**. <br>\n   As help, the name of all Links shows the origin or the destination (e.g.: `from core.'to fake devices'`, `to core.'logging'`)\n\n\n2. _MQTT STARTUP ERROR: adjust the startup delay_\n  You need to increment the delay in 'startup delay' node. See [starup process](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#the-tuyadaemon-three-step-startup-process).\n  \n------------------------------------\n2.2.2\n- updated installation istructions\n- better topic process for commands\n\n",
        "x": 200,
        "y": 60,
        "wires": []
    },
    {
        "id": "5f673576ba121c84",
        "type": "config",
        "z": "18bb68e662c98334",
        "name": "Global MQTT config",
        "properties": [
            {
                "p": "topic-events",
                "pt": "flow",
                "to": "tuyaDAEMON/+remote+/+device+/events/+property+",
                "tot": "str"
            },
            {
                "p": "topic-commands",
                "pt": "flow",
                "to": "tuyaDAEMON/+remote+/+device+/commands/+property+",
                "tot": "str"
            }
        ],
        "active": true,
        "x": 220,
        "y": 120,
        "wires": [],
        "info": "## MQTT Configuration\n\nUser defined:<br>\n\n_flow.topic-event_ <br>\n        `tuyaDAEMON/+remote+/+device+/events/+property+` (default)\n        \n_flow.topic-command_ <br>\n        `tuyaDAEMON/+remote+/+device+/commands/+property+`  (default)     \n\nTopic default architecture:\n\n    'tuyaDAEMON/<instance_name>/<device>/commands/<property>'  JSON value\n    'tuyaDAEMON/<instance_name>/<device>/events/<property>'\n       \nand values are always JSON.\n\nnote:  `'+remote+', '+device+', '+property+'` are mandatory placeholders, replaced at runtime.     \n\n--------------------------\nUsing the default topic definition you get this structure on _MQTTexplorer_:\n\n````\n192.168.XX.XX\\                               (server IP)\n    $SYS\n    tuyaDAEMON\\\n        ANDROID\\                             (remote name)\n            core\\                            (user device name or deviceID)\n                commands\\\n                    ...\n                events\\ \n                    _heartbeat = \"13:29:10\"  (user dP name or dP, last value)\n                    ...\n            HAL@home\\                        (user device name or deviceID)\n                ...        \n````\n\n-------------------------------\n### MQTT broker setup\n\n- You can use the `aedes broker node` defaults.<br>\n- Update the 'MQTT server configuration' in client nodes.<br>\n- This module does not require `global.alldevices` updates.\n\n### details\n\n- This flow includes a 'MQTT broker' (server) node. Clients nodes and external client (like MQTTexplorer) can connect to this server.\n\n- If you like to use an external broker (e.g. _Mosqitto_) disable/delete the 'MQTT broker' node and use node-red 'MQTT server configuration' in client nodes to link the external broker.\n\n- In case of many instances you can:\n   \n  - any instance uses own broker.\n  - all instances uses an external MQTT broker (e.g. _Mosquitto_).\n  - only one instace (master: better if 24/7 on) works as broker for all others (slaves):\n     - in slaves disable/delete the 'MQTT broker' node.\n     - in slaves set the 'MQTT server configuration' in client nodes to link the master.\n     - the external clients (like MQTTexplorer) must connect the master.\n  \n## Test \n\nUse a MQTT Client (e.g. MQTTExplorer) to connect to http://localhost:1883 (default).\n\n - See 'CORE test using MQTT (readme)' node."
    },
    {
        "id": "ace2a94e4df01f59",
        "type": "comment",
        "z": "18bb68e662c98334",
        "name": "test only",
        "info": "usually disabled",
        "x": 660,
        "y": 420,
        "wires": []
    },
    {
        "id": "4dfb0bd15135eb35",
        "type": "comment",
        "z": "18bb68e662c98334",
        "name": "SET: MQTT topic: tuyaDAEMON/DEVPC/core/commands/_info        value=\"ok\"",
        "info": "Copy-paste the topic, set JSON value. Then PUBLISH\n\nExpected response (same as SET std cmds):\n\n          [\"TX: SET fake core/version\",\"ok\"]\n\nThen (as usual):\n\n          [\"RX: core/version\", object]\n\nOpen: \n\n          array[2]\n               0: \"RX: core/version\"\n               1: object\n                   devices: object\n                      real: array[0]\n                      virtual: array[0]\n                      fake: array[1]\n                          0: \"core\"\n                   core_mqtt: \"2.2.0\"\n                   core: \"2.2.0\"\n\n In MQTTExplorer:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                    version = {\"devices\":{\"real\":[],\"virtual\":[],\"fake\":[\"core\"]},\"core_mqtt\":\"2.2.0\",\"core\":\"2.2.0\"}\n",
        "x": 340,
        "y": 640,
        "wires": []
    },
    {
        "id": "cb48ce1c0005fb86",
        "type": "comment",
        "z": "18bb68e662c98334",
        "name": "CORE test using MQTT (readme)",
        "info": "\nAll tuyaDEAMON commads and events can be handled via MQTT\n\nExamples:\n- test CORE properties using 'MQTTExplorer' (http://mqtt-explorer.com/) as UI client connected to TuyaDAEMON MQTT Broker (usually 'localhost:1883').\n\nTopic: \n\ngeneral default [structure](https://github.com/msillano/tuyaDAEMON#mqtt-interface): \n\n    tuyaDAEMON/<remote_name>/<device_name>|' '/event|command[/<property_name>]\n\nValue (payload):\n\n   always JSON:\n       a string        = \"string\"\n       boolean true    = true\n       null, undefined = < nothing, clean pad >\n     \nhit:\n   If 'PUBLISH' is without effect, check for extra spaces before or after the topic string (common mistake using copy-paste).\n   \nMore examples can be found in ['github.tuyaDEAMON.tuyaTRIGGER.readme'](https://github.com/msillano/tuyaDAEMON/blob/main/tuyaTRIGGER/README.md#mqtt-tuya_bridge-tests)-",
        "x": 190,
        "y": 580,
        "wires": []
    },
    {
        "id": "18946462e2d0c288",
        "type": "comment",
        "z": "18bb68e662c98334",
        "name": "GET: MQTT topic: tuyaDAEMON/DEVPC/core/commands/_info        value: nothing",
        "info": "Copy-paste the topic, clear JSON pad. then PUBLISH\n\nExpected response (same as GET std cmds):\n          \"TX: GET fake core/version\"\n\nthen (after Deploy or Restart):\n\n\n          [\"RX: core/version\",\"none\"]\n          \nor (after a SET):\n\n          [\"RX: core/version\", object]\n          \nIn MQTTExplorer:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                    version = \"none\"\nor:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                    version = {\"devices\":{\"real\":[],\"virtual\":[],\"fake\":[\"core\"]},\"core_mqtt\":\"2.2.0\",\"core\":\"2.2.0\"}\n          ",
        "x": 350,
        "y": 680,
        "wires": []
    },
    {
        "id": "1ef08492b2f0a0ff",
        "type": "comment",
        "z": "18bb68e662c98334",
        "name": "GET: MQTT topic: tuyaDAEMON/DEVPC/core/commands/_DBase        value: nothing",
        "info": "Copy-paste the topic, set JSON value. then PUBLISH\n\nExpected response (same as GET std cmds):\n           \"TX: GET fake core/_DBase\"\n\nthen (as usual):\n           [\"RX: core/_DBase\",true]\n           \nIn MQTTExplorer:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                    _DBase = true\n           ",
        "x": 360,
        "y": 740,
        "wires": []
    },
    {
        "id": "ce6063f123cd047c",
        "type": "comment",
        "z": "18bb68e662c98334",
        "name": "GET: MQTT topic: tuyaDAEMON/DEVPC/core/commands/_heartbeat        value: nothing",
        "info": "Copy-paste the topic, clear JSON pad. Then PUBLISH\n\nExpected response (same as GET std cmds):\n          TX: GET fake core/_heartbeat\n\nthen (as usual):\n          [\"RX: core/_heartbeat\",\"09:37:10\"]\n          \nIn MQTTExplorer:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                     _heartbeat = \"09:37:10\" ",
        "x": 370,
        "y": 800,
        "wires": []
    },
    {
        "id": "dafa59fa7529b7ee",
        "type": "comment",
        "z": "18bb68e662c98334",
        "name": "SCHEMA: MQTT topic: tuyaDAEMON/DEVPC/core/commands      value: nothing",
        "info": "Copy-paste the topic, clear JSON pad. Then PUBLISH\n\nExpected response (same as SCHEMA std cmds):\n\n         TX: GET SCHEMA: fake core\n\nThen (as usual):\n\n         [\"RX: core/_DBase\",true]\n         [\"RX: core/_heartbeat\",\"09:49:08\"]\n         [\"RX: core/version\",\"none\"]\n\nIn MQTTExplorer:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                    _DBase = true\n                    _heartbeat = \"09:49:38\"\n                    version = \"none\"",
        "x": 350,
        "y": 860,
        "wires": []
    },
    {
        "id": "5869f9719f480c72",
        "type": "inject",
        "z": "18bb68e662c98334",
        "name": "statup delay",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 120,
        "wires": [
            [
                "41b04161cb15aa63"
            ]
        ],
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "41b04161cb15aa63",
        "type": "function",
        "z": "18bb68e662c98334",
        "name": "mqtt flow startup",
        "func": "// So, if some 'On Start' function  requires 'Global Config' data, palace it there.\n// --------------- locals\nconst asMODULE = \"modules.core_mqtt\";\nconst VERSION = \"2.2.2\";\n// --------------------------------------------------- standard\nif (!global.get(\"coresetup\")) {\n    node.warn(\"MQTT STARTUP ERROR: adjust the startup delay.\");\n    return ([null]);\n}\n// --------------------- init startup for the flow.\nglobal.set(asMODULE, VERSION);  // update\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// nothing to do\n",
        "finalize": "global.set(\"modules.core_mqtt\", undefined);\n",
        "libs": [],
        "x": 840,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8627ec3d9f71e680",
        "type": "comment",
        "z": "18bb68e662c98334",
        "name": "LIST: MQTT topic: tuyaDAEMON/DEVPC/ /commands      value: nothing",
        "info": "Copy-paste the topic, clear JSON pad. Then PUBLISH\n\nExpected response:\n\n    \"ANDROID: TX: GET device LIST\"      \n\nThen (as usual):\n\n11/5/2023, 15:41:42node: tuyaDAEMON.core.info\nmsg.payload : array[2]\narray[2]\n  0: \"ANDROID: RX: HAL@home/list\"\n  1: array[2]\n     0: \"HAL@home\"\n     1: \"core\"\n\n\nIn MQTTExplorer: not stored, updates the device list.\n\n  ",
        "x": 320,
        "y": 920,
        "wires": []
    },
    {
        "id": "a8f10e8b1e93c5fa",
        "type": "comment",
        "z": "33917e45a4084979",
        "name": "TRIGGER and MIRROR DEVICES  (readme) v. 2.2.2",
        "info": "This flow implements all TRIGGER and 'mirror' devices used by tuyaDAEMON.\n\nThis is just a collection of examples, which each user must customize according to their needs.\n\nHaving all triggers in one flow helps you see the whole picture and avoids some trivial mistakes, like using the same trigger multiple times.\n\nCustomization is very simple, taking advantage of some ad hoc subflows. Only in one case ('pick and execute' functions) is it necessary to write code in JScript.  \n\nnote: _depending on the device used, the `smartLife` user interface can vary._\nTo set the TRIGGER value required:\n - if allowed, just type the value\n - or use the slider with a pen to go near the target value (+/- 50) <br>\n      then use 'up'/'down' to get the exact value.\n - In some cases, faster to transform the value in HH:mm:ss",
        "x": 270,
        "y": 80,
        "wires": []
    },
    {
        "id": "ed2ec57f05ea9507",
        "type": "link out",
        "z": "33917e45a4084979",
        "name": "to TRIGGER.tuya_bridge_IN",
        "mode": "link",
        "links": [
            "c9f43698db6a94fd"
        ],
        "x": 705,
        "y": 460,
        "wires": []
    },
    {
        "id": "fbc3a9c93d49a2f4",
        "type": "inject",
        "z": "33917e45a4084979",
        "name": "test  REDTRG20020",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 460,
        "wires": [
            [
                "7208d7121d462f77"
            ]
        ]
    },
    {
        "id": "9bff7a92.229d98",
        "type": "switch",
        "z": "33917e45a4084979",
        "name": "smoke detector",
        "property": "payload.tuyatrigger",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "30030",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "30100",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "30170",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "30240",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "30310",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "30380",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 500,
        "y": 760,
        "wires": [
            [],
            [
                "dfbd21ba.05302"
            ],
            [
                "41bd356c.fc27fc"
            ],
            [
                "f0d9e484.2247c8"
            ],
            [
                "50659a72.879d14"
            ],
            [
                "9c0ddbf6.c9b378"
            ],
            [
                "cb9729f6.064aa8"
            ]
        ],
        "info": "for my device\ndp = 102    // countdown"
    },
    {
        "id": "dfbd21ba.05302",
        "type": "subflow:81d3b584.14c888",
        "z": "33917e45a4084979",
        "name": "to log 30030: alarm ON",
        "env": [
            {
                "name": "deviceID",
                "value": "smoke_detector",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "30030",
                "type": "str"
            },
            {
                "name": "value",
                "value": "ON",
                "type": "str"
            },
            {
                "name": "fakeDP",
                "value": "1800",
                "type": "num"
            }
        ],
        "x": 850,
        "y": 640,
        "wires": [
            [
                "058d38826a56a6cc"
            ]
        ]
    },
    {
        "id": "41bd356c.fc27fc",
        "type": "subflow:81d3b584.14c888",
        "z": "33917e45a4084979",
        "name": "to log 30030: alarm OFF",
        "env": [
            {
                "name": "deviceID",
                "value": "smoke_detector",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "30030",
                "type": "str"
            },
            {
                "name": "value",
                "value": "OFF",
                "type": "str"
            },
            {
                "name": "fakeDP",
                "value": "1800",
                "type": "num"
            }
        ],
        "x": 850,
        "y": 680,
        "wires": [
            [
                "058d38826a56a6cc"
            ]
        ]
    },
    {
        "id": "f0d9e484.2247c8",
        "type": "subflow:81d3b584.14c888",
        "z": "33917e45a4084979",
        "name": "to log 30170: battery LOW",
        "env": [
            {
                "name": "deviceID",
                "value": "smoke_detector",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "30170",
                "type": "str"
            },
            {
                "name": "value",
                "value": "LOW",
                "type": "str"
            },
            {
                "name": "fakeDP",
                "value": "1820",
                "type": "num"
            }
        ],
        "x": 850,
        "y": 720,
        "wires": [
            [
                "058d38826a56a6cc"
            ]
        ]
    },
    {
        "id": "50659a72.879d14",
        "type": "subflow:81d3b584.14c888",
        "z": "33917e45a4084979",
        "name": "to log 30170: battery OK",
        "env": [
            {
                "name": "deviceID",
                "value": "smoke_detector",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "30170",
                "type": "str"
            },
            {
                "name": "value",
                "value": "OK",
                "type": "str"
            },
            {
                "name": "fakeDP",
                "value": "1820",
                "type": "num"
            }
        ],
        "x": 850,
        "y": 760,
        "wires": [
            [
                "058d38826a56a6cc"
            ]
        ]
    },
    {
        "id": "9c0ddbf6.c9b378",
        "type": "subflow:81d3b584.14c888",
        "z": "33917e45a4084979",
        "name": "to log 30310: silence ON",
        "env": [
            {
                "name": "deviceID",
                "value": "smoke_detector",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "30310",
                "type": "str"
            },
            {
                "name": "value",
                "value": "ON",
                "type": "str"
            },
            {
                "name": "fakeDP",
                "value": "1840",
                "type": "num"
            }
        ],
        "x": 850,
        "y": 800,
        "wires": [
            [
                "058d38826a56a6cc"
            ]
        ]
    },
    {
        "id": "cb9729f6.064aa8",
        "type": "subflow:81d3b584.14c888",
        "z": "33917e45a4084979",
        "name": "to log 30310: silence OFF",
        "env": [
            {
                "name": "deviceID",
                "value": "smoke_detector",
                "type": "str"
            },
            {
                "name": "propertyDP",
                "value": "30310",
                "type": "str"
            },
            {
                "name": "value",
                "value": "OFF",
                "type": "str"
            },
            {
                "name": "fakeDP",
                "value": "1840",
                "type": "num"
            }
        ],
        "x": 850,
        "y": 840,
        "wires": [
            [
                "058d38826a56a6cc"
            ]
        ]
    },
    {
        "id": "3b1a0cbbfb083c57",
        "type": "link in",
        "z": "33917e45a4084979",
        "name": "from TRIGGER.mirror events",
        "links": [
            "9c722072d8652d08"
        ],
        "x": 155,
        "y": 760,
        "wires": [
            [
                "9bff7a92.229d98"
            ]
        ]
    },
    {
        "id": "058d38826a56a6cc",
        "type": "link out",
        "z": "33917e45a4084979",
        "name": "to CORE.logging",
        "mode": "link",
        "links": [
            "6c6aa7eeeadfcbcc"
        ],
        "x": 1135,
        "y": 760,
        "wires": []
    },
    {
        "id": "71493ceb.b6f104",
        "type": "function",
        "z": "33917e45a4084979",
        "name": "smoke detector: pick and execute",
        "func": "// Implementation of GET/SET/SCHEMA/MULTIPLE  commands\n// for any 'fake' device\n//    1) the msg.to IS the device ID\n//    2) the msg.infodp IS the dp ID\n//    3) the msg.payload.device IS the device name (if it exists, or ID) used by tuyastatus\n//    4) the msg.payload.property IS the dp name (if it exists, or dP) used by tuyastatus\n// smoke detector accepts only SET, absorb all msg.\n// --------------- locals\n// mapping msg to outputs\nconst DEVID = \"here_smoke_id\";\n\n// test: DEVID GET command?\nfunction _isGetCommand(msx) {\n    return ((msx.to === DEVID) && (msx.infodp !== undefined) && (msx.payload.value === undefined));\n}\n\n// test: DEVID SET command?\nfunction _isSetCommand(msx) {\n    return ((msx.to === DEVID) && (msx.infodp !== undefined) && (msx.payload.value !== undefined));\n}\n\n\n// ------------- main\n// select and execute all commands for 'smoke detector'\n// accepts only SET. final: absorb all bad msg + error.\n\nif (_isSetCommand(msg)) { // test: is SET for DEVID?\n    switch (msg.infodp) {\n        case \"30310\":   // same as in global.alldevices, unique\n            // -----------  select by value - tolerant, 'false' accepts 'OFF','NO', 0, \"0\", \"\", [],[0],[[]], null, undefined :  see https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\n            if (context.global.dataencode.BOOLEANONOFF(msg.payload.value))\n                return ([msg]); // true: output#1\n            return ([null, msg]); //false: output#2\n    }\n}\n\n// default: warning, bad command\nif (msg.to === DEVID) {\n    node.warn([\"Unknown command for the smoke detector.\", msg]);\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1040,
        "wires": [
            [
                "6c452e2f.f77e"
            ],
            [
                "51abfb8.0f92a04"
            ]
        ]
    },
    {
        "id": "369ab28b.348ebe",
        "type": "link in",
        "z": "33917e45a4084979",
        "name": "from CORE.to fake devices",
        "links": [
            "22239fa409a62d51"
        ],
        "x": 155,
        "y": 1040,
        "wires": [
            [
                "71493ceb.b6f104"
            ]
        ]
    },
    {
        "id": "6c452e2f.f77e",
        "type": "subflow:66ca1554.e4c85c",
        "z": "33917e45a4084979",
        "name": "50050   SET silence ON",
        "env": [
            {
                "name": "TRGnumber",
                "value": "50050",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 1020,
        "wires": [
            [
                "83ab4822.a4d028"
            ]
        ]
    },
    {
        "id": "83ab4822.a4d028",
        "type": "link out",
        "z": "33917e45a4084979",
        "name": "to trigger.tuya_bridge_IN",
        "mode": "link",
        "links": [
            "c9f43698db6a94fd"
        ],
        "x": 975,
        "y": 1040,
        "wires": []
    },
    {
        "id": "51abfb8.0f92a04",
        "type": "subflow:66ca1554.e4c85c",
        "z": "33917e45a4084979",
        "name": "50120  SET silence OFF",
        "env": [
            {
                "name": "TRGnumber",
                "value": "50120",
                "type": "str"
            }
        ],
        "x": 690,
        "y": 1060,
        "wires": [
            [
                "83ab4822.a4d028"
            ]
        ]
    },
    {
        "id": "7208d7121d462f77",
        "type": "subflow:66ca1554.e4c85c",
        "z": "33917e45a4084979",
        "name": "REDTRG20020",
        "env": [
            {
                "name": "TRGnumber",
                "value": "20020",
                "type": "str"
            }
        ],
        "x": 500,
        "y": 460,
        "wires": [
            [
                "ed2ec57f05ea9507"
            ]
        ]
    },
    {
        "id": "4c73e228e929950d",
        "type": "comment",
        "z": "33917e45a4084979",
        "name": "TUYATRG  (MAP:  10010..20019)",
        "info": "Here TRIGGERs from `Tuya` to `node-red` to fire user action on tuyaDAEMON.\n**[automation (user|event)] => TUYATRG => [any TuyaDAEMO action]**\n\n\nThe source is Tuya: a `scene` (user action) or an `automation` (event) sets the countdown to the required value.\n\n### EXAMPLE\n\n -  To test, a scene (tap-to-run) is required on Tuya:\n````\n     if tap-to-run \n             tuya_bridge countdown: 10010\n````\n - Add some nodes to 'TUYATRG10010' link. Enough a DEBUG node. \n \n - Activating the scene in `smartLife`, a message is shown in `debugPad`.\n",
        "x": 230,
        "y": 200,
        "wires": []
    },
    {
        "id": "15ebc3654e903de3",
        "type": "comment",
        "z": "33917e45a4084979",
        "name": "REDTRG  (MAP:   20020..29959)",
        "info": "Here TRIGGERs from `node-red` to `Tuya` to fire user action on Tuya.\n**[node-red message] => REDTRG => [any Tuya action (scene)]**\n\nThe source is `node-red`: for a test use the 'test REDTRG20020' input node.\n\nAdd one automation to Tuya to do the required action.\n\n### EXAMPLE\n\n -  To test, a simple automation on Tuya:\n````\n     if tuya_bridge countdown = 20020\n             tuya_bridge countdown <= 0    // ACK mandatory\n        and  message                       // user action\n````\n \n  - Activating the input in `tuyaDAEMON`, a message is shown on the phone.",
        "x": 230,
        "y": 380,
        "wires": []
    },
    {
        "id": "82d8cbee6fe5b521",
        "type": "comment",
        "z": "33917e45a4084979",
        "name": "MIRROR device 'smoke detector' events (MAP: 30030..50049)",
        "info": "The incoming TUYATRG is converted to `device/property/value` and sent to tuyaDAEMON ('to logging' link) for standard processing.<br>\n**[automation(property/value)] => TUYATRG => [tuyaDAEMON message] => [CORE]**\n\n### EXAMPLE\n\nThis implementation is done following the [mirror device 'Smoke_Detector': case study](https://github.com/msillano/tuyaDAEMON/wiki/mirror-device-'Smoke_Detector':-case-study)\n\n1. _Seven Tuya automation_ are required to generate all **TUYATRGs**.\n2. A `switch` node selects the TRIGGERs using the `payload.tuyatrigger` value in the incoming node-red message.\n3. A subflow `do logging` builds the standard TuyaDEAMON device message `remote/device/property/value` for the CORE process.\n",
        "x": 320,
        "y": 580,
        "wires": []
    },
    {
        "id": "a06dfa941f604f0a",
        "type": "comment",
        "z": "33917e45a4084979",
        "name": "MIRROR device 'smoke detector' commands  (MAP:  50050..70069)",
        "info": "The incoming Tuya command (`device/property/value`) is converted to TRIGGER and sent to tuya_bridge.<br>\n**[message] => REDTRG => [automation] => property/value**\n\n### EXAMPLE\n\nThis implementation is done following the [mirror device 'Smoke_Detector': case study](https://github.com/msillano/tuyaDAEMON/wiki/mirror-device-'Smoke_Detector':-case-study)\n\n1. A `pick and execute` node selects the TRIGGER using the `property` and `value` of the incoming tuyaDEAMON message.\n2. A subflow `REDTRG` builds the correct command for `tuya_bridge`.\n3. In Tuya an automation sends the ACK and then set the required `property` at the right `value`.\n",
        "x": 340,
        "y": 960,
        "wires": []
    },
    {
        "id": "1d16ae29623ea585",
        "type": "switch",
        "z": "33917e45a4084979",
        "name": "Tuya trigger selector",
        "property": "payload.tuyatrigger",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "10010",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 520,
        "y": 280,
        "wires": [
            [
                "78d04423bc7a60dc"
            ]
        ]
    },
    {
        "id": "1c054ced9cb3bc9c",
        "type": "link in",
        "z": "33917e45a4084979",
        "name": "from TRIGGER.user events",
        "links": [
            "c0057180f9fecfa9"
        ],
        "x": 155,
        "y": 280,
        "wires": [
            [
                "1d16ae29623ea585"
            ]
        ]
    },
    {
        "id": "78d04423bc7a60dc",
        "type": "link out",
        "z": "33917e45a4084979",
        "name": "TUYATRG10010",
        "mode": "link",
        "links": [],
        "x": 770,
        "y": 280,
        "wires": [],
        "l": true
    }
]