[{"id":"3332031a.de38fc","type":"subflow","name":"MQTT/ozone/1","info":"","category":"","in":[{"x":120,"y":120,"wires":[{"id":"9ae04f2.4bac6b"},{"id":"c8e74e64.7eafe"}]}],"out":[{"x":1020,"y":120,"wires":[{"id":"80d3499e.df2d58","port":0},{"id":"7a13d179.a10ed","port":0},{"id":"938228d2.f21868","port":0},{"id":"9ae04f2.4bac6b","port":0}]},{"x":1020,"y":340,"wires":[{"id":"8329893d.2679a8","port":0}]}],"env":[{"name":"deviceID","type":"str","value":"sonoff001"}],"color":"#DDAA99","status":{"x":1020,"y":400,"wires":[{"id":"8329893d.2679a8","port":1}]}},{"id":"808a0753.c4e598","type":"mqtt in","z":"3332031a.de38fc","name":"","topic":"/ozone/timerpdm/1/status/info","qos":"0","datatype":"utf8","broker":"2e55898d.e8af66","x":540,"y":300,"wires":[["80d3499e.df2d58"]]},{"id":"c1b5bd9e.0aff1","type":"mqtt out","z":"3332031a.de38fc","name":"MQTT send","topic":"","qos":"","retain":"","broker":"2e55898d.e8af66","x":490,"y":160,"wires":[]},{"id":"505b5823.792928","type":"mqtt in","z":"3332031a.de38fc","name":"","topic":"/ozone/timerpdm/1/status/config","qos":"0","datatype":"utf8","broker":"2e55898d.e8af66","x":550,"y":220,"wires":[["7a13d179.a10ed"]]},{"id":"215fc962.4168a6","type":"mqtt in","z":"3332031a.de38fc","name":"","topic":"/ozone/timerpdm/1/status/output","qos":"2","datatype":"utf8","broker":"2e55898d.e8af66","x":550,"y":260,"wires":[["938228d2.f21868"]]},{"id":"9ae04f2.4bac6b","type":"function","z":"3332031a.de38fc","name":"handle GET operations","func":"// GET: response from tuyastatus.\n//\n// local functions to get tuyastatus from device.msg\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // to use the stored JSON method library in global alldevices\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname])); // ignore the ⚠ node-red warning\n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\nfunction _getGlobalValue(Dn, Pn){\nvar tuyastatus = global.get(\"tuyastatus\");\nif ((tuyastatus !== undefined) && (tuyastatus[Dn] !== undefined)) { // ok device field\n   if (Pn === \"schema\") \n          return tuyastatus[Dn];\n   return tuyastatus[Dn][Pn];\n   }\nreturn undefined;\n}\n\n// ===========================  main\n\nlet command = msg.payload.operation || 'SET';\n// node.warn([\"in command\", command, msg]);\nconst PREFIX = \"/ozone/timerpdm/1/\";\n\nif (command === 'GET'){\n      // value from tuyastatus, format as device response\n      var alld = global.get(\"alldevices\");\n      let oD    = _callJSONMethod(alld, \"__getODev\", msg.to);\n      var dName = _callJSONMethod(alld, \"__getDevName\", oD);\n      var pName = _callJSONMethod(alld, \"__getDpsName\", oD, msg.infodp);\n      var value = _getGlobalValue(dName, pName);\n      if (value !== undefined){\n            var newMsg = { \n               \"payload\":{\n                  \"deviceId\": msg.to,\n                  \"deviceName\": dName,\n                  \"data\": {\n                      \"dps\":{\n                          [msg.payload.dps]: value  \n                  }}}};\n          return newMsg;\n          }\nreturn null;          \n}  \n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n//\n// Stuff to save data in tuyastatus\n// --------------- locals\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname])); // ignore ⚠\n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\n// ---------------- main\nconst DEVID = \"sonoff001\"; // can have friendly name\n// stuff to access data\nvar alld = global.get(\"alldevices\");\nif (alld === undefined)\n    return null;\n// find object dp\nvar oDev = _callJSONMethod(alld, \"__getODev\", DEVID, \"real\");\nvar pmDevName = _callJSONMethod(alld, \"__getDevName\", oDev);\n//\ntuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined)\n    tuyastatus = {};\nif (tuyastatus[pmDevName] === undefined)\n    tuyastatus[pmDevName] = {};\n// init\ntuyastatus[pmDevName][\"_connected\"] = true;\n\noDev.dps.forEach(adp => {\n            if (['RW','WW','GW','RO','UNK','PUSH','SKIP',undefined].includes(adp.capability))\n                 tuyastatus[pmDevName][adp.name ? adp.name:adp.dp] = \"none\"; });\n\nglobal.set(\"tuyastatus\", tuyastatus);\n","finalize":"","x":310,"y":120,"wires":[[]]},{"id":"464d6ade.3318f4","type":"status","z":"3332031a.de38fc","name":"MQTT status","scope":["808a0753.c4e598","c1b5bd9e.0aff1","505b5823.792928","215fc962.4168a6"],"x":490,"y":360,"wires":[["8329893d.2679a8"]]},{"id":"80d3499e.df2d58","type":"function","z":"3332031a.de38fc","name":"refresh + JSON split ","func":"let tcount = global.get(\"tcount\");\ntcount = ( ++tcount) % global.get(\"tstart\");\nglobal.set(\"tcount\",tcount);\nif (tcount > 0) return null;\n\nvar newMsg = { \n    \"payload\":{\n        \"deviceId\": \"sonoff001\",\n        \"data\": {\n             \"dps\":{\n            }}}};\nlet odata = JSON.parse(msg.payload);\nnewMsg.payload.data.dps[\"_info\"] = odata[0];\nswitch(odata[1]){\n  case 0:\n     newMsg.payload.data.dps[\"_led\"] = \"gray\";\n     break;\n  case 1:\n     newMsg.payload.data.dps[\"_led\"] = \"green\";\n     break;\n  case 2:\n     newMsg.payload.data.dps[\"_led\"] = \"red\";\n     break;\n}\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node \nglobal.set(\"tstart\", 90);\nglobal.set(\"tcount\", 0);","finalize":"","x":840,"y":300,"wires":[[]]},{"id":"7a13d179.a10ed","type":"function","z":"3332031a.de38fc","name":"JSON split","func":"\nvar newMsg = { \n    \"payload\":{\n        \"deviceId\": \"sonoff001\",\n        \"data\": {\n             \"dps\":{\n            }}}};\nlet odata = JSON.parse(msg.payload);\nnewMsg.payload.data.dps[\"_mode\"] = odata[\"mode\"] ==0?\"OFF\":odata[\"mode\"] ==1?\"AUTO\":\"LOOP\";\nnewMsg.payload.data.dps[\"_ONtime\"] = odata[\"ONtime\"];\nnewMsg.payload.data.dps[\"_OFFtime\"] = odata[\"OFFtime\"];\nnewMsg.payload.data.dps[\"_PDM\"] = odata[\"PDM\"];\nnewMsg.payload.data.dps[\"_timezone\"] = odata[\"timezone\"];\n// change\nnewMsg.payload.data.dps[\"_startTime\"] = odata[\"Ttime\"];\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node \nflow.set(\"tstart\", 5);\nflow.set(\"tcount\", 0);","finalize":"","x":810,"y":220,"wires":[[]]},{"id":"938228d2.f21868","type":"function","z":"3332031a.de38fc","name":"JSON split","func":"var newMsg = { \n    \"payload\":{\n        \"deviceId\": \"sonoff001\",\n        \"data\": {\n             \"dps\":{\n            }}}};\nlet odata = JSON.parse(msg.payload);\nnewMsg.payload.data.dps[\"_mode\"] = odata[\"mode\"] ==0?\"OFF\":odata[\"mode\"] ==1?\"AUTO\":\"LOOP\";\nnewMsg.payload.data.dps[\"_PDM\"] = odata[\"PDM\"];\nnewMsg.payload.data.dps[\"_count\"] = odata[\"count\"];\n// name change\nnewMsg.payload.data.dps[\"_clock\"] = odata[\"Ttime\"];\nnewMsg.payload.data.dps[\"_switch\"] = odata[\"output\"];  //  converted by BOOLEANONOFF\nnewMsg.payload.data.dps[\"_countdown\"] = odata[\"toggle\"];\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node \nflow.set(\"tstart\", 5);\nflow.set(\"tcount\", 0);","finalize":"","x":810,"y":260,"wires":[[]]},{"id":"c8e74e64.7eafe","type":"function","z":"3332031a.de38fc","name":"SET to MQTT","func":"// SET: format change, and some name/values changes\n\nlet command = msg.payload.operation || 'SET';\nconst PREFIX = \"/ozone/timerpdm/1/\";\n\nif (command == 'SET'){\n       switch(msg.payload.dps) {\n           case '_go':    // MQTT commands\n           case '_off':\n           case '_end':\n           case '_send':\n               msg.topic=PREFIX + \"command\";\n               msg.payload = msg.payload.dps.substring(1);\n               return msg;\n           case '_refresh': // name change\n               msg.payload =\"send\";\n               msg.topic=PREFIX + \"command\";\n               return msg;\n           case '_refreshCycle':  // implementation in node 'refresh + JSON split'\n               global.set(\"tstart\", msg.payload.set);\n               break;\n           case \"_mode\":     // value conversion\n                if (msg.payload.set === 'OFF')  msg.payload.set = 0;\n                if (msg.payload.set === 'AUTO') msg.payload.set = 1;\n                if (msg.payload.set === 'LOOP') msg.payload.set = 2;\n                msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                msg.topic=PREFIX + \"set\";\n                return msg;\n             case \"_startTime\":  // name change\n                 msg.payload.dps = \"+Ttime\";\n                 msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                 msg.topic=PREFIX + \"set\";\n                 return msg;\n             case \"_clock\":  // name change\n                 msg.payload.dps = \"+nowtime\";\n                 msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                 msg.topic=PREFIX + \"set\";\n                 return msg;\n           default:      // MQTT set, not name change, not value conversions\n                 msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                 msg.topic=PREFIX + \"set\";\n                 return msg;\n           }\n}\nreturn null;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":280,"y":160,"wires":[["c1b5bd9e.0aff1"]]},{"id":"8329893d.2679a8","type":"function","z":"3332031a.de38fc","name":"set state","func":"\n\nreturn [{payload:{state : msg.status.fill === \"green\"?\"CONNECTED\":\"DISCONNECTED\"}},\n        msg];","outputs":2,"noerr":0,"initialize":"","finalize":"","x":800,"y":360,"wires":[[],[]]},{"id":"2e55898d.e8af66","type":"mqtt-broker","name":"PDM Ozone timer#1","broker":"192.168.1.18","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"e1c6cc8a.2f92a","type":"subflow","name":"REFRESH","info":"","category":"","in":[{"x":160,"y":120,"wires":[{"id":"c306cbee.682538"}]}],"out":[{"x":740,"y":120,"wires":[{"id":"c306cbee.682538","port":1},{"id":"9eb78521.a29748","port":0}]},{"x":600,"y":160,"wires":[{"id":"c306cbee.682538","port":2}]}],"env":[{"name":"deviceID","type":"str","value":""},{"name":"Max time","type":"num","value":"60"}],"color":"#DDAA99","inputLabels":["msg"],"outputLabels":["loop","device "],"icon":"node-red/swap.svg"},{"id":"c306cbee.682538","type":"function","z":"e1c6cc8a.2f92a","name":"*REFRESH control","func":"\nconst FASTDP = \"_refreshCycle\";  // set: 'off'| time [s]\nconst REFDP  = \"_refresh\";        // set: any (trigger)\nconst DEVID  = env.get(\"deviceID\");\n// for tests\nconst REFONLY   = {operation: \"REFRESH\"};\nconst REFONE    = {operation: \"REFRESH\", dps:20};\nconst REFMANY   = {operation:\"REFRESH\",requestedDPS:[1,9,6,17,18,19,20]};\nconst REFSCHEMA = {operation: \"REFRESH\", schema:true};\n\nfunction isNone(value){\n    if(value){\n        if(typeof(value) === \"string\"){\n            if(value.toUpperCase() === 'OFF') return true;\n            if(value.toUpperCase() === 'NO') return true;\n            if(value.toUpperCase() === 'NONE') return true;\n        }\n    return false;\n    }\nreturn true;\n}\n\nif (DEVID === \"\"){\n node.warn(\"ERROR [REFRESH] deviceID not set.\");\n return[null];\n}\n// builds the output message\nvar newMsg = {\n    \"payload\": {\n        \"deviceId\": DEVID,\n        \"deviceName\": \"dummy\", // as device node, not used\n        \"data\": {\n            \"dps\": {}\n        }\n    }\n};\n\n// --------------------------------\n// ignores pseudoDP\nif ((msg.payload === undefined) || (msg.payload.dps === undefined)) return [null, msg];\n//\n// test for REFDP  SET/GET case\nif (msg.payload.dps === REFDP){\n    if (msg.payload.set !== undefined) { // is set\n        newMsg.payload.data.dps[REFDP] = \"sent\";\n        return ([null, {payload:REFONLY}, newMsg]);\n        } else\n    return [null];   // no GET\n }\n\n//  test for  REFDP MULTIPLE case\nif ((msg.payload.data !== undefined) && (msg.payload.data[REFDP] !== undefined) ) {\n    delete msg.payload.data[REFDP];\n    newMsg.payload.data.dps[REFDP] = \"sent\";\n    node.send([null, { payload: REFONLY }, newMsg]);\n    return ([null, msg]);\n}\n\n// ----------------------------------\n// test for FASTDP  SET/GET case\nif (msg.payload.dps === FASTDP) {\n    if (msg.payload.set !== undefined) { // is set\n        context.set(\"fast\", msg.payload.set);\n        newMsg.payload.data.dps[FASTDP] = msg.payload.set;\n        if (isNone(msg.payload.set)) {\n             return ([{ payload: \"stop\" }, null, newMsg]);\n        } else{\n          return ([{ payload:REFONLY, \n                     loop:{duration: msg.payload.set, units:\"Second\", maxtimeout: env.get(\"Max time\"), maxtimeoutunits:\"Second\"}} , null, newMsg]);\n        } \n    } else { // is get, back last value\n        newMsg.payload.data.dps[FASTDP] = context.get(\"fast\");\n        return ([null, null, newMsg]);\n    }\n}\n\n// test for FASTDP  MULTIPLE case\nif ((msg.payload.data !== undefined) && (msg.payload.data[FASTDP] !== undefined)) {\n    let fst = msg.payload.data[FASTDP];\n    delete msg.payload.data[FASTDP];\n    context.set(\"fast\", fst);\n    newMsg.payload.data.dps[FASTDP] = fst;\n    if (isNone(fst)) {\n             return ([{ payload: \"stop\" }, null, newMsg]);\n        } else{\n          return ([{ payload: REFONLY , \n                     loop:{duration: fst, units:\"Second\", maxtimeout: env.get(\"Max time\"), maxtimeoutunits:\"Second\"}} , null, newMsg]);\n        } \n}\n\n// test for ALL,  SCHEMA case\nif (msg.payload.schema) {\n    newMsg.payload.data.dps[FASTDP] = context.get(\"fast\");\n    return ([null, msg, newMsg]);\n}\n// else do nothing\nreturn [null, msg];\n","outputs":3,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\ncontext.set(\"fast\",0);","finalize":"","x":330,"y":120,"wires":[["9eb78521.a29748"],[],[]],"info":"CUSTOMIZATION:\n\n- duplicate this node for any new device\n- update in code the deviceId\n  \nsee: [Howto: add a new device to tuyaDAEMON](https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON)"},{"id":"9eb78521.a29748","type":"looptimer-advanced","z":"e1c6cc8a.2f92a","duration":"10","units":"Second","maxloops":"1000000","maxtimeout":"60","maxtimeoutunits":"Second","name":"","x":560,"y":80,"wires":[[],[]]},{"id":"15c9daba.b55285","type":"subflow","name":"dynamic retry","info":"## device connection dynamic retry\n\nDynamically optimize the timeout of Tuya connection attempts. For `smart-tuya-device-node` 4.0.2.\n\n- If the device is _connected_, the retry timeout is \"MinTimeout\".\n- if the device is _disconnected_, the retry timeout grows randomly to \"MaxTimeout\".\n\nUser parameters:\n- deviceId: Tuya ID of the device (same value as `smart-tuya-device-node`)\n- MinTimeout: the timeout of fast attempts, in sec.\n- MaxTimeout: the timeout of slow attempts, in sec.\n\n\n- Inputs: status msg from status-node \n\n- Output 1: `out msg`, for the  '_connected'  capability \n- Output 1: `to low_lev_msg`, to control the device.\n\nNotes:\n\nSet in `smart-tuya-device-node`:\n  - \"Interval to retry connection\" = 1000 (default, 1 sec).\n  - \"Connection search interval\" = any (not used).\n\nWith these default settings, the minimum retry interval is approximately 10 seconds (affected by many factors).\nIf the device is disconnected, the interval increases in random increments to approximately sec. 60 in 9/10 minutes. \n","category":"","in":[{"x":40,"y":40,"wires":[{"id":"a7c39c7.4e2dd6"}]}],"out":[{"x":500,"y":20,"wires":[{"id":"a7c39c7.4e2dd6","port":0}]},{"x":500,"y":80,"wires":[{"id":"a7c39c7.4e2dd6","port":1}]}],"env":[{"name":"deviceId","type":"str","value":"here tuya id"},{"name":"MinTimeout","type":"num","value":"1"},{"name":"MaxTimeout","type":"str","value":"60"}],"color":"#DDAA99","inputLabels":["from status"],"outputLabels":["out msg","to low_lev_msg"],"icon":"font-awesome/fa-rss-square"},{"id":"a7c39c7.4e2dd6","type":"function","z":"15c9daba.b55285","name":"connected message - dynamic","func":"// to set global.tuyasyatus.xxxx._connected\n\nconst CONN = \"_connected\"; //  pseudoDP\nconst TMT = \"_findTimeout\";\nconst RMT = \"_retryTimeout\";\n\n// local functions\nfunction _sendReal(idevice, value) {\n   // builds a fake OUT message\n   var newMsg = {\n      \"payload\": {\n         \"deviceId\": idevice,\n         \"data\": {\n            \"dps\": {\n               [CONN]: value\n            }\n         }\n      }\n   };\n   return newMsg;\n}\n\nfunction _sendTimeout(idevice, timeout) {\n   var tmtMsg = {\n      \"toDev\": idevice,\n      \"payload\": {\n         \"dps\": TMT,\n         \"set\": timeout\n      }\n   };\n   return tmtMsg;\n}\n\nfunction getRandomArbitrary(min, max) {\n   return Math.random() * (max - min) + min;\n}\n\n// ------------------  main\nconst XfLo = 1.0; // min increment 0%\nconst XfHi = 1.4; // min increment 40%\n// user set parameter device id\nlet deviceId = env.get(\"deviceId\");\nlet Tmin = env.get(\"MinTimeout\") * 1000;\nlet TMAX = env.get(\"MaxTimeout\") * 1000;\n//\nlet cold = flow.get(deviceId + \"_con\");\nlet cnew = cold;\nlet told = flow.get(deviceId + \"_time\");\nlet tnew = told;\ncMsg = null;\ntMsg = null;\n//status.text\nif (msg.payload == undefined) return [null];\nswitch (msg.payload.state) {\n    case \"CONNECTED\":\n      if (told > Tmin) {\n          tnew = Tmin;\n       }\n       cnew = \"connected\";\n       break;\n   case \"DISCONNECTED\":\n       if (told < TMAX) {\n          tnew = Math.floor(told * getRandomArbitrary(XfLo, XfHi));\n       }\n       cnew = \"connecting\";\n        break;\n   case \"CONNECTING\":\n       cnew = \"connecting\";\n       break;\n    }\n\nif (cnew !== cold) {\n   cMsg = _sendReal(deviceId, cnew === \"connected\");\n   flow.set(deviceId + \"_con\", cnew);\n}\n\nif (tnew !== told) {\n   tMsg = _sendTimeout(deviceId, tnew);\n   flow.set(deviceId + \"_time\", tnew);\n}\nreturn ([cMsg, tMsg]);\n","outputs":2,"noerr":0,"initialize":"// Code added here will be run once\n// set the default status _connected to null in tuyastatus\n// creates tuyastatus entry to null.\nvar alldevices = global.get(\"alldevices\");\nif (alldevices === undefined) return null;\nvar deviceId = env.get(\"deviceId\");\n// only for REAL devices\nvar d = alldevices.real.find(device => device.id === deviceId);\nif (d === undefined) return null;\n//\nvar tuyastatus = global.get(\"tuyastatus\");\n    if (tuyastatus === undefined)\n        tuyastatus = {};\n    var dev = (d.name?d.name:d.id);\n    if (tuyastatus[dev] === undefined) {\n        tuyastatus[dev] = {_connected:null};\n        global.set(\"tuyastatus\", tuyastatus);\n    }\n    \nflow.set(deviceId + \"_con\", \"null\");\nlet Tmin = env.get(\"MinTimeout\") * 1000;\nflow.set(deviceId + \"_time\", Tmin);\n","finalize":"","x":230,"y":40,"wires":[[],[]]},{"id":"81d3b584.14c888","type":"subflow","name":"do logging","info":"This node simulate data received from a tuya device. I.e. the output must go to \"to logging\" input.\nUsed to build an update message for 'mirror' devices.\n\nUsed to process tuyaTRIGGERS.\n\n- `deviceID`: the 'mirror' device ID or CID\n- `fakeDP`: the data point id. Convention: user defined, equal to related tuyaTRIGGER, number (1000-2000). \n- `value`: the new value. If the value starts with '@', then it is eval()ued: exemple '@msg.payoad.set' => eval('msg.payoad.set'))\n\nnote: The 'mirror' device MUST exist in the `fake` branch of **alldevices**.\n\n","category":"","in":[{"x":120,"y":80,"wires":[{"id":"6d1b2b8f.c5e554"}]}],"out":[{"x":460,"y":80,"wires":[{"id":"6d1b2b8f.c5e554","port":0}]}],"env":[{"name":"deviceID","type":"str","value":""},{"name":"propertyDP","type":"str","value":""},{"name":"value","type":"str","value":""}],"color":"#87A980","icon":"node-red/debug.svg"},{"id":"6d1b2b8f.c5e554","type":"function","z":"81d3b584.14c888","name":"do mirror msg","func":"// local function\n// note: the value param can also be a @variable:\n//e.g. \"@msg.payload.set\" => eval(msg.payload.set) \n\n    // builds a fake OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": env.get(\"deviceID\"),\n            \"data\": {\n                \"dps\": {}\n                //          \"dps\":[dpname = value]\n            }\n        }\n    };\n    \n    var xvalue = env.get(\"value\").toString().trim();\n    if (xvalue.startsWith('@')){\n        xvalue = eval(xvalue.substring(1));\n    }\n    var dpname = env.get(\"propertyDP\").toString().trim();\n    if (dpname.startsWith('@')){\n        dpname = eval(dpname.substring(1));\n    }\n  \n    newMsg.payload.data.dps[dpname.toString()] = xvalue;\n    return newMsg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":300,"y":80,"wires":[[]]},{"id":"ee953c15.ada29","type":"subflow","name":"static retry","info":"Handles tuya device status changes.\r\n\r\nProcesses the status of a real device , if the connection status changes:\r\n   - Creates a log msg (deviceId, \"_connected\", true/false) for standard processing\r\n \r\nIMPORTANT: set the ** deviceID ** parameter with the correct ID value.","category":"","in":[{"x":80,"y":80,"wires":[{"id":"6160136.f5f99ec"}]}],"out":[{"x":440,"y":80,"wires":[{"id":"6160136.f5f99ec","port":0}]}],"env":[{"name":"deviceId","type":"str","value":""}],"color":"#DDAA99","inputLabels":["in staus"],"outputLabels":["to log"],"icon":"font-awesome/fa-rss-square"},{"id":"6160136.f5f99ec","type":"function","z":"ee953c15.ada29","name":"connected message - static","func":"// to set global.tuyasyatus.xxxx._connected \n// creates a response for the dp \"_connected\"\n// store value and filter events\n\nvar CONN = \"_connected\";  //  tuyadaemon internal define\n// see also tuyaDAEMON.\"connection check\" function\n// local function\nfunction _sendReal(idevice,  value){\n// builds a fake OUT message \nvar newMsg = { \"payload\":{\n      \"deviceId\": idevice,\n      \"data\": {\n          \"dps\":{\n            [CONN]:value\n          }}}};\nreturn newMsg;  \n}\n\n// user set parameter device id\nvar deviceId = env.get(\"deviceId\");\n\nvar nowconnected;\nif((msg.payload !== undefined)&&(msg.payload.state !== undefined)){\n   nowconnected =  (msg.payload.state == \"CONNECTED\" || msg.payload.state == \"node-red:common.status.connected\" );        // can change\n}\nif((msg.status !== undefined)&&(msg.status.text !== undefined)){\n   nowconnected =  (msg.status.text == \"CONNECTED\" || msg.status.text == \"node-red:common.status.connected\" );        // can change\n}\nif (nowconnected == undefined) return null;\n// filering \nlet old = flow.get(deviceId+\"_con\");\n// node.warn([\"STATUS \",msg, nowconnected, old]);\n\nif (old === nowconnected) return null;\nflow.set(deviceId+\"_con\", nowconnected);\n\nreturn(_sendReal(deviceId, nowconnected));\n\n\n\n\n\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// set the default status _connected to null in tuyastatus\n// creates tuyastatus entry to null.\nvar alldevices = global.get(\"alldevices\");\nif (alldevices === undefined) return null;\nvar deviceId = env.get(\"deviceId\");\n// only for REAL devices\nvar d = alldevices.real.find(device => device.id === deviceId);\nif (d === undefined) return null;\n//\nvar tuyastatus = global.get(\"tuyastatus\");\n    if (tuyastatus === undefined)\n        tuyastatus = {};\n    var dev = (d.name?d.name:d.id);\n    if (tuyastatus[dev] === undefined) {\n        tuyastatus[dev] = {_connected:null};\n        global.set(\"tuyastatus\", tuyastatus);\n    }\n    ","finalize":"","x":260,"y":80,"wires":[[]]},{"id":"173260fb.d021ff","type":"tab","label":"tuyaDAEMON.core","disabled":false,"info":"The **tuyaDAEMON CORE** handles all _tuya-nodered_ basic communications, giving you a (quasi) complete bidirectional integration with tuya cloud.\n\nsee: https://github.com/msillano/tuyaDAEMON/blob/main/tuyaDAEMON/README.md"},{"id":"a878b58e.e4ea08","type":"function","z":"173260fb.d021ff","name":"*OUT data process","func":"// sends any message to DB (sql in msg.topic), updates tuyastatus\n// version 1.1 (use of _callJSONMethod)\n//-------------------------------------------\n// Data codification is function of the device and dps.\n\nvar datadecode = {\n    // to format values from device messages to standard form\n    // add new functions to array as required\n    BYTESMALLFLOAT: function (value) {\n        // exanple: C3H = 195 => 19.5  (°C: units as from device setup)\n        // required by thermostat, meter\n        return (Number(value) / 10.0);\n    },\n    INTE2FLOAT: function (value) {\n        // for now, only DECODE\n        // required by  meter\n        return (Number(value) / 100.0);\n    },\n\n\n    BOOLEANONOFF: function (value) {\n        // transform (false, 0, \"\")/true, to 'OFF'/'ON'\n        // en: can be localized for internationalization\n        return (!value ? \"OFF\" : (value == 1 ? \"ON\" : value));\n    },\n    BOOLEANOPENCLOSE: function (value) {\n        // transform (false, 0, \"\")/true, to 'OPEN'/'CLOSE'\n        // en: can be localized for internationalization\n        return (!value ? \"CLOSE\" : (value == 1 ? \"OPEN\" : value));\n    },\n\n    ENUMONOFFHOLD: function (value) {\n        // transform 0/1/2 to OFF/ON/HOLD\n        // changed to use same strings as many switches\n        // en: can be localized for internationalization off|on|memory\n        return (value == 0 ? \"off\" : (value == 1 ? \"on\" : (value == 2 ? \"memory\" : value)));\n    },\n\n    STRUCTARGETTEMP: function (value) {\n        // transform from base64(Uint8Array[17]) to object:\n        //   {\"count\":4,\n        //    \"changes\":[{\"time\":\"00:00\",\"temp\":15.5},\n        //              {\"time\":\"07:00\",\"temp\":20},\n        //              {\"time\":\"16:30\",\"temp\":21},\n        //              {\"time\":\"21:00\",\"temp\":16.5}]}\n        // required by thermostat\n        function minTohm(min) { // local function\n            h = (~~(min / 60));\n            m = min % 60;\n            return (h > 9 ? h : '0' + h) + \":\" + (m > 9 ? m : '0' + m);\n        }\n\n        b = Buffer.from(value, \"base64\");\n        var n = b.readUInt8(0);\n        var result = {\n            count: n,\n            changes: []\n        };\n        for (var i = 0; i < n; i++) {\n            result.changes[i] = {\n                time: minTohm(b.readUInt16BE(i * 4 + 1)),\n                temp: b.readUInt16BE(i * 4 + 3) / 10\n            };\n        }\n        //     return (JSON.stringify(result));\n        return (result);\n    }, // ends function\n\n    ARRAY8INT: function (value) {\n        // transform  base64(Uint8Array[X]) to UInt8[]\n        // X=24 =>  [16,16,15,15,14,14,16,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\"\n        // required by thermostat\n        b = Buffer.from(value, \"base64\");\n        return (\"[\" + new Uint8Array(b).toString() + \"]\");\n    },\n\n    STRUCTTIMEHMS: function (value) {\n        // tentative, on work\n        // transform  base64(Uint16Array[3]) to \"HH:MM:SS\" ??\n        // required by thermostat ??\n        b = Buffer.from(value, \"base64\");\n        const uint16arr = new Uint16Array(\n                b.buffer,\n                b.byteOffset,\n                b.length / Uint16Array.BYTES_PER_ELEMENT);\n        return ((Uint16Array[0] > 9 ? Uint16Array[0] : \"0\" + Uint16Array[0]) + \":\" +\n            (Uint16Array[1] > 9 ? Uint16Array[1] : \"0\" + Uint16Array[1]) + \":\" +\n            (Uint16Array[2] > 9 ? Uint16Array[2] : \"0\" + Uint16Array[2]));\n    },\n\n    STRUCTCOLOUR: function (value) {\n        //  Transforms  RRGGBB0000FFFF to objec\n        //      {   \"hex\":\"RRGGBBHHHHSSVV\" }\n        //  or: {   \"r\": RR,\n        //          \"g\": GG,\n        //          \"b\": BB\n        //          \"h\":HHHH,\n        //          \"s\": SS,\n        //          \"v\": VV  }\n        // 100% = 0x64\n        // required by humidifier led\n        b = Buffer.from(value, 'hex');\n        var result = {\n            hex: value,\n        };\n        result[\"r\"] = b.readUInt8(0);\n        result[\"g\"] = b.readUInt8(1);\n        result[\"b\"] = b.readUInt8(2);\n        result[\"h\"] = b.readUInt16BE(3)\n            result[\"s\"] = b.readUInt8(5);\n        result[\"v\"] = b.readUInt8(6);\n        return (result);\n    },\n    ENUMHIGHGOODLOW: function (value) {\n        // transform 0/1/2 to LOW/GOOD/HIGH\n        // en: can be localized for internationalization\n        return (value == 0 ? \"LOW\" : (value == 1 ? \"GOOD\" : (value == 2 ? \"HIGH\" : value)));\n    },\n    RECMODE: function (value) {\n        // transforms string '1'/'2' to  'continuous'/'events'\n        // it|en: can be localized for internationalization\n        return (value == 2 ? \"continuous\" : (value == 1 ? \"events\" : value));\n    },\n    STRUCTINCH: function (value) {\n        b = Buffer.from(value, \"base64\");\n        var result = {\n            inching: (b.readUInt8(0) !== 0),\n            delay: b.readUInt16BE(1)\n        };\n        return (result);\n    },\n    STRUCTRAND: function (value) {\n        function minTohm(min) { // local function\n            h = (~~(min / 60));\n            m = min % 60;\n            return (h > 9 ? h : '0' + h) + \":\" + (m > 9 ? m : '0' + m);\n        }\n        function daystring(val) {\n            var res = \"\";\n            week = \"DLMMGVS\"; // en: SMTWTFS\n            mask = 1;\n            for (var i = 0; i < 7; i++) {\n                res += (val & mask) ? week.charAt(i) : '-';\n                mask = mask << 1;\n            }\n            return (res);\n        }\n        if (value.length < 5)\n            return (value);\n        b = Buffer.from(value, \"base64\");\n        var randdef = [];\n        for (var i = 0; i < b.length / 6; i++) {\n            var o = {\n                active: (b.readUInt8(i * 6 + 0) !== 0),\n                days: daystring(b.readUInt8(i * 6 + 1)),\n                start: minTohm(b.readUInt16BE(i * 6 + 2)),\n                end: minTohm(b.readUInt16BE(i * 6 + 4))\n            };\n            randdef[randdef.length] = o;\n        }\n        return randdef;\n    },\n    STRUCTREPEAT: function (value) {\n        function minTohm(min) { // local function\n            h = (~~(min / 60));\n            m = min % 60;\n            return (h > 9 ? h : '0' + h) + \":\" + (m > 9 ? m : '0' + m);\n        }\n        function daystring(val) {\n            days = \"\";\n            week = \"DLMMGVS\"; // en: SMTWTFS\n            mask = 1;\n            for (var i = 0; i < 7; i++) {\n                days += (val & mask) ? week.charAt(i) : '-';\n                mask = mask << 1;\n            }\n            return (days);\n        }\n        if (value.length < 5)\n            return (value);\n        b = Buffer.from(value, \"base64\");\n        var result = [];\n        for (var i = 0; i < b.length / 10; i++) {\n            var o = {\n                active: (b.readUInt8(i * 10 + 0) !==  0),\n                days: daystring(b.readUInt8(i * 10 + 1)),\n                start: minTohm(b.readUInt16BE(i * 10 + 2)),\n                end: minTohm(b.readUInt16BE(i * 10 + 4)),\n                on: minTohm(b.readUInt16BE(i * 10 + 6)),\n                off: minTohm(b.readUInt16BE(i * 10 + 8))\n            };\n            result[result.length] = o;\n        }\n        return (result);\n    },\n\n    SDSPACES: function (value) {\n        // transform <total>|<used>|<free> to object.\n        // en: can be localized for internationalization\n        var sizes = value.split(\"|\");\n        var result = {\n            total: new Intl.NumberFormat().format(Number(sizes[0])),\n            used: new Intl.NumberFormat().format(Number(sizes[1])),\n            free: new Intl.NumberFormat().format(Number(sizes[2])),\n        }\n        return (result);\n    }\n};\n// ----------------------------------------------------\n//input: device OUT msg (real)\n//  _msgid: \"1234f3fd.8477fc\"\n//  _event: \"node:1233963.a7d146\"\n//  payload: object\n//     remote_from: <name>   // optional from remote\n//     deviceId: \"123455aa196ae5******\"\n//     deviceName: \"*tuya_bridge\" (tuya name optional, not used)\n//     data: object\n//        t: 1609234903\n//        dps: object\n//           102: 1020\n//\n//input: device OUT msg (virtual)\n//   _msgid: \"d0b26a44.e81738\"\n//   payload: object\n//      remote_from: <name>   // optional from remote\n//      deviceId: \"123473b1b786b59*******\"\n//      deviceName: \"Zigbee Gateway\"\n//      data: object\n//        cid: \"12358d00086a1c45\"\n//        t: 1609235292\n//        dps: object\n//           103: 19\n//\n// output0: info message:\n//            warmsg.payload: [<remote-name>\": RX: '\" + <device-name> + \"'/'\" + <property-name> + \"' \", <data-expandible>] // for debug pad\n//            warmsg.info={                                 // for internal use, REST, etc.\n//                         device: <device-name>,\n//                         property: <property-name>,\n//                         value: <processed-data>,\n//                         };\n//            remote_from: <name>   // optional from remote\n//            infodp : <dp>\n//            from: <deviceID>\n// output1: msg, input message + msg.topic: the sql for DB\n//\n// -------------------------------------------------- do not change\n\n\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // to use the stored JSON method library in global alldevices\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname])); // ignore the ⚠ node-red warning\n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\n// -------------------------------------------- private functions\nvar alld = global.get(\"alldevices\");\nconst PSEUDODP = alld.__pseudodp;\nvar oDev = null;\nvar _dataname = \"\";\n\n// updates the global \"tuyastatus\" and warmsg\nfunction _addToStatus(remote, dnx, _datanx, dx, tx) {\n    var tuyastatus = global.get(\"tuyastatus\");\n    if (tuyastatus === undefined)\n        tuyastatus = {};\n    if (tuyastatus[dnx] === undefined)\n        tuyastatus[dnx] = {};\n    tuyastatus[dnx][_datanx] = dx;\n    tuyastatus[dnx]._t = tx;\n    global.set(\"tuyastatus\", tuyastatus);\n    // info message\n    let sstr = \"RX: '\";\n    if (typeof(remote) === \"string\")\n        sstr = remote+\": RX: '\";\n    warmsg = {\n        payload: [sstr + dnx + \"'/'\" + _datanx + \"' \", dx]\n    };\n}\n\n// clean data (object, array) using JSON.stringify, to get a string for DB\nfunction formatData(data) {\n    var clean = JSON.stringify(data);\n    if (clean[0] === '\"')\n        clean = clean.substring(1).slice(0, -1);\n    //    return clean.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n    //    return clean.replace(/'/g, '\\\\x27');\n    return clean.replace(/'/g, \"\\\\'\");\n}\n\n// For DB output, string\nfunction formatName(data) {\n    if (data == null)\n        return 'NULL';\n    //    return data.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n    //    return data.replace(/'/g, '\\\\x27');\n    return data.replace(/'/g, \"\\\\'\");\n}\n\n// true if device is a real device (virtual := cid exists)\nfunction _isreal(mx) {\n    return (mx.payload.data.cid === undefined);\n}\n\n// returns deviceId (real) or cid (virtual), never fails\nfunction _getID(mx) {\n    return ( mx.payload.data.cid || mx.payload.deviceId);\n}\n\n// returns data.t or now(), formatted for mySQL, never fails\nfunction _mySQLdatetime(mx) {\n    //datetime format for mySQL: '2020-12-18 20:45:02'\n    // using 'sv' for date format and local timezone\n    if (mx.payload.data.t === undefined)\n        return (new Date().toLocaleString('sv'));\n    return (new Date(Number(mx.payload.data.t) * 1000).toLocaleString('sv'));\n}\n\n// returns val, processed by correct dpprocess[] function, if required, and sets  _dataname\nfunction _processData(odev, oPx, mx, adpn, val) {\n    _dataname = \"\";\n\n    if (oPx === undefined) {\n        // tuyadaeamon internal defined fields for all real devices - standard process optional, no warning\n        if ( ! PSEUDODP.includes(adpn.toUpperCase())) // extra pseudo-DPs\n            node.warn(\"WARNING [OUT data]: In alldevices missed the '\" + oDev.name + \"':dps[\" + adpn + \"] definition.\");\n        _dataname = adpn;\n        return (val);\n    }\n    _dataname = (oPx.name === undefined) ? adpn : oPx.name;\n\n    if ((oPx.typefield === undefined) || (oPx.typefield === 'NONE'))\n        return (val); // no process\n    if (datadecode[oPx.typefield] === undefined) {\n        node.warn(\"ERROR [OUT data]:Not found \" + oPx.typefield + \" encode function() for '\" + _dataname + \"': data unchanged.\");\n        return (val);\n    }\n    try {\n        return datadecode[oPx.typefield](val);\n    } catch (error) {\n        node.warn([\"ERROR [OUT data]:in \" + oPx.typefield + \" decode function on value (\" + (typeof(val) === \"string\")?val:JSON.stringify(val) + \"): \" + error,oPx]);\n        return (val);\n    }\n\n}\n\n// get the device object from alldevices, if it don't exist return undefined + warn\nfunction _getODevice(all, mx) {\n    var o;\n    if (_isreal(mx)) {\n        o = _callJSONMethod(all, \"__getODev\", msg.payload.deviceId, \"real\");\n        if (o === undefined) {\n            o = _callJSONMethod(all, \"__getODev\", msg.payload.deviceId, \"fake\");\n        }\n        if (o === undefined) {\n            node.warn(\"ERROR [OUT data]: ADD to alldevices the real/fake deviceId: \" + mx.payload.deviceId + \" (\" + mx.payload.deviceName + \")\");\n        }\n    } else {\n        o = _callJSONMethod(all, \"__getODev\", mx.payload.data.cid, \"virtual\");\n        if (o === undefined) {\n            node.warn(\"ERROR [OUT data]: ADD to alldevices the virtual cid: \" + mx.payload.data.cid + \" [gateway: \" + mx.payload.deviceId + \"]\");\n        }\n    }\n    return (o);\n}\n\n\n// ---------------------  main\n// sends any message to DB (in msg.topic), updates tuyastatus\nvar warmsg = null; // info debug (1)\nmsg.topic = \"\"; // sql query (2)\n\nvar myId = \"unique\";\nvar map = global.get(\"remotemap\");\nif ((map !== undefined) &&  (map.itself !== undefined))  myId = map.itself;\nif (msg.payload.remote !== undefined) myId = msg.payload.remote;\n\noDev = _getODevice(alld, msg);\nif (oDev === undefined)\n    return ([null]);    //error sended,  abort\nvar dname = _callJSONMethod(alld, \"__getDevName\", oDev);\nmsg[\"from\"] =  _getID(msg);\n\n// now processes dp=value couples\nif (msg.payload.data.dps !== undefined) {\n    try {\n//          node.warn([\"in outproc \", msg]);\n       \n    Object.entries(msg.payload.data.dps).forEach(([key, value]) => {\n        warmsg = null;\n        if ((value !== undefined) && (value !== null)) {\n            var oPthis = _callJSONMethod(alld, \"__getODps\", oDev, key);\n            var pdata = _processData(oDev, oPthis, msg, key, value);\n            msg[\"infodp\"] =  key.toString();\n            msg.topic += \" INSERT INTO `messages` (`timestamp`, `daemon`, `action`, `device-id`, `device-name`, `dps`, `dp-name`, `data`, `value`)\\n\";\n            msg.topic += \" VALUES ('\" + _mySQLdatetime(msg) + \"', '\" + myId + \"' , 'RX', '\" + _getID(msg) + \"', '\" + formatName(dname) +\n            \"','\" + key + \"', '\" + formatName(_dataname) + \"', '\" + formatData(value) + \"', '\" + formatData(pdata) + \"') ;\\n\";\n            if (_dataname !== undefined) {\n                // timestamp as seconds\n                var tx = msg.payload.data.dps.t;\n                if (tx === undefined)\n                    tx = Math.floor(Date.now() / 1000);\n                _addToStatus(msg.payload.remote_from, dname, _dataname, pdata, tx);\n                //more data for fast post processing\n                if(msg.payload.remote_from !== undefined)\n                   warmsg['remote_from'] = msg.payload.remote_from;\n                warmsg['from'] = oDev.cid || oDev.id;\n                warmsg['infodp'] = key.toString();         // extra  for filter...\n                warmsg['info'] = {};            //  required by REST check and by share\n                warmsg['info']['device'] = dname;\n                warmsg['info']['property'] = _dataname;\n                warmsg['info']['value'] = pdata;           // decoded\n                let thishare =  (oPthis === undefined? undefined: oPthis.share ); // auto actions\n                // share only local\n                if ((thishare !== undefined) && (msg.payload.remote_from === undefined))\n                     warmsg['share'] = thishare;\n//             node.warn([\"out outproc \", warmsg,  msg]);\n              node.send([warmsg, null]); // SQL are appended\n            }\n        }\n    });\n    } catch (error){\n         node.warn([\"Error in \" + dname + \" device message: \" + error, msg]);\n        return ([null]);\n       \n    }\n    \n} else {\n    if (typeof(msg.payload.data) === \"string\" ){\n        if (msg.payload.data == \"json obj data unvalid\") {\n            node.warn([\"ERROR [OUT data]: from device '\" + dname + \"': not JSON data but 'json obj data unvalid': operation not allowed?.\", msg]);\n        } else {\n            // maybe here it is possible to deduce the value send: see\n            var buff = Buffer.from(msg.payload.data);\n            node.warn([\"ERROR [OUT data]: from device '\" + dname + \"': not JSON data but HEX:\" + buff.toString('hex') + \"  ('\" + msg.payload.data + \"')\", msg]);\n        } }\n    else {\n       node.warn([\"ERROR [OUT data]: from device '\" + dname + \"', maybe bad format ? \", msg]);\n    }\n}\n\nif (msg.topic !== \"\") // some processed, SQL exists\n    return ([null, msg]);\n","outputs":2,"noerr":0,"initialize":"","finalize":"","x":750,"y":1240,"wires":[["2e4937fc.2ef1f8","e6b9ecd2.653e4","2caa595d.2a0106"],["70d88fb4.7fcc2"]],"info":"CUSTOMIZATION:\n\nEdit the code to add a custom decode function.\n\nmore: \n1. add the dual custom encode function to the 'format command' node\n2. add the dual custom encode function to the 'fastFormat' node\n3. add the CODENAME in the `tuyahome.lookupdecode` table."},{"id":"9fe80f7e.f3f7e","type":"link in","z":"173260fb.d021ff","name":"logging","links":["11023367.4cf45d","1547be76.90a842","2ec83963.a7d146","44351050.b577b","44804bb7.72ee84","54d03d6e.945994","5a8e972b.19e048","678390f9.125df","6f287998.d91408","798c4138.06176","7b505949.7ba1e8","83ac5d1.6b830a","9a343958.4999a8","aa6116ba.7b69c8","bbd1da58.dba9c8","bca73204.e6afc","be8e7d4f.d6577","c72cf7d0.7ff3c8","cd81b742.e8a268","e32fa2db.d0b7c","e914f703.e257b8","edf84736.d76338"],"x":190,"y":1180,"wires":[["fe1a20ab.104ce"]],"icon":"node-red/arrow-in.svg","l":true,"info":"entry point for messages from all devices (real, virtual, fake), format like this:\n````\nfunction _sendOUT(deviceid, dp,value){\n// builds a fake OUT message \nvar newMsg = { \n    \"payload\":{\n        \"remote_from\": name     // optional, if from remote\n        \"deviceId\": deviceid,  // for virtual devices => \"deviceId\": gatewayId;\n *      \"deviceName\": name     // from tuya-smart.device node, not used, optional\n        \"data\": {\n *          \"t\": Math.floor( Date.now() / 1000 );    // timestamp (sec), optional, \n *          \"cid\": deviceid;   // only for virtual devices, mandatory\n            \"dps\":{\n                [dp]: value    // encoded, more than one dp in some cases\n            }}}};\nreturn newMsg;  \n}\n````\nOutput:\n - updates the|many `global.tuyastatus[dev-name][dp-name] = value-decoded`\n - adds a|many record(s) to 'messages' DB table \n - fires 'share' if defined in core.global.alldevices\n - fire actions (see mirror.devices flow)"},{"id":"c991322e.a484e","type":"function","z":"173260fb.d021ff","name":"*format  command","func":"\n// Data codification is function of the device and dps: \n// here you can add new encode functions().\n\n// version 1.1 (use of _callJSONMethod)\nvar dataencode = {\n\n    BYTESMALLFLOAT: function (value) {\n        // transforms temperature to byte: 19.5° => 195 => C3H\n        // required by thermostat\n        var x = value;\n        if (typeof value === 'string')\n            x = Number.parseFloat(value);\n        if (Number.isNaN(x)) {\n            throw \"'value' is not a number!\";\n        }\n        return ~~(x * 10.0);\n    },\n\n    BOOLEANONOFF: function (value) {\n        // transforms 'ON'/'OFF' to boolean  true/false (very tolerant :  see https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons)\n        // it|en: can be localized for internationalization\n        if (typeof value == \"string\") \n            if ((value.toUpperCase() === \"OFF\") || (value.toUpperCase() === \"FALSE\") || (value.toUpperCase() === \"NO\"))\n               return false;\n            else\n               return true;\n        if (value == false)\n               return false;\n            else\n                return true;\n },\n\n    BOOLEANOPENCLOSE: function (value) {\n        // transforms 'OPEN'/'CLOSE' to boolean  true/false\n        // it|en: can be localized for internationalization\n        if ((value == 0) || (value == null) || (value.toUpperCase() === \"CLOSE\") || (value.toUpperCase() === \"CHIUSA\"))\n            return false;\n        return true;\n    },\n\n    ENUMONOFFHOLD: function (value) {\n        // transforms 'OFF'/'ON'/'HOLD' to string '0'/'1'/'2'\n        // it|en: can be localized for internationalization\n        if ((value == 0) || (value == null) || (value.toUpperCase() === \"OFF\") || (value.toUpperCase() === \"SPENTO\") || (value.toUpperCase() === \"NO\"))\n            return \"0\";\n        if ((value == 1) || (value.toUpperCase() === \"ON\") || (value.toUpperCase() === \"ACCESO\") || (value.toUpperCase() === \"YES\"))\n            return \"1\";\n        return \"2\";\n    },\n\n    STRUCTARGETTEMP: function (value) {\n        // transform the JSON structure:\n        //   {\"count\":4,\n        //    \"changes\":[{\"time\":\"00:00\",\"temp\":15.5},\n        //              {\"time\":\"07:00\",\"temp\":20},\n        //              {\"time\":\"16:30\",\"temp\":21},\n        //              {\"time\":\"21:00\",\"temp\":16.5}]}\n        // to  base64(Uint8Array[17])\n        // required by thermostat\n\n        function hmTomin(hm) { // local function\n            pieces = hm.split(':');\n            return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n        }\n        function mult10(value) {\n            return ~~(Number.parseFloat(value) * 10.0)\n        }\n\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        node.warn(\"in code \" + value);\n        if (o.count !== undefined) {\n            var buf = Buffer.alloc(o.count * 4 + 1);\n\n            buf.writeInt8(o.count, 0);\n            for (var i = 0; i < o.count; i++) {\n                buf.writeInt16BE(hmTomin(o.changes[i].time), i * 4 + 1);\n                buf.writeInt16BE(mult10(o.changes[i].temp), i * 4 + 3);\n            }\n            return buf.toString('base64');\n        } else {\n            throw \"'value' is not a {time,T}[4] struct\";\n        }\n    },\n\n    ARRAY8INT: function (value) {\n        // Transforms a UInt8Array, e.g.[17,16,16,16,15,15,17,18,19,19,18,18,18,18,17,16,17,18,18,0,0,0,0,0]\n        // as object or JSON string\n        // to  coded64 data => ERAQEA8PERITExISEhIREBESEgAAAAAA\n        // required by thermostat\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        if (Array.isArray(o)) {\n            b = Buffer.from(o);\n            return b.toString('base64');\n        } else {\n            throw \"'value' is not a (json) array !\";\n        }\n    },\n\n    STRUCTTIMEHMS: function (value) {\n        //  Transforms a time \"HH:MM:SS\"\n        //  in coded data base64(Uint16Array[3])\n        //  tentative, on work\n        pieces = value.split(':');\n        var buf = Buffer.alloc(6);\n        buf.writeInt16LE(parseInt(pieces[0]), 0);\n        buf.writeInt16LE(parseInt(pieces[2]), 2);\n        buf.writeInt16LE(parseInt(pieces[4]), 4);\n        return buf.toString('base64');\n    },\n\n    STRUCTCOLOUR: function (value) {\n        // accepts: JSON or object\n        // encode:\n        //      {   \"hex\":\"RRGGBBHHHHSSVV\" }\n        //  or: {   \"r\": RR,\n        //          \"g\": GG,\n        //          \"b\": BB\n        //        ( \"h\":HHHH,\n        //          \"s\": SS,\n        //          \"v\": VV )  }\n        // 100% = 0x64\n        //  required by humidifier led\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        if ((o.hex !== undefined) && (typeof o.hex === 'string') && (o.hex.length == 14))\n            return (o.hex);\n        if ((o.r === undefined) || (o.g === undefined) || (o.b === undefined)) {\n            throw \"'value' is not valid hex|rgb object!\";\n        }\n        var buf = Buffer.alloc(7);\n        buf.writeUInt8(o.r, 0);\n        buf.writeUInt8(o.g, 1);\n        buf.writeUInt8(o.b, 2);\n        if (o.h !== undefined) {\n            buf.writeUInt16BE(o.h, 3);\n            buf.writeUInt8(o.s, 5);\n            buf.writeUInt8(o.v, 6);\n        } else {\n            buf.writeUInt16BE(0, 3);\n            buf.writeUInt8(255, 5); //fixed ?\n            buf.writeUInt8(255, 6); //fixed ?\n        }\n        return buf.toString('hex');\n    },\n    ENUMHIGHGOODLOW: function (value) {\n        // transforms 'LOW'/'GOOD'/'HIGH' to string '0'/'1'/'2'\n        // it|en: can be localized for internationalization\n        // required by switch\n        if ((value == 0) || (value == null) || (value.toUpperCase() === \"LOW\") || (value.toUpperCase() === \"BASSA\"))\n            return \"0\";\n        if ((value.toUpperCase() === \"HIGH\") || (value == 2) || (value.toUpperCase() === \"ALTA\"))\n            return \"2\";\n        return \"1\";\n    },\n    RECMODE: function (value) {\n        // transforms 'continuous'/'events' to string '1'/'2'\n        // it|en: can be localized for internationalization\n        // required by switch\n        if ((value == 1) || (value.toUpperCase() === \"EVENTS\") || (value.toUpperCase() === \"EVENTI\"))\n            return \"1\";\n        return \"2\";\n    },\n    STRUCTINCH: function (value) {\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        var buf = Buffer.alloc(3);\n        buf.writeUInt8((o.inching) ? 1 : 0, 0);\n        buf.writeUInt16BE(o.delay, 1);\n        return buf.toString('base64');\n    },\n\n    STRUCTRAND: function (value) {\n        function hmTomin(hm) { // local function\n            pieces = hm.split(':');\n            return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n        }\n        function dayscode(val) {\n            result = 0;\n            mask = 1;\n            for (var i = 0; i < 7; i++) {\n                result |= (val.charAt(i) == '-') ? 0 : mask;\n                mask = mask << 1;\n            }\n            return (result);\n        }\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        var buf = Buffer.alloc(6 * o.length);\n        for (let i = 0; i < o.length; i++) {\n            buf.writeUInt8((o[i].active) ? 1 : 0, i * 6 + 0);\n            buf.writeUInt8(dayscode(o[i].days), i * 6 + 1);\n            buf.writeUInt16BE(hmTomin(o[i].start), i * 6 + 2);\n            buf.writeUInt16BE(hmTomin(o[i].end), i * 6 + 4);\n        }\n        return buf.toString('base64');\n    },\n\n    STRUCTREPEAT: function (value) {\n        function hmTomin(hm) { // local function\n            pieces = hm.split(':');\n            return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n        }\n        function dayscode(val) {\n            result = 0;\n            mask = 1;\n            for (var i = 0; i < 7; i++) {\n                result |= (val.charAt(i) == '-') ? 0 : mask;\n                mask = mask << 1;\n            }\n            return (result);\n        }\n\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        var buf = Buffer.alloc(10 * o.length);\n        for (let i = 0; i < o.length; i++) {\n            buf.writeUInt8((o[i].active) ? 1 : 0, i * 10 + 0);\n            buf.writeUInt8(dayscode(o[i].days), i * 10 + 1);\n            buf.writeUInt16BE(hmTomin(o[i].start), i * 10 + 2);\n            buf.writeUInt16BE(hmTomin(o[i].end), i * 10 + 4);\n            buf.writeUInt16BE(hmTomin(o[i].on), i * 10 + 6);\n            buf.writeUInt16BE(hmTomin(o[i].off), i * 10 + 8);\n        }\n        return buf.toString('base64');\n    },\n\n    SDSPACES: function (value) {\n        node.warn(\"ERROR: SDSPACES only decode()\")\n        return (value);\n    }\n\n};\n// -------------------------------------------------- do not change\n\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n        var func = new Function(wrap(obj[fname])); // ignore the node-red ⚠ warning\n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\n// true if device is a real device (virtual == cid exists)\nfunction _isreal(odev) {\n    return (odev.cid === undefined);\n}\n\n// returns deviceId (real) or cid (virtual), never fails\nfunction _getID(odev) {\n    return (odev.cid === undefined ? odev.id : odev.cid);\n}\n\n// true if is a GET command  (GET == msg.payload.value not exists)\nfunction _isget(mx) {\n    return (mx.payload.value === undefined);\n}\n\n// true if is a SET command  (SET == msg.value  exists)\nfunction _isset(mx) {\n    return ((mx.payload.property) && (mx.payload.value !== undefined));\n}\n\n\n// returns now(), formatted for mySQL, never fails\nfunction _mySQLdatetime() {\n    //datetime format for mySQL: '2020-12-18 20:45:02'\n    // using 'sv' for date format (but local timezone)\n    return (new Date().toLocaleString('sv'));\n}\n\n// For DB output, object/string\nfunction formatData(data) {\n    if (data == null)\n        return 'NULL';\n    var clean = JSON.stringify(data);\n    if (clean[0] === '\"')\n        clean = clean.substring(1).slice(0, -1);\n    //    return clean.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n    //    return clean.replace(/'/g, '\\\\x27');\n    return clean.replace(/'/g, \"\\\\'\");\n}\n\n// For DB output, string\nfunction formatName(data) {\n    if (data == null)\n        return 'NULL';\n    //    return data.replace(/'/g, '&#39;');  // sigle quotes are dangerous in sql\n    //    return data.replace(/'/g, '\\\\x27');\n    return data.toString().replace(/'/g, \"\\\\'\");\n}\n\nfunction _getHome() {\n    let netmap = global.get(\"remotemap\");\n    return (netmap.itself);\n}\n\n// ==============================  main function\n\nvar req = {};\nvar warn = null;\nvar query = {};\n//\n//---------------------- some assert\n\nif ((!msg.payload)) {\n    node.warn([\"ASSERT fail: msg.payload must exist.\", msg]);\n    return [null];\n}\n\nif ((msg.payload.property !== undefined) && (typeof(msg.payload.property) !== \"string\")) {\n    node.warn([\"ASSERT fail: msg.payload.property, if it exists, must be a string.\", msg]);\n    return [null];\n}\n\n// fake remote\nif (msg.payload.remote && (msg.payload.remote === _getHome())) {\n    delete msg.payload.remote;\n}\n\n// extra, local list, using REST\nif (!(msg.payload.remote) && !(msg.payload.device) && !(msg.payload.property) && !(msg.payload.value)){\n     msg.payload.remote = _getHome();\n }\n \n\nif ((!msg.payload.remote) && (!msg.payload.device)) {\n    node.warn([\"ASSERT fail: msg.payload.device must exist in local.\", msg]);\n    return [null];\n}\n\n// ---------------- expand messages for remote\n\nif (msg.payload.remote) {\n    let dx = msg.payload;\n    msg.payload = {};\n    msg.payload.value = dx;\n    msg.payload.device = \"_system\";\n    msg.payload.property = \"_proxy\";\n    \n//    node.warn([\"remote post \",msg]) ;\n}\n// -----------------------  struff: msg normalization\n    var alld = global.get(\"alldevices\");\n    const PSEUDODP = alld.__pseudodp;\n    var o = _callJSONMethod(alld, \"__getODev\", msg.payload.device);\n    var p = _callJSONMethod(alld, \"__getODps\", o, msg.payload.property);\n    msg   = _callJSONMethod(alld, \"__normalize\", msg, o, p, PSEUDODP);\n    if (msg.error){\n        node.warn(msg.error);\n        return([null]);\n    }\n    if (msg.warning){\n        node.warn(msg.warning);\n        delete msg.warning;\n    }\n//   node.warn([\"std cmd normalized \",msg]) ;\n\n// -------------- encoding data on place (so also fake can use encode functions)\nvar uVal = null;\nif (msg.payload.value){\n    uVal = msg.payload.value;     // for DB\n    if(req.infodp !== \"multiple\") {   // multiple value MUST be encoded!\n        msg.payload.value  = _callJSONMethod(alld, \"__encodeValue\", msg.payload.value, p, dataencode);\n        if ( msg.payload.value && msg.payload.value.error){\n            node.warn(msg.payload.value.error);\n            return[null];\n            }\n        }        \n}\n// -------------- checks:\nvar myId = \"unique\";\nvar map = global.get(\"remotemap\");\nif ((map !== undefined) && (map.itself !== undefined))\n    myId = map.itself;\n\n// ------------   test: device connected ?\nvar cnx = _callJSONMethod(alld, \"__getConnectName\", o);\nvar dnx = _callJSONMethod(alld, \"__getDevName\", o);\n\nif (cnx !== undefined) {\n//  property in PSEUDODP: can be used on disconnected devices  \n    if ((msg.payload.property !== undefined) && (msg.infodp) && ! PSEUDODP.includes(msg.infodp.toUpperCase())) {\n        var tuyastatus = global.get(\"tuyastatus\")\n            if ((typeof tuyastatus[cnx] !== 'undefined') &&\n                (typeof tuyastatus[cnx][\"_connected\"] !== 'undefined') &&\n                (tuyastatus[cnx][\"_connected\"] === false)) {\n                node.warn(\"WARNING: Operation not performed: '\" + cnx + \"' is not connected.\");\n                return ([null]);\n                }\n        }\n} else {\n    node.warn(\"ERROR: add to 'alldevices' the gateway '\" + o.gateway + \"' (used by '\" + dnx + \"')\");\n    return [null];\n}\n// ----  update structures\nreq[\"payload\"] = {};\nreq[\"to\"]   = msg.to;\nreq[\"infodp\"] = msg.infodp;\nquery[\"to\"] = msg.to;\nquery[\"infodp\"] = msg.infodp;\n\n// -------------- set default device capabilities\nvar cap;\nif (typeof o.capability !== 'undefined')\n    cap = Array.from(o.capability);\nif ((cap === undefined) || (cap.length < 1))\n    cap = [\"ALL\"]; // the default is ALL\n    \nif (p == undefined)  {\n   p = {\n       dp :  msg.infondo,\n       };\n    }  \n    \nvar capp =  \"RW\";\nif (typeof( p.capability)  === \"string\")\n    capp =  p.capability;\n\n// =============================== SKIP dp:  no capabilities, no trace, separate output\nif (capp === \"SKIP\") {\n    // creates response\n    var outMsg = {\n        \"from\": msg.toDev,\n        \"payload\": {\n            \"deviceId\": msg.toDev,\n            \"data\": {\n                \"t\": Math.floor(Date.now() / 1000),\n                \"dps\": {\n                    [p.dp]: msg.payload.value\n                }\n            }\n        }\n    };\n if (o.cid !== undefined)   \n       outMsg.payload.data.cid = o.cid;\n    return [null, null, null, null, outMsg];\n} \n\n//====================== fake devices: test device capabilities, warn message and DB update only, separate output\nif (alld.fake.includes(o)) {\n    query.topic = \" INSERT INTO `messages` (`timestamp`, `daemon`, `action`, `device-id`, `device-name`, `dps`, `dp-name`, `data`, `value`) \";\n    query.topic += \" VALUES ('\" + _mySQLdatetime() + \"', '\" + myId + \"' ,'TX', '\" + _getID(o) + \"', '\" + formatName(msg.payload.device) + \"','\" + msg.infodp + \"', '\" + formatName(msg.payload.property) + \"', \" + (_isset(msg) ? \"'\" + formatData(msg.payload.value) + \"'\" : \"NULL\") + \", \" + (_isset(msg) ? \"'\" + formatData(uVal) + \"'\" : \"NULL\") + \" );\";\n    // the warning message\n          warn = {\n                payload: null,\n                to     : null,\n                infodp : null\n              };\n    // special process for remote commands (_system/_proxy):\n    if ((msg.to === \"_system\") && ( msg.infodp === \"_proxy\") && (msg.payload.value.device == undefined)){  // is LIST\n                  warn = {payload : msg.payload.value.remote+\": TX: GET device LIST\",\n                          to: '_system',      // dummy\n                          infodp: \"LIST\" };  // dummy, to not do error\n         node.send([null, null, warn, null]); \n       } else\n    if ((msg.to === \"_system\") && ( msg.infodp === \"_proxy\")){  // no LIST\n        //  normalize remote msg\n        let ro = _callJSONMethod(alld, \"__getODev\", msg.payload.value.device);\n        let rp = _callJSONMethod(alld, \"__getODps\", ro, msg.payload.value.property);\n       let rmsg = _callJSONMethod(alld, \"__normalize\", {payload: msg.payload.value}, ro, rp, PSEUDODP);\n      if (rmsg.error){\n            node.warn(rmsg.error);\n            return([null]);\n        }\n        if (rmsg.warning){\n            node.warn(rmsg.warning);\n            delete rmsg.warning;\n        }\n        \n        warn.to     =  rmsg.to;\n        warn.infodp =  rmsg.infodp;\n      // ----------------- info for remote\n      if  (_isset(rmsg)){ \n         if (  rmsg.infodp && ( rmsg.infodp.toUpperCase() === \"MULTIPLE\")) {\n       //           warn.payload = [msg.payload.value.remote+\": TX: SET MULTIPLE '\" + rmsg.payload.device + \"'/'\" + rmsg.payload.property  + \"'\", rmsg.payload.value];\n                node.warn(\"ERROR: remote MULTIPLE commands not allowed.\",msg);\n                return [null];\n            } else {  // is SET\n                  warn.payload = [msg.payload.value.remote+\": TX: SET '\" + rmsg.payload.device + \"'/'\" + rmsg.payload.property  + \"'\", rmsg.payload.value];\n            }\n        } else {\n             if ( rmsg.infodp && (rmsg.infodp.toUpperCase() === \"SCHEMA\")) { // is get schema\n                  warn.payload =  [msg.payload.value.remote+\": TX: GET SCHEMA '\" + rmsg.payload.device, msg];\n             } else { // is GET\n                  warn.payload =  msg.payload.value.remote+\": TX: GET '\" + rmsg.payload.device+ \"'/'\" + rmsg.payload.property  + \"'\";\n                  }\n         }\n         \n        node.send([null, null, warn, null]); \n     } // ends _system/proxy\n     \n     \n     // continue,  is local\n        warn.to     =  msg.to;\n        warn.infodp =  msg.infodp;\n\n    if (_isset(msg)) {\n        if ( msg.infodp.toUpperCase() === \"MULTIPLE\") {\n            if (!(cap.includes(\"MULTIPLE\") || cap.includes(\"ALL\"))) {\n                node.warn(\"ERROR: MULTIPLE commands not allowed by the fake '\" + msg.payload.device + \"'\");\n                return [null];\n            }\n            warn.payload = [\"TX: SET MULTIPLE: fake '\" + msg.payload.device + \"'\", msg.payload.value];\n        } else {\n            if (!(cap.includes(\"SET\") || cap.includes(\"ALL\"))) {\n                node.warn(\"ERROR: SET commands not allowed by the fake  '\" + msg.payload.device + \"'\");\n                return [null];\n            }\n              warn.payload =[\"TX: SET fake '\" + msg.payload.device + \"'/'\" + msg.payload.property + \"'\", msg.payload.value];\n        }\n    } else { // a GET\n        if (msg.infodp.toUpperCase() === \"SCHEMA\") { // is get schema\n            if (!(cap.includes(\"SCHEMA\") || cap.includes(\"ALL\"))) {\n                node.warn(\"ERROR: SCHEMA commands not allowed by  '\" + msg.payload.device + \"'\");\n                return [null];\n            }\n            warn.payload = \"TX: GET SCHEMA: fake '\" + msg.payload.device + \"'\";\n        } else {\n            if (!(cap.includes(\"GET\") || cap.includes(\"ALL\"))) {\n                node.warn(\"ERROR: GET commands not allowed by the fake '\" + msg.payload.device + \"'\");\n                return [null];\n            }\n             warn.payload = \"TX: GET fake '\" + msg.payload.device + \"'/'\" + msg.payload.property + \"'\";\n        }\n      \n    } // ends GET\n    // outputs: tuya/fake/info/db/skip\n    return [null, msg, warn, query];\n} //--------------------------- end fake\n\n//====================================== general request\n\nreq[\"toDev\"]   = msg.toDev;\nreq.topic = \"msg for \" + msg.payload.device;\n\nif (cap.includes(\"NONE\")) {\n    node.warn(\"ERROR: GET/SET operations not allowed '\" + msg.payload.device + \"' is not accessible by user.\");\n    return [null];\n}\n\n// TEST for REFRESH\nif(( req.infodp  === \"_refresh\") ||( req.infodp  === \"_fastRate\")) {  // pseudoDP for REFRESH\n       if (!(cap.includes(\"REFRESH\") || cap.includes(\"ALL\"))) {\n           node.warn(\"ERROR: REFRESH not allowed by the '\" + msg.payload.device + \"'\");\n           return [null];\n       }\n}\n// ----------------------- SCHEMA + GET\nif (_isget(msg)) {\n    req.payload.operation = \"GET\";\n    if (msg.infodp === \"schema\") // is get schema\n        if (cap.includes(\"SCHEMA\") || cap.includes(\"ALL\")) {\n            req.payload.schema = true;\n            query.topic = \" INSERT INTO `messages` (`timestamp`, `daemon`, `action`, `device-id`, `device-name`, `dps`, `dp-name` )\";\n            query.topic += \" VALUES ('\" + _mySQLdatetime() + \"','\" + myId + \"', 'TX', '\" + msg.to + \"', '\" + formatName(msg.payload.device) + \"','SCHEMA','SCHEMA') ;\";\n            query[\"payload\"] = {\n                deviceId: msg.to\n            };\n            return ([req, null, {\n                        payload: \"TX: SCHEMA from '\" + msg.payload.device + \"'\",\n                        to: msg.to,\n                        infodp: msg.infodp\n                    }, query]);\n        } else {\n            node.warn(\"ERROR: SCHEMA not allowed by the '\" + msg.payload.device + \"'\");\n            return [null, null, null, null];\n        } // SCHEMA ends\n    //\n    if (!(cap.includes(\"GET\") || cap.includes(\"ALL\"))) {\n        node.warn(\"ERROR: GET commands not allowed by the '\" + msg.payload.device + \"'\");\n        return [null, null, null, null];\n    } \n   req.payload.dps =   msg.infodp;\n} // ----------------- GET ready\n\nif (_isset(msg)) {   //-------------------- MULTIPLE + SET\n    if (msg.infodp.toUpperCase()  === \"MULTIPLE\")\n        if (cap.includes(\"MULTIPLE\") || cap.includes(\"ALL\")) {\n            req.payload.multiple = true;\n            try {\n                if (typeof(msg.payload.value) === 'string')\n                    req.payload.data = JSON.parse(msg.payload.value);\n                else\n                    req.payload.data = msg.payload.value;\n            } catch (error) {\n                node.warn(\"ERROR: MULTIPLE bad value (\" + msg.payload.device + \") \" + error);\n            }\n            //\n            query.topic = \" INSERT INTO `messages` (`timestamp`, `daemon`, `action`,`device-id`, `device-name`, `dps`, `dp-name`, `data`)\";\n            query.topic += \" VALUES ('\" + _mySQLdatetime() + \"', '\" + myId + \"', 'TX', '\" + _getID(o) + \"', '\" + formatName(msg.payload.device) + \"','MULTIPLE','MULTIPLE', '\" + formatData(msg.payload.value) + \"') ;\";\n            query[\"payload\"] = {\n                deviceId: msg.to\n            };\n            return ([req, null, {\n                        payload: [\"TX MULTIPLE: to '\" + msg.payload.device + \"': \", msg.payload.value],\n                        to: req.to,\n                        infodp: req.infodp\n                    }, query]);\n        } else {\n            node.warn(\"ERROR: MULTIPLE SET not allowed by the '\" + msg.payload.device + \"'\");\n            return [null, null, null, null];\n        } // ------ MULTIPLE ends\n    //\n    if (!(cap.includes(\"SET\") || cap.includes(\"ALL\"))) {\n        node.warn(\"ERROR: SET commands not allowed by the '\" + msg.payload.device + \"'\");\n        return [null, null, null, null];\n    }\n\nreq.payload.dps = msg.infodp.toString(); // dps always string: \"101\" or \"_connected\"\nreq.payload.set = msg.payload.value;\n}  //  --------------------  SET ends\n\n//\nswitch (capp) {\n    //  \"RW,WW,GW,RO,WO,TRG,PUSH,SKIP,UNK,NULL\",\ncase \"UNK\":\ncase \"RW\":  // ok, nothing to do\n     break;\ncase \"PUSH\":\n    node.warn(\"ERROR: Can not SET/GET the 'PUSH' DP '\" + msg.payload.device + '\".\"' + msg.payload.property + \"'\");\n    return [null, null, null, null];\ncase \"RO\":\n    if (_isset(msg)) {\n        node.warn(\"ERROR: Can not SET the Read Only DP '\" + msg.payload.device + '\".\"' + msg.payload.property + \"'\");\n        return [null, null, null, null];\n    }\n    break;\ncase \"WO\":\n    if (_isget(msg)) {\n        node.warn(\"ERROR: Can not GET the 'WO' DP '\" + msg.payload.device + '\".\"' + msg.payload.property + \"'\");\n        return [null, null, null, null];\n        }\n    if (msg.payload.value === null) {\n            node.warn(\"ERROR: Can not use 'SET:null' for 'WO' DP '\" + msg.payload.device + '\".\"' + msg.payload.property + \"'\");\n            return [null, null, null, null];\n        }\n    break;\ncase \"GW\":\n    if (_isset(msg)) {\n        node.warn(\"ERROR: Can not SET the 'GW' DP '\" + msg.payload.device + '\".\"' + msg.payload.property + \"'\");\n        return [null, null, null, null];\n    }\n    // transforms GET in SET:null\n    delete req.payload.operation;\n    req.payload.set = null;\n    break;\ncase \"WW\":\n    if (_isget(msg)) {\n      // transforms GET in SET:null\n      delete req.payload.operation;\n      req.payload.set = null;\n    }\n    break;\ncase \"TRG\":\n    node.warn(\"ERROR: '\" + msg.payload.device + '\".\"' + msg.payload.property + \"' has 'TRG' capability\");\n    return [null, null, null, null];\ncase \"SKIP\":\n  return [null, null, null, null];\ndefault:  \n    node.warn(\"ERROR: unknown capability for '\" + msg.payload.device + '\".\"' + msg.payload.property );\n    return [null, null, null, null];\n}\n\n// outputs: tuya/fake/info/db\n// builds the DB  log\nquery.topic = \" INSERT INTO `messages` (`timestamp`, `daemon`, `action`, `device-id`, `device-name`, `dps`, `dp-name`, `data`, `value`) \";\nquery.topic += \" VALUES ('\" + _mySQLdatetime() + \"','\" + myId + \"', 'TX', '\" + _getID(o) + \"', '\" + formatName(msg.payload.device) + \"','\" + req.payload.dps + \"', '\" + formatName(msg.payload.property) + \"', \" + (_isset(msg) ? \"'\" + formatData(req.payload.set) + \"'\" : \"NULL\") + \", \" + (_isset(msg) ? \"'\" + formatData(uVal) + \"'\" : \"NULL\") + \" );\";\n\n// the warning message\nif (_isset(msg))\n    warn = {\n        payload: [\"TX SET: device '\" + msg.payload.device + \"'/'\" + msg.payload.property + \"'\", msg.payload.value],\n        to: msg.to,\n        infodp: msg.infodp\n    };\nelse\n    warn = {\n        payload: \"TX GET: device '\" + msg.payload.device + \"'/'\" + msg.payload.property + \"'\",\n        to: msg.to,\n        infodp: msg.infodp\n    };\nreturn ([req, null, warn, query]);\n","outputs":5,"noerr":0,"initialize":"","finalize":"","x":450,"y":880,"wires":[["4b771bf3.b8cef4"],["18817677.061b9a","7d976f84.81d9a"],["8792104e.e64d4"],["70d88fb4.7fcc2"],["fe1a20ab.104ce"]],"outputLabels":["tuya","fake","info","DB","skip"],"info":"CUSTOMIZATION:\n\nEdit the code to add a custom encode function.\n\nmore: \n2. add the same custom encode function to the 'FastFormat' node\n1. add the dual custom decode function to the 'OUT data process' node\n3. add the CODENAME in the `tuyahome.lookupdecode` table."},{"id":"2ec83963.a7d146","type":"link out","z":"173260fb.d021ff","name":"to logging","links":["9fe80f7e.f3f7e"],"x":1475,"y":360,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"d4a32280.a4dc8","type":"switch","z":"173260fb.d021ff","name":"*device selector","property":"toDev","propertyType":"msg","rules":[{"t":"eq","v":"bf8c4fd0c03067079cplb4","vt":"str"},{"t":"eq","v":"bfb073b1b789b5994cro7p","vt":"str"},{"t":"eq","v":"56685573d8bfc05082e6","vt":"str"},{"t":"eq","v":"56685573d8bfc0508488","vt":"str"},{"t":"eq","v":"56685573d8bfc0508837","vt":"str"},{"t":"eq","v":"554301602cf4325eae00","vt":"str"},{"t":"eq","v":"bf0b2ef30ffb476aa8ngzw","vt":"str"},{"t":"eq","v":"08435372600194fe37c8","vt":"str"},{"t":"eq","v":"bfbe31dc672657857cxsi0","vt":"str"},{"t":"eq","v":"bfa355aa196ae5975cy6ii","vt":"str"},{"t":"eq","v":"bfa9c64e128b39eddcgwyt","vt":"str"},{"t":"eq","v":"bfa1bdeb107d379fbckkwv","vt":"str"},{"t":"eq","v":"42027807d8bfc0c5831e","vt":"str"},{"t":"eq","v":"3613666124a1600db127","vt":"str"},{"t":"eq","v":"486441603c6105ca6f51","vt":"str"},{"t":"eq","v":"bf94066e80ba060a04vmxi","vt":"str"},{"t":"eq","v":"sonoff001","vt":"str"}],"checkall":"true","repair":false,"outputs":17,"x":740,"y":380,"wires":[["305e7686.63b0fa"],["dfd320c0.b4f74"],["5c8eb6e4.500348"],["e543af34.b2468"],["ba1d97f9.86c698"],["5a17a058.f17be"],["b7a9fedf.ac7dd"],["fdc6a9ae.1533a8"],["61c5fb6c.c4fad4"],["3db19556.7e04fa"],["a9d13fa.6649ec"],["cb5af4dc.7cb258"],["12896b89.d95c84"],["436ff47.238370c"],["2b66a27e.d6726e"],["3d5897cf.378f68"],["c4463434.4fd7b8"]],"info":"CUSTOMIZATION:\n\n- For a new device\n    - Add one output\n    - Add a new rule on msg.toDev, using the deviceID\n\nsee: [Howto: add a new device to tuyaDAEMON](https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON)"},{"id":"8a1da02d.424ae","type":"link in","z":"173260fb.d021ff","name":"std_cmd","links":["12227f5e.ddb0d1","1782306c.d003c","1e5c8c33.f6d8a4","270607f1.95ddd8","2abb8b42.fb0014","2e0b9f99.da3a5","2ebe64d5.26754c","3332c2d3.f540ae","37cf409a.4d0b5","4399bd03.cfe4e4","58c718a1.bbd748","6ebd4962.eb72d8","78b729bf.554958","7ab2060b.16fd58","7c949bb.9267764","7d098f27.1bff7","881bf4dd.364008","92960929.5eae58","9e7acf3.31b0c3","a838f77b.9166c8","aa325e28.91322","b4d2d9e.ab5fb28","b741480f.454488","beb91b.bdf6e6e8","c2eda0a.64cd86","c6eec3b9.38b0b","d05feec8.64e4e","de64614.cd6d8a","f302b04b.6478b","fb2a9b8.38c9068","fc6aa253.9d063","fed740ad.b1ac2","f260f4ac.978c98","dbaa0d27.77ed5","aa615c60.56ca4"],"x":200,"y":880,"wires":[["c991322e.a484e"]],"l":true,"info":"Main entry point for commands to devices.\n\nFor a great incapsulation, application flows can use only `usr-device-name`, `usr-property-name` and `usr-decoded-data`, as defined in [global.alldevices.](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices) \n\n`msg.payload` for **SET** command (set device status or triggers an action)\n````\n{  \"remote\"  : undefined|`SVRxxx`,        //  remote tuyaDEAMON ID, optional: see global.remotemap. \n   \"device\"  : `dev-usr`|`cid`|`id`,      //  device-name.\n   \"property\": `dp-usr`|`pseudoDP`|`dp`,  //  propery-name \n   \"value\"   : `any`   }                  //  uncoded value (see alldevice: 'type' and 'typefiel')\n````\n\n`msg.payload` for **GET** command (asks the device or get it from **global.tuyastatus** ):\n````\n{  \"remote\"  : undefined|`SVRxxx`,        //  remote tuyaDEAMON ID, optional: see global.remotemap. \n   \"device\"  : `dev-usr`|`cid`|`id`,      //  device-name.\n   \"property\": `dp-usr`|`pseudoDP`|`dp`}  //  propery-name \n````\n`msg.payload` for **GET schema** command (asks the device or get it from **global.tuyastatus** ):\n````\n{  \"remote\"  : undefined|`SVRxxx`,    //  remote tuyaDEAMON ID, optional: see global.remotemap. \n   \"device\"  : `dev-usr`|`cid`|`id` } //  device-name.\n````\n`msg.payload` for **device LIST** from remote tuyaDAEMON:\n````\n{  \"remote\"  : `SVRxxx`,              //  remote tuyaDEAMON ID: see global.remotemap. \n````\n\n`msg.payload` for **SET multiple** command (_deprecated because uses dps index and coded data_):\n````\n{  \"remote\"  : undefined|`SVRxxx`,       //  remote tuyaDEAMON ID, optional: see global.remotemap. \n   \"device\"  : `dev-usr`|`cid`|`id`,     //  device-name.\n   \"property\": `MULTIPLE`,               //  pseudoOP\n   \"value\"   : {dp1:val1, dp2:val2...}}  //  coded values \n````\n\n\n**Commands handling**\n- Others entry points: 'Fast_cmds' (no logTX, std msg), 'Fake_cmds_IN' (no logTX, normalized msg), 'low_level_in' (no logTX, device msg), 'share_in' (no logTX, share msg).\n- See [pseudoDP](https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#pseudodp) \n- In general, **tuyaDEAMON CORE** send ALL commands for real and virtual devices.\n- The commands for a _fake devices_ are available, in normalized form, from the 'Fake cmds' node, so they can be processed by related **node-red** flows.\n\n\n"},{"id":"cff32cc3.68b48","type":"comment","z":"173260fb.d021ff","name":"OUT msg process","info":"_tuyaDAEMON process chain for messages coming from all device._\n\nInput: msg from any `smart-tuya-device` node or internally generated.\n\nOuput: \n  - the global.tuyastatus object is updated.\n  - a log of every received data is stored in the 'messages' DB table.\n  - info, trace and warning messages are output on the debug pad.\n  \nThe user can control the info and trace messages and select the stored records.","x":210,"y":1120,"wires":[]},{"id":"305e7686.63b0fa","type":"link out","z":"173260fb.d021ff","name":"to triggers.tuya_bridge_IN","links":["69321d9a.30b7d4"],"x":1075,"y":100,"wires":[],"icon":"node-red/arrow-in.svg"},{"id":"bc933c53.b4bd9","type":"debug","z":"173260fb.d021ff","d":true,"name":"*trace: msg OUT from all devices","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1380,"y":1000,"wires":[],"info":"CUSTOMIZATION\n\n- Enable to see in the debug pad all msg sended from all devices.\n- Normal use: disabled"},{"id":"b25c688d.705df8","type":"link in","z":"173260fb.d021ff","name":"low_level_IN","links":["3a1df4f8.435cec","756a073a.e295b8"],"x":250,"y":600,"wires":[["4b771bf3.b8cef4"]],"l":true,"info":"Low level entry point, payload is send directly to `tuya-smart-device` node, no log\nFor test, extensions etc.\n\nIN device messages (commands):\n \n SET single\n ````\n      {\n      \"toDev\":\"60a823fffe****\",  // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n      // virtual devices, add cid:    \"devId\": \"60a453fffe*****\",\n          \"dps\":103,\n          \"set\":220  // BOOLEAN, INT/ENUM, STRING      \n          }\n      }\n````\n SET multiple\n````\n      {\n      \"toDev\":\"60a823fff*****\",  // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n      // virtual devices, add cid:    \"devId\": \"60a453fffe******\" and to = gatewayID\n          \"multiple\":true,\n          \"data\": {\n             103:220  // dps:value \n             }\n          }\n      }\n````\n\n GET single\n````\n      {\n      \"toDev\":\"60a823fff******\",  // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n    // virtual devices, add cid:    \"devId\": \"60a453fffe*******\",\n          \"operation\":\"GET\",\n          \"dps\":103\n          }\n      }\n````\nGET schema\n````\n      {\n      \"to\":\"60a823fff******\",  // tuyaDAEMON extrension: deviceID/gatewayID\n      \"payload\": {\n    // virtual devices, add cid:    \"devId\": \"60a453fff******\",\n          \"operation\":\"GET\",\n          \"schema\"=true\n          }\n      }\n````\n \n"},{"id":"e25f8186.a5e4d","type":"comment","z":"173260fb.d021ff","name":"global (alldevices, remotemap)","info":"","x":250,"y":960,"wires":[]},{"id":"5426b54d.99298c","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"*static retry","env":[{"name":"deviceId","value":"bfb073b1b789b5994cro7p","type":"str"},{"name":"deviceID","value":"bfb073b1b789b5994cro7p","type":"str"}],"x":1590,"y":140,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set property: deviceID (same value as `smart-tuya-device-node`)\n \nsee: [Howto: add a new device to tuyaDAEMON](https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON)"},{"id":"c6d3a5bb.1fa638","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"56685573d8bfc05082e6","type":"str"},{"name":"deviceID","value":"56685573d8bfc05082e6","type":"str"}],"x":1590,"y":180,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true."},{"id":"71d6faf9.5c3504","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"554301602cf4325eae00","type":"str"},{"name":"deviceID","value":"554301602cf4325eae00","type":"str"}],"x":1590,"y":300,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true."},{"id":"4854987c.2fea88","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"56685573d8bfc0508488","type":"str"}],"x":1590,"y":220,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true."},{"id":"d62f5a18.fe10b8","type":"debug","z":"173260fb.d021ff","name":"info","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1470,"y":1100,"wires":[]},{"id":"154e84b8.8c7b0b","type":"comment","z":"173260fb.d021ff","name":"Debug pad trace","info":"COSTOMIZATION:\n\n - Disable unwonted trace nodes.\n \n  \n - To filter only some info messages, modify the the code in function node: _'info messages filter'_ \n\n - To reduce the records sended to DB, edit the code in function nodes: _'* DB mux-filter'\n \n - Warn/ERROR messages are alway sended.\n \n \n \n","x":1340,"y":880,"wires":[]},{"id":"4170e71.70b8518","type":"file","z":"173260fb.d021ff","name":"*save path","filename":"D:\\xampp\\htdocs\\tuyadaemontoolkit\\devicedata\\alldevice.json","appendNewline":false,"createDir":true,"overwriteFile":"true","encoding":"utf8","x":390,"y":1000,"wires":[[]]},{"id":"7a540832.656648","type":"inject","z":"173260fb.d021ff","name":"SAVE ","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"$globalContext(\"alldevices\")\t","payloadType":"jsonata","x":210,"y":1000,"wires":[["4170e71.70b8518"]]},{"id":"81a9b329.092b1","type":"link out","z":"173260fb.d021ff","name":"low_level_OUT","links":["3baeae11.41ef52","5ba61f43.db9b9","52af620f.a7e1cc","fcc442c5.729a3","e11a7cec.3edf2"],"x":740,"y":1180,"wires":[],"l":true,"info":"Low level output, all messages as sended by devices.\n\nThe messages are unprocessed, directly from `tuya-smart-device` node. \n\n_Used by_:  `tuyaTRIGGERS.'event trigger'` node\n\n_See also_: `'to logging'` input link node for the OUT msg structure.\n\nOUT msg structures:\n\nexample: msg (real)\n ````\n        {\n        _msgid: \"12342f3fd.8697fc\"\n        _event: \"node:12343963.a7d846\"\n        payload: object\n           deviceId: \"123455aa196ae5975cy6ii\"\n           deviceName: \"*tuya_bridge\" \n           data: object\n              t: 1609234903  // timestamp, in seconds.\n              dps: object\n                 102: 1020   // array of dp:value\n        }\n```` \n\nexample msg: (virtual)\n````\n        {\n        _msgid: \"12346a44.e81238\"\n        payload: object\n           deviceId: \"123473b1b789b4994cro7p\"\n           deviceName: \"Zigbee Gateway\"\n           data: object\n              cid: \"12348d00856a1c15\"\n              t: 1609235292\n              dps: object\n                 102: 1020   // array of dp:value\n        }             \n````\n"},{"id":"f9a629eb.f4f498","type":"comment","z":"173260fb.d021ff","name":"tuyaDAEMON CORE v. 2.1","info":"\nsee [github documentation](https://github.com/msillano/tuyaDAEMON)","x":310,"y":260,"wires":[]},{"id":"81103bac.696bc8","type":"function","z":"173260fb.d021ff","name":"all: filter&update ","func":"// this node processes \"_connected\" event:\n//   - filters duplicated msgs\n//   - updates the global.tuyastatus\n//   - sends message to logging. \n//  note: logging processes for dp '_connected' is special: \n//    the 'dp' '_connected' it is not required in alldevices.\n//  You can add to some devices the dp='_connected' \n//    for special processing, e.g. 'share'.\n\n// stuff to access data\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname])); // ignore ⚠\n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\nvar alld = global.get(\"alldevices\");\nif (alld === undefined) return null;\n\ntuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined) return null;\n\n// local functions:\nvar CONN = \"_connected\";\n// access key\nvar oDev =     _callJSONMethod(alld, \"__getODev\", msg.payload.deviceId, \"real\");\nif (oDev === undefined) return null;\nvar dname =    _callJSONMethod(alld, \"__getDevName\", oDev);\nvar usrCon =   _callJSONMethod(alld, \"__getDpsName\", oDev, CONN);\n// testing:\nif( tuyastatus[dname] === undefined) tuyastatus[dname] = {};\nvar xdev = tuyastatus[dname];\nvar oldconnected = xdev[usrCon];\nvar nowconnected = msg.payload.data.dps._connected;\nif (nowconnected !== oldconnected) {\n        xdev[usrCon] = nowconnected;\n        global.set(\"tuyastatus\", tuyastatus);\n        return (msg);\n    }\nreturn (null);\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1940,"y":360,"wires":[["edf84736.d76338"]]},{"id":"2caa595d.2a0106","type":"function","z":"173260fb.d021ff","name":"*Info events filter","func":"// kills unwanted tuyaDEAMON info messages & MQTT\n// Simple case based only on device ID\n// You can add more tests, based on single data point dp (in msg.infodp)\nif((typeof(msg.to) !== \"string\") && (typeof(msg.from) !== \"string\") )\n         node.warn([\"ASSERT fail: in msg the to/from (string) must exist.\", msg]) ;   \nif(typeof(msg.infodp) !== \"string\")\n         node.warn([\"ASSERT fail: in msg the msg.infodp (string) must exist.\" , msg]) ;   \n\n\n// ==================== for EVENTS msg FROM devices\nswitch (msg.from){    \n    case \"bfa1bdeb107d379fbckkwv\":                 // watering switch   \n    case \"bfa9c64e128b39eddcgwyt\":                 // watering timer   \n       return null;     // killed\n    case \"bf8c4fd0c03067079cplb4\":                 // tuya bridge trigger\n         if (msg.infodp === \"7\") return(null);\n         break;\n   case \"_system\":\n        if (msg.infodp === \"_proxy\") return(null);   //  internal use: REMOTE commands \n        if (msg.infodp === \"_toLogging\") return(null);   //  internal use: REST remote echo\n        if (msg.infodp === \"_zeroTask\") return(null);   // fast benchmarks\n        break;\n\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1210,"y":1140,"wires":[["d62f5a18.fe10b8","9fe75b23.a05408"]],"info":"CUSTOMIZATION:\n\nFilter to reduce info messages on Debug pad.\n\n- On installation and test:\n  Best don't filer any message.\n- On production:\n  Better to filter not useful events.\n\n_________________________________\n  \nSee the example filter:\n \nTest can be done on \n       msg.from:            RX info, the deviceId\n       msg.to:              TX info, the deviceId\n       msg.infodp:          the dpId          \n  \n   "},{"id":"c90b7eb2.07595","type":"link in","z":"173260fb.d021ff","name":"more_devices_IN","links":["4fb32195.592ef","63e6d5d.0a5da2c"],"x":1655,"y":100,"wires":[["81103bac.696bc8"]],"icon":"node-red/arrow-in.svg"},{"id":"18817677.061b9a","type":"link out","z":"173260fb.d021ff","name":"fake_cmds ","links":["369ab28b.348ebe","580c2cc4.3ac424","b5aba5f4.6a3778","bf4e83f7.f5f21"],"x":730,"y":780,"wires":[],"icon":"node-red/arrow-in.svg","l":true,"info":"OUTPUT for commands to fake devices, unprocessed by tuyaDAEMON CORE.\nMessages are `normalizated` to speedup next elaborations:\n\nused to update `global.tuyastatus`:\n-   `msg.payload.device   = usr-dev-name|msg.to`\n-   `msg.payload.property = undef|usr-dp-name|msg.infodp`\n-   `msg.payload.value    = undef|any`  \n\nused as keys:\n-   `msg.to     = cid|deviceId`  (mandatory)\n-   `msg.infodp = dp|pseudoDP` (mandatory)\n-   `msg.toDev  = gatewayId|deviceId` (not in fake devices)\n\nrules:\n- pseudoDP are defined in `global.alldevices__pseododp` array.\n- SET: `value` = defined\n- GET: `value` = undefined\n- SCHEMA: `infodp`='schema', `property`=undefined, `value`=undefined\n\nrare in _fake devices_:\n- MULTIPLE: `infodp`='multiple', `property`='multiple', `value` = coded, sent 'as is' to device.\n\n"},{"id":"70d88fb4.7fcc2","type":"function","z":"173260fb.d021ff","name":"*DB mux-filter","func":"// CUSTOMIZATION\n\n// to filter and route data to 0..n DB\n// Example using 2 DB:  'local' and 'android'.\n// Any DB uses 2 nodes: 'log' (debug, DB: for usr DB commands) and 'no-log' (for std commands)\n// So 4 outputs:\n// 1: local, no-log\n// 2: local, log\n// 3: android, no-log\n// 4: android, log\n\n// Last selector: here ONLY messages for DB or error.\nif((typeof(msg.to) !== \"string\") && (typeof(msg.from) !== \"string\") )\n         node.warn([\"ASSERT fail: in DB msg to/from (string) must exist.\", msg]) ;   \nif(typeof(msg.infodp) !== \"string\")\n         node.warn([\"ASSERT fail: in DB msg.infodp (string) must exist.\" , msg]) ;   \nif(typeof(msg.topic) !== \"string\")\n         node.warn([\"ASSERT fail: in DB msg.topic (sql string) must exist.\" , msg]) ;   \n\n// ==================== for TX msg TO devices\nswitch (msg.to){    \n    case \"bfa1bdeb107d379fbckkwv\":     // watering switch: no record, only watering_sys   \n    case \"bfa9c64e128b39eddcgwyt\":     // watering timer : no record, only watering_sys  \n        return[null];    // killed\n\n    case \"_system\":                       \n       if (msg.infodp === \"_proxy\") return(null);   //  internal use: REMOTE commands\n       if (msg.infodp === \"_toLogging\") return([null]);   //  internal use REST remote echo\n       if (msg.infodp === \"_zeroTask\") \n                 return([null]);          // fast benchmarks, killed\n\n// HERE CUSTOM DB messages, to DB-log nodes:\n        if (msg.infodp === \"_sqlDBlocal\")\n                 return [null, msg];              // local, log\n        if (msg.infodp === \"_sqlDBandroid\") \n                 return [null, null, null, msg];  // android, log\n        break;\n}\n\n// ====================  for RX msg FROM devices\nswitch (msg.from){    \n   case \"bfa1bdeb107d379fbckkwv\":     // watering switch, only watering_sys   \n   case \"bfa9c64e128b39eddcgwyt\":     // watering timer, only watering_sys   \n       return[null];        // killed\n\n   case \"_system\":\n        if (msg.infodp === \"_exec\") \n             return([null]);          // can give problems with out data\n        break;\n\n   case \"_system\":\n        if (msg.infodp === \"_toLogging\") return([null]);   //  internal use REST remote echo\n        if (msg.infodp === \"_proxy\") return(null);   //  internal use: REMOTE commands\n        if (msg.infodp === \"_zeroTask\") \n             return([null]);          // fast benchmarks, killed\n        break;\n}\n\nreturn [msg];  // defaut: local, no-log","outputs":4,"noerr":0,"initialize":"","finalize":"","x":1200,"y":1280,"wires":[["74205825.bd5e98"],["1a711832.f93bb8"],["4ada67ea.91c738"],["46a8112c.cdbcf"]],"info":"CUSTOMIZATION:\n\nFilter to choose the DB server.\n_________________________________\n  \nSee the example filter:\n \nTest can be done on \n       msg.from:            RX info, the deviceId\n       msg.to:              TX info, the deviceId\n\n   "},{"id":"edf84736.d76338","type":"link out","z":"173260fb.d021ff","name":"to system.conn_ev_IN","links":["5ff0742e.cec73c","9fe80f7e.f3f7e"],"x":2055,"y":360,"wires":[],"icon":"node-red/arrow-in.svg","info":"TRIGGER internal/external.\n\nFired at any change of devices connection status.\nThis event is logged and fires an update of AC/LAN/AC properties in _system"},{"id":"fe1a20ab.104ce","type":"delay","z":"173260fb.d021ff","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1000","nbRateUnits":"10","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":470,"y":1180,"wires":[["81a9b329.092b1","d943c0e6.b7946","bc933c53.b4bd9"]]},{"id":"5777b120.3dc3e","type":"delay","z":"173260fb.d021ff","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"30","nbRateUnits":"10","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":460,"y":380,"wires":[["d4a32280.a4dc8","946d7931.c2a828"]]},{"id":"d6f44262.bcd7","type":"status","z":"173260fb.d021ff","name":"*All DB status","scope":["1a711832.f93bb8","4ada67ea.91c738","74205825.bd5e98","46a8112c.cdbcf"],"x":1510,"y":1460,"wires":[["b9b5886c.153d98"]]},{"id":"b9b5886c.153d98","type":"function","z":"173260fb.d021ff","name":"DB check","func":"// checks DB status\n// version 1.1 (use of _callJSONMethod)\n// ===================================== do not change\nPDB = \"_DBase\";\n//\nfunction _sendOUT(key, value) {\n    // builds a fake OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": \"_system\",\n            \"data\": {\n                \"dps\": {\n                    [key]: value\n                }\n            }\n        }\n    };\n    return newMsg;\n}\n\n// ---------------- main\n// catch bad\nif (msg.status === undefined) return null;\n//\nif(msg.status.text === undefined) return(null);\n//\nvar olddb =flow.get(PDB);\nvar newdb = ((msg.status.text == \"connected\") || (msg.status.text == \"OK\"));\nif  (olddb == newdb) return null;\n//\nflow.set(PDB, newdb);\n//\nif(newdb) {\n    node.status({\n        fill: \"green\",\n        shape: \"ring\",\n        text: \"DB connected\"\n    });\n    return (_sendOUT(PDB, true));\n} else {\n    node.status({\n        fill: \"red\",\n        shape: \"ring\",\n        text: \"DB disconnected\"\n    });\n    return (_sendOUT(PDB, false));\n}\nreturn null;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n// --------------- locals\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n        var func = new Function(wrap(obj[fname])); // ignore ⚠\n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\nPDB = \"_Dbase\";\n// ---------------- main\n// stuff to access data\nvar alld = global.get(\"alldevices\");\nif (alld === undefined)\n    return null;\n// find object dp\nvar oDev = _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\nvar sysDevName = _callJSONMethod(alld, \"__getDevName\", oDev);\nvar usrDB = _callJSONMethod(alld, \"__getDpsName\", oDev, PDB);\n//\ntuyastatus = global.get(\"tuyastatus\");\nif (tuyastatus === undefined)\n    tuyastatus = {};\nif (tuyastatus[sysDevName] === undefined)\n    tuyastatus[sysDevName] = {};\n// default\ntuyastatus[sysDevName][usrDB] = null;\n//\nnode.status({\n    fill: \"yellow\",\n    shape: \"dot\",\n    text: \"start\"\n});\nglobal.set(\"tuyastatus\", tuyastatus);\nflow.set(PDB, \"new\");\n","finalize":"","x":1740,"y":1460,"wires":[["d6451e16.628bb","6f287998.d91408"]]},{"id":"d6451e16.628bb","type":"link out","z":"173260fb.d021ff","name":"DB_ALARM","links":[],"x":1950,"y":1460,"wires":[],"l":true,"info":"TRIGGER for custom flows.\n\nFired at any change."},{"id":"c33e85bd.f37a08","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"bf0b2ef30ffb476aa8ngzw","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1590,"y":340,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true."},{"id":"181b544f.5bb98c","type":"http in","z":"173260fb.d021ff","name":"REST tuyaDAEMON","url":"/tuyaDAEMON","method":"get","upload":false,"swaggerDoc":"","x":230,"y":1360,"wires":[["6fe3ccb.d4ab534"]]},{"id":"e166ce71.eb209","type":"change","z":"173260fb.d021ff","name":"Set Headers","rules":[{"t":"set","p":"headers","pt":"msg","to":"{}","tot":"json"},{"t":"set","p":"headers.content-type","pt":"msg","to":"application/json","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1030,"y":1460,"wires":[["834eb8f4.e36dd8"]]},{"id":"834eb8f4.e36dd8","type":"http response","z":"173260fb.d021ff","name":"HTTP response","statusCode":"","headers":{},"x":1240,"y":1460,"wires":[]},{"id":"6fe3ccb.d4ab534","type":"function","z":"173260fb.d021ff","name":"interface","func":"//  for applications, fast processing, immediate answer.... \n//  Return JSON; data or status.\n//  GET, SCHEMA: solved from tuyastaus, returns data (not stored in log)\n//  SET, MULTIPLE: sended to tuyaDEAMON, returns 'status:sended' (stored in log)\n//-------------------------------- local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n   // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n   var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n   var func = new Function(wrap(obj[fname])); // ignore the node-red ⚠ warning\n   return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\nvar comm = {};\nvar tuyastatus = global.get(\"tuyastatus\");\n\nvar myId = \"unique\";\nvar map = global.get(\"remotemap\");\nif ((map !== undefined) &&  (map.itself !== undefined))  myId = map.itself;\n\n//---------------------- some assert\nif (!(msg.payload && msg.payload.remote_from && (msg.payload.remote_from!== myId ))) {\n    node.warn([\"ASSERT fail: msg.payload.remote_from  must exist !== itself\", msg]);\n//    return [null];\n}\n\ndelete msg.payload.remote;\n\n// ----------- is LIST\nif (!msg.payload.device ){     // devices list immediate\n             if (tuyastatus !== undefined) \n                 msg.payload[\"list\"] = Object.keys(tuyastatus);\n             msg.payload[\"remote_from\"] = myId; \n             let jdat2 = JSON.stringify(msg.payload);\n             msg.payload = jdat2;\n             return ([msg, null]);\n       }\n\n// -----------------------  struff: msg normalization\n    var alld = global.get(\"alldevices\");\n    const PSEUDODP = alld.__pseudodp;\n    var o = _callJSONMethod(alld, \"__getODev\", msg.payload.device);\n    var p = _callJSONMethod(alld, \"__getODps\", o, msg.payload.property);\n    msg = _callJSONMethod(alld, \"__normalize\", msg, o, p, PSEUDODP);\n    if (msg.error){\n        node.warn(msg.error);\n        return([msg, null]);\n    }\n    if (msg.warning){\n        node.warn(msg.warning);\n    }\n// node.warn([\"cmd normalized \",msg]) ;\n  comm.to = msg.to;\n  comm.infodp = msg.infodp;\n  comm['payload'] = msg.payload;\n  comm.payload.value = (comm.payload.value)?JSON.parse( msg.payload.value): undefined;\n\nif (msg.infodp === \"schema\") { // ok device field\n  //----- is SCHEMA\n         msg.payload['schema'] = tuyastatus[msg.payload.device];\n         msg.payload[\"remote_from\"] = myId; \n         let jdat2 = JSON.stringify(msg.payload);\n         msg.payload = jdat2;\n         return ([msg, null]);\n  }\n  \n// -------- is GET, read data from tuyastatus\nif (msg.payload.value === undefined) {\n  msg.payload[\"remote_from\"] = myId; \n  if (tuyastatus[msg.payload.device][msg.payload.property] !== undefined)  { \n         msg.payload['value'] = tuyastatus[msg.payload.device][msg.payload.property];\n         let jdat2 = JSON.stringify(msg.payload);\n         msg.payload = jdat2;\n         return ([msg, null]);\n         } else {\n         msg.payload['value'] = \"none\";\n         let jdat2 = JSON.stringify(msg.payload);\n         msg.payload = jdat2;\n         return ([msg, null]);\n         }\n} // end GET\n\nvar pseudoDP = PSEUDODP.includes(msg.infodp.toUpperCase());\n\n//--------- is SET, MULTIPLE, process it\nif  (((p !== undefined) || pseudoDP) && (msg.payload.value !== undefined)) { \n     node.send([null, comm]);  // to do cmd\n      \n     delete msg.payload.value;\n     msg.payload['status'] =  \"sent\";\n     let jdat2 = JSON.stringify(msg.payload);\n     msg.payload = jdat2;\n     return [msg, null, comm];  // to rest, to notify\n} // end SET\n\nreturn [msg, null];\n\n\n","outputs":3,"noerr":0,"initialize":"","finalize":"","x":680,"y":1360,"wires":[["e166ce71.eb209"],["58c718a1.bbd748"],["f1edf094.cfc34"]]},{"id":"58c718a1.bbd748","type":"link out","z":"173260fb.d021ff","name":"to std_cmd","links":["8a1da02d.424ae"],"x":855,"y":1440,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"b1eb4c66.e29de","type":"http in","z":"173260fb.d021ff","name":"REST tuyaDAEMONdebug","url":"/tuyaDAEMONdebug","method":"get","upload":false,"swaggerDoc":"","x":250,"y":1500,"wires":[["65eb2aa.067dfd4"]]},{"id":"65eb2aa.067dfd4","type":"function","z":"173260fb.d021ff","name":"rest_automata","func":"\n//  for debug, all request sended to devices,\n//  asyncronous, wait device answer or timout (set here and in external trigger node)\n//  Return JSON, data or status.\nvar timeout = 4; // in sec, less than 'REST timeout'  node\nvar restautoma = flow.get('restautoma');\nswitch (restautoma) {\ncase '_wait':\n//   node.warn(\"in warn\");\n   if ((msg.req !== undefined) && (msg.payload !== undefined))  { // HTTP message\n      if (msg.payload.device === undefined){     // back devices list immediate\n              // immediate answer\n             msg.payload = [];\n             var tuyastatus = global.get(\"tuyastatus\");\n             if (tuyastatus !== undefined) \n                 msg.payload = Object.keys(tuyastatus);\n            return ([null, msg]);\n       } else {            // send request, set timeout\n        var comm = {};\n        comm['payload'] = msg.payload;\n        flow.set('restautoma', msg);\n        flow.set('restt', Math.floor(Date.now() / 1000));\n        return ([comm, null]);\n      }\n   }\n\n   break;\ndefault:\n//  node.warn(\"in default\");\n   // uses payload.info in info messages\n   if (msg.info !== undefined)  {\n       if ((typeof restautoma === 'object') && (restautoma.req !== undefined) && (restautoma.payload.device !== undefined)){\n//          node.warn([\"from automa\",restautoma, msg]);\n         if (restautoma.payload.device === msg.info.device){\n          if ((restautoma.payload.property === undefined)&& (restautoma.payload.value === undefined)) {  // is schema, ok\n                  var tuystatus = global.get(\"tuyastatus\");\n                  restautoma.payload = JSON.stringify(tuystatus[restautoma.payload.device]);\n                  flow.set('restautoma', '_wait');\n                  return ([null, restautoma]);\n          }\n           if ((restautoma.payload.property == msg.info.property) || (restautoma.payload.property == msg.infodp) || (restautoma.payload.property === 'MULTIPLE')) {\n             var jdat = JSON.stringify(msg.info);\n             restautoma.payload = jdat;\n             flow.set('restautoma', '_wait');\n             return ([null, restautoma]);\n            }\n         }\n       }\n   }\n\n}\n\n// test timeout, if not wait\n\nif (restautoma !== '_wait') {\n//  node.warn(\"in timeout\");\n    var start = flow.get('restt');\n    if (((Math.floor(Date.now() / 1000)) - start) > timeout) { // OK exit for timeout\n        flow.set('restautoma', '_wait');\n        if ((typeof restautoma === 'object') && (restautoma.req !== undefined)) {  \n           restautoma.payload = { \"status\": \"request aborted for timeout\" };\n           return ([null, restautoma]);\n           }\n    }\n}\n\n//noting to do\nreturn ([null, null]);\n","outputs":2,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n flow.set ('restautoma', \"_wait\");","finalize":"","x":660,"y":1500,"wires":[["58c718a1.bbd748","f6a0c8d.8dbb038"],["e166ce71.eb209"]]},{"id":"f6a0c8d.8dbb038","type":"trigger","z":"173260fb.d021ff","name":"REST timeout 5s","op1":"test","op2":"test timeout","op1type":"str","op2type":"str","duration":"6","extend":false,"overrideDelay":false,"units":"s","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":850,"y":1540,"wires":[["65eb2aa.067dfd4"]]},{"id":"2e4937fc.2ef1f8","type":"link out","z":"173260fb.d021ff","name":"event OUT","links":["b8e273f8.d51a7"],"x":875,"y":1180,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"60906ab.8e27094","type":"comment","z":"173260fb.d021ff","name":"REST HTTP","info":"The **tuyaDAEMOM REST** is implemented using two interfaces, for different pourposes.\n\n1) **/tuyaDEAMON:** this is the production interface.\n\n2) **/tuyaDEAMONdebug:** this is the development interface.\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-REST","x":190,"y":1320,"wires":[]},{"id":"d943c0e6.b7946","type":"function","z":"173260fb.d021ff","name":"*check and kill answer ","func":"// ------------- check for ALL answers\n//input: device OUT msg (real)\n//  _msgid: \"1234f3fd.8477fc\"\n//  _event: \"node:1233963.a7d146\"\n//  payload: object\n//     deviceId: \"123455aa196ae5******\"\n//     deviceName: \"*tuya_bridge\" (tuya-node name, optional, not used)\n//     data: object\n//        t: 1609234903\n//        dps: object\n//           102: 1020\n//\n//input: device OUT msg (virtual)\n//   _msgid: \"d0b26a44.e81738\"\n//   payload: object\n//      deviceId: \"123473b1b786b59*******\"\n//      deviceName: \"Zigbee Gateway\"\n//      data: object\n//        cid: \"12358d00086a1c45\"\n//        t: 1609235292\n//        dps: object\n//           103: 19\n//\n\n//  detects some fatal errors in input message structure, here for convenience\nif (msg.payload.deviceId === undefined)  {\n   node.warn([\"ASSERT fail: in the answer the payload.deviceId must exist.\", msg]) ;   \n   return null;\n}\n\nif (msg.payload.data === undefined) {\n    node.warn([\"ASSERT fail: in the answer the payload.data is mandatory\", msg]);\n    return null;\n}\n\nif (typeof(msg.payload.data) === \"string\") return (msg); // error, but handled by \"OUT data process\" node.\n\n// ========================================================= KILL\n// some messages can be useless\n\n// the same 'Zigbee Gateway' is in many tuyaDAEMON instances.\n// To handle different virtual devices groups in different servers \n// the selection is on 'msg.payload.deviceId' and 'msg.payload.data.cid'   \nif((msg.payload.deviceId == \"bfb073b1b789b5994cro7p\") &&( msg.payload.data.cid === undefined))\n     return(null);\n     \nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":480,"y":1240,"wires":[["a878b58e.e4ea08"]],"info":"CUSTOMIZATION:\n\nTo filter the device responses (no INFO, no record in DB, no share action)\n_________________________________\n  \nSee the example filter:\n \nTest can be done on \n       msg.payload.deviceID:   the deviceId or gatewayId\n       msg.payload.data.cid:   the virtual device cid\n \n "},{"id":"de4b43ad.27e31","type":"catch","z":"173260fb.d021ff","name":"*catch device and LAN errors","scope":["dfd320c0.b4f74","e543af34.b2468","5c8eb6e4.500348","ba1d97f9.86c698","5a17a058.f17be","b7a9fedf.ac7dd","cb5af4dc.7cb258","fdc6a9ae.1533a8","61c5fb6c.c4fad4","3db19556.7e04fa","12896b89.d95c84","a9d13fa.6649ec","436ff47.238370c","a0d5012f.b2551","cb0e33e6.f0a6b"],"uncaught":false,"x":1320,"y":820,"wires":[[]],"info":"CUSTOMIZATION:\n\n- Adding a new device\n    Select the new tuya-smart-device node."},{"id":"668d3a7b.f2a8e4","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"bfa355aa196ae5975cy6ii","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1590,"y":460,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true."},{"id":"6a21e688.4e0838","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"bfbe31dc672657857cxsi0","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1590,"y":420,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true."},{"id":"e20004fc.2c23b8","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"08435372600194fe37c8","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1590,"y":380,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true."},{"id":"3667be8e.cb5972","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"bfa1bdeb107d379fbckkwv","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1590,"y":500,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true."},{"id":"e16b895d.8992a8","type":"config","z":"173260fb.d021ff","name":"*global","properties":[{"p":"alldevices","pt":"global","to":"{\"real\":[{\"id\":\"sonoff001\",\"name\":\"OzoneTimer-1\",\"power\":\"AC\",\"capability\":[\"SET\",\"GET\",\"REFRESH\"],\"dps\":[{\"dp\":\"_clock\",\"type\":\"string\"},{\"dp\":\"_count\",\"capability\":\"PUSH\"},{\"dp\":\"_countdown\",\"capability\":\"PUSH\"},{\"dp\":\"_end\",\"capability\":\"WO\"},{\"dp\":\"_go\",\"capability\":\"WO\"},{\"dp\":\"_info\",\"capability\":\"PUSH\"},{\"dp\":\"_led\",\"capability\":\"PUSH\"},{\"dp\":\"_mode\"},{\"dp\":\"_off\",\"capability\":\"WO\"},{\"dp\":\"_OFFtime\",\"type\":\"int\"},{\"dp\":\"_ONtime\",\"type\":\"int\"},{\"dp\":\"_PDM\",\"type\":\"int\"},{\"dp\":\"_pssw\",\"capability\":\"PUSH\"},{\"dp\":\"_refresh\",\"capability\":\"WO\"},{\"dp\":\"_refreshCycle\",\"type\":\"int\"},{\"dp\":\"_send\",\"capability\":\"WO\"},{\"dp\":\"_ssid\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":\"_startTime\",\"type\":\"string\"},{\"dp\":\"_switch\",\"capability\":\"PUSH\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":\"_timezone\",\"type\":\"int\"}]},{\"id\":\"486441603c6105ca6f51\",\"name\":\"AC meter\",\"power\":\"AC\",\"capability\":[\"ALL\",\"SET\",\"GET\",\"REFRESH\",\"SCHEMA\"],\"dps\":[{\"dp\":1,\"name\":\"switch\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":9,\"name\":\"countdown\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"},{\"dp\":18,\"name\":\"current\",\"capability\":\"PUSH\",\"type\":\"int\",\"comment_01\":\"Values: mA\"},{\"dp\":19,\"name\":\"power\",\"capability\":\"PUSH\",\"typefield\":\"BYTESMALLFLOAT\",\"comment_01\":\"Values: W * 10\"},{\"dp\":20,\"name\":\"voltage\",\"capability\":\"PUSH\",\"typefield\":\"BYTESMALLFLOAT\",\"comment_01\":\"Values: V*10\"},{\"dp\":101,\"name\":\"Energy\",\"capability\":\"PUSH\",\"typefield\":\"INTE2FLOAT\",\"comment_01\":\"Values: KWh *100\"}]},{\"name\":\"Wifi Plug\",\"id\":\"bf94066e80ba060a04vmxi\",\"power\":\"AC\",\"capability\":[\"REFRESH\",\"ALL\"],\"dps\":[{\"dp\":1,\"name\":\"switch\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":9,\"name\":\"countdown\",\"capability\":\"WW\",\"type\":\"int\"},{\"dp\":17,\"name\":\"unknown17\",\"capability\":\"WW\"},{\"dp\":18,\"name\":\"current\",\"capability\":\"GW\",\"type\":\"int\"},{\"dp\":19,\"name\":\"power\",\"capability\":\"GW\",\"typefield\":\"BYTESMALLFLOAT\"},{\"dp\":20,\"name\":\"voltage\",\"capability\":\"GW\",\"typefield\":\"BYTESMALLFLOAT\"},{\"dp\":21,\"name\":\"test flag\",\"capability\":\"WW\"},{\"dp\":22,\"name\":\"voltage coefficient\",\"capability\":\"WW\"},{\"dp\":23,\"name\":\"current coefficient\",\"capability\":\"WW\"},{\"dp\":24,\"name\":\"power coefficient\",\"capability\":\"WW\"},{\"dp\":25,\"name\":\"statistics coefficient\",\"capability\":\"WW\"},{\"dp\":26,\"name\":\"warning\",\"capability\":\"GW\",\"type\":\"string\"},{\"dp\":38,\"name\":\"on reset\",\"capability\":\"WW\",\"type\":\"string\"},{\"dp\":41,\"name\":\"circulate\",\"capability\":\"WW\",\"typefield\":\"STRUCTREPEAT\"},{\"dp\":42,\"name\":\"random\",\"capability\":\"WW\",\"typefield\":\"STRUCTRAND\"},{\"dp\":46,\"name\":\"owercharge\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"}]},{\"name\":\"Water leak sensor 3\",\"id\":\"bf62130d114c70670dtaw8i\",\"power\":\"AC\",\"capability\":[\"ALL\"],\"dps\":[{}]},{\"name\":\"power strip\",\"id\":\"3613666124a1600db127\",\"power\":\"AC\",\"capability\":[\"ALL\"],\"dps\":[{\"dp\":1,\"name\":\"Switch1\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":2,\"name\":\"Switch2\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":3,\"name\":\"Switch3\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":4,\"name\":\"Switch4\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":5,\"name\":\"SwitchUSB\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":9,\"name\":\"countdown1\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"},{\"dp\":10,\"name\":\"countdown2\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"},{\"dp\":11,\"name\":\"countdown3\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"},{\"dp\":12,\"name\":\"countdown4\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"},{\"dp\":13,\"name\":\"countdownUSB\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"}]},{\"id\":\"bfb073b1b789b5994cro7p\",\"name\":\"Zigbee Gateway\",\"capability\":[\"SET\",\"GET\"],\"power\":\"AC\"},{\"id\":\"bf0b2ef30ffb476aa8ngzw\",\"name\":\"BLE MESH（SIG）Gateway\",\"comment\":\"on test\"},{\"name\":\"siren\",\"id\":\"42027807d8bfc0c5831e\",\"power\":\"UPS\",\"capability\":[\"REFRESH\",\"ALL\"],\"dps\":[{\"dp\":101,\"name\":\"battery\",\"capability\":\"GW\",\"type\":\"enum\"},{\"dp\":102,\"name\":\"type\",\"capability\":\"WW\",\"type\":\"string\"},{\"dp\":103,\"name\":\"duration\",\"capability\":\"WW\",\"type\":\"int\"},{\"dp\":104,\"name\":\"alarm\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"}]},{\"id\":\"bfa355aa196ae5975cy6ii\",\"name\":\"switch module 1\",\"power\":\"AC\",\"capability\":[\"GET\",\"SET\",\"MULTIPLE\"],\"dps\":[{\"dp\":1,\"name\":\"switch\",\"capability\":\"WW\",\"type\":\"boolean\",\"typefield\":\"BOOLEANONOFF\",\"comment_01\":\"true|false  = ON|OFF\",\"comment_02\":\"Toggles when the countdown goes to 0.\"},{\"dp\":101,\"name\":\"on reset\",\"capability\":\"WW\",\"typefield\":\"ENUMONOFFHOLD\",\"comment_01\":\"0|1|2 = OFF|ON|HOLD\",\"comment_02\":\"The initial switch status, after a reset.\"},{\"dp\":102,\"name\":\"countdown\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"0..86500 s  (24H max.)\",\"comment_02\":\"PUSH every (30 * k) s; GET returns last PUSHed value, not the actual count\",\"comment_03\":\"SET(102):0 => the switch does not change\"}]},{\"name\":\"tuya_bridge\",\"id\":\"bf8c4fd0c03067079cplb4\",\"power\":\"AC\",\"dps\":[{\"dp\":1,\"name\":\"relay\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\",\"share\":[{\"test\":[\"tuyastatus[\\\"HAL@home\\\"][\\\"_ACpower\\\"] == true\",\"msg.info.value === \\\"ON\\\"\",\" var now = new Date(); (now.getHours() < 20) \"],\"action\":[{\"device\":\"_system\",\"property\":\"_doTrigger\",\"value\":\"5000\"},{\"device\":\"_system\",\"property\":\"_doTrigger\",\"value\":\"@4000+1000\"}]}]},{\"dp\":7,\"name\":\"trigger (reserved)\",\"capability\":\"TRG\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s  (24H max.)\"},{\"dp\":14,\"name\":\"restart status\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: off|on|memory\",\"share\":[{\"action\":[{\"device\":\"_system\",\"property\":\"_benchmark_step\"}]}]},{\"dp\":15,\"name\":\"light mode\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: pos|none|relay\"},{\"dp\":16,\"name\":\"backlight\",\"capability\":\"WW\",\"type\":\"boolean\",\"comment_01\":\"Values: true|false \"},{\"dp\":17,\"name\":\"circulate\",\"capability\":\"WW\",\"typefield\":\"STRUCTREPEAT\"},{\"dp\":18,\"name\":\"random\",\"capability\":\"WW\",\"typefield\":\"STRUCTRAND\"},{\"dp\":19,\"name\":\"inching\",\"capability\":\"WW\",\"typefield\":\"STRUCTINCH\"}]},{\"name\":\"watering timer\",\"id\":\"bfa1bdeb107d379fbckkwv\",\"power\":\"AC\",\"dps\":[{\"dp\":1,\"name\":\"relay\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\",\"share\":[{\"action\":[{\"device\":\"watering_sys\",\"property\":\"1ans\",\"value\":\"@msg.info.value\"}]}]},{\"dp\":9,\"name\":\"countdown\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"},{\"dp\":38,\"name\":\"restart status\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: off|on|memory\"},{\"dp\":40,\"name\":\"light mode\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: pos|none|relay\"},{\"dp\":41,\"name\":\"child lock\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":42,\"name\":\"circulate\",\"capability\":\"WW\",\"typefield\":\"STRUCTREPEAT\",\"share\":[{\"action\":[{\"device\":\"watering_sys\",\"property\":\"42ans\",\"value\":\"@msg.info.value\"}]}]},{\"dp\":43,\"name\":\"random\",\"capability\":\"WW\",\"typefield\":\"STRUCTRAND\"},{\"dp\":44,\"name\":\"inching\",\"capability\":\"WW\",\"typefield\":\"STRUCTINCH\"},{\"dp\":\"_connected\",\"capability\":\"SKIP\",\"share\":[{\"action\":[{\"device\":\"watering_sys\",\"property\":\"111\",\"value\":\"@msg.info.value\"}]}]}]},{\"id\":\"bfa9c64e128b39eddcgwyt\",\"name\":\"watering main\",\"power\":\"AC\",\"_capability\":[\"GET\",\"SET\",\"MULTIPLE\"],\"dps\":[{\"dp\":1,\"name\":\"switch\",\"_capability\":\"WW\",\"type\":\"boolean\",\"typefield\":\"BOOLEANONOFF\",\"comment_01\":\"true|false  = ON|OFF\",\"comment_02\":\"Toggles when the countdown goes to 0.\",\"share\":[{\"action\":[{\"device\":\"watering_sys\",\"property\":\"2ans\",\"value\":\"@msg.info.value\"}]}]},{\"dp\":101,\"name\":\"on reset\",\"_capability\":\"WW\",\"typefield\":\"ENUMONOFFHOLD\",\"comment_01\":\"0|1|2 = OFF|ON|HOLD\",\"comment_02\":\"The initial switch status, after a reset.\"},{\"dp\":102,\"name\":\"countdown\",\"_capability\":\"RW\",\"type\":\"int\",\"comment_01\":\"0..86500 s  (24H max.)\",\"comment_02\":\"PUSH every (30 * k) s; GET returns last PUSHed value, not the actual count\",\"comment_03\":\"SET(102):0 => the switch does not change\"},{\"dp\":\"_connected\",\"capability\":\"SKIP\",\"share\":[{\"action\":[{\"device\":\"watering_sys\",\"property\":\"112\",\"value\":\"@msg.info.value\"}]}]}]},{\"name\":\"smart camera\",\"id\":\"bfbe31dc672657857cxsi0\",\"power\":\"AC\",\"capability\":[\"SET\",\"GET\",\"MULTIPLE\"],\"dps\":[{\"dp\":103,\"name\":\"upside down\",\"capability\":\"W1\",\"type\":\"boolean\"},{\"dp\":104,\"name\":\"timestamp\",\"capability\":\"W1\",\"type\":\"boolean\"},{\"dp\":106,\"name\":\"sensibilità movimento\",\"capability\":\"W1\",\"typefield\":\"ENUMHIGHGOODLOW\"},{\"dp\":109,\"name\":\"SD status\",\"capability\":\"GW\",\"typefield\":\"SDSPACES\"},{\"dp\":110,\"name\":\"mode\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":111,\"name\":\"start SD format\",\"capability\":\"WO\",\"type\":\"int\"},{\"dp\":117,\"name\":\"SD format progress\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":134,\"name\":\"rilevazione movimento\",\"capability\":\"W1\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":151,\"name\":\"recording\",\"capability\":\"W1\",\"typefield\":\"RECMODE\"}]},{\"name\":\"switch-4CH 2\",\"id\":\"08435372600194fe37c8\",\"power\":\"AC\",\"dps\":[{\"dp\":1,\"name\":\"relay1\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":2,\"name\":\"relay2\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":3,\"name\":\"relay3\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":4,\"name\":\"relay4\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":7,\"name\":\"countdown1\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"},{\"dp\":8,\"name\":\"countdown2\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"},{\"dp\":9,\"name\":\"countdown3\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s  (24H max.)\"},{\"dp\":10,\"name\":\"countdown4\",\"capability\":\"WW\",\"type\":\"int\",\"comment_01\":\"Values: 0..86500 s (24H max.)\"},{\"dp\":13,\"name\":\"switch all\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":101,\"name\":\"power-on status\",\"capability\":\"WW\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":102,\"name\":\"mode\",\"capability\":\"WW\",\"type\":\"string\",\"comment_01\":\"Values: 'selflock'|'inching'|'interlock'\"},{\"dp\":103,\"name\":\"momentary time\",\"capability\":\"WW\",\"typefield\":\"BYTESMALLFLOAT\"}]},{\"id\":\"554301602cf4325eae00\",\"name\":\"umidificatore\",\"power\":\"AC\",\"capability\":[\"SET\",\"GET\",\"SCHEMA\",\"MULTIPLE\"],\"dps\":[{\"dp\":1,\"name\":\"spray\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":2,\"name\":\"output\",\"type\":\"string\",\"comment_01\":\"large|small\",\"comment_02\":\"Defined as boolean by Tuya, it works (GET,SET) with two strings.\"},{\"dp\":3,\"name\":\"timer\",\"type\":\"string\",\"comment_01\":\"1|3|6|cancel\",\"comment_02\":\"Requires strings: in 'alldevices' type:string is mandatory. So '3' do not becomes 3.\"},{\"dp\":4,\"name\":\"unknown\"},{\"dp\":5,\"name\":\"led\",\"typefield\":\"BOOLEANONOFF\",\"comment_02\":\"If modified it sends itself and colour.\"},{\"dp\":6,\"name\":\"led mode\",\"type\":\"string\",\"comment_01\":\"colour|colourful1\",\"comment_02\":\"In colourful1 mode, LED changes colour, but GET give 'ff00000000ffff'\"},{\"dp\":8,\"name\":\"colour\",\"typefield\":\"STRUCTCOLOUR\"}]},{\"id\":\"56685573d8bfc05082e6\",\"name\":\"Smart IR 1\",\"power\":\"AC\",\"comment\":\"rare captures from tuya ?\",\"capability\":[\"SET\",\"GET\"],\"dps\":[{\"dp\":1,\"name\":\"unknow\",\"comment\":\"mode? found push 'study_key' and 'send_ir'\",\"capability\":[\"PUSH\"]}]},{\"id\":\"56685573d8bfc0508488\",\"name\":\"Smart IR 2\",\"power\":\"AC\",\"capability\":[\"SET\",\"GET\"],\"comment\":\"rare captures from tuya ?\",\"dps\":[{\"dp\":1,\"name\":\"unknow\",\"comment\":\"mode? found push 'study_key' and 'send_ir'\",\"capability\":[\"PUSH\"]}]},{\"id\":\"56685573d8bfc0508837\",\"name\":\"Smart IR 3\",\"comment-1\":\"rare captures from tuya ?\",\"capability\":[\"SET\",\"GET\"],\"power\":\"AC\",\"dps\":[{\"dp\":1,\"name\":\"unknow\",\"comment\":\"mode? found push 'study_key' and 'send_ir'\",\"capability\":[\"PUSH\"]}]}],\"virtual\":[{\"name\":\"3 Gang-1\",\"cid\":\"804b50fffee0f181\",\"gateway\":\"bfb073b1b789b5994cro7p\",\"power\":\"BAT\",\"capability\":[\"SET\"],\"dps\":[{\"dp\":1,\"name\":\"button1\",\"capability\":\"SKIP\"},{\"dp\":2,\"name\":\"button2\",\"capability\":\"SKIP\"},{\"dp\":3,\"name\":\"button3\",\"capability\":\"SKIP\"},{\"dp\":10,\"name\":\"battery\",\"capability\":\"PUSH\"}]},{\"cid\":\"60a423fffe8e2bef\",\"name\":\"Termosifone 1\",\"gateway\":\"bfb073b1b789b5994cro7p\",\"power\":\"BAT\",\"capability\":[\"SET\"],\"dps\":[{\"dp\":8,\"name\":\"Open windows sensitivity\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":10,\"name\":\"Antifreeze\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":27,\"name\":\"Actual T offset\",\"capability\":\"WO\",\"type\":\"int\",\"comment_01\":\"Values: -6..+6 °C\"},{\"dp\":40,\"name\":\"Lock\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":101,\"name\":\"Device\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":102,\"name\":\"Temperature\",\"capability\":\"PUSH\",\"typefield\":\"BYTESMALLFLOAT\"},{\"dp\":103,\"name\":\"Target T\",\"capability\":\"WO\",\"typefield\":\"BYTESMALLFLOAT\"},{\"dp\":105,\"name\":\"unknown01\",\"capability\":\"PUSH\",\"comment_01\":\"Values: 0?\"},{\"dp\":106,\"name\":\"Away mode\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":108,\"name\":\"Day program\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":109,\"name\":\"unknown02\",\"capability\":\"WO\",\"comment_01\":\"Values: unknown\"},{\"dp\":110,\"name\":\"Hist. day target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":112,\"name\":\"Hist. week target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":113,\"name\":\"Hist. month target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":114,\"name\":\"Hist. year target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":115,\"name\":\"Hist. day real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":116,\"name\":\"Hist. week real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":117,\"name\":\"Hist. month real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":118,\"name\":\"Hist. year real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":119,\"name\":\"Hist. day power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":120,\"name\":\"Hist. week power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":121,\"name\":\"Hist. month power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":122,\"name\":\"Hist. year power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":123,\"name\":\"Monday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":124,\"name\":\"Tuesday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":125,\"name\":\"Friday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":126,\"name\":\"Thursday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":127,\"name\":\"Friday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":128,\"name\":\"Saturday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":129,\"name\":\"Sunday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":130,\"name\":\"Water scale proof\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"}]},{\"cid\":\"60a423fffeb5b90d\",\"name\":\"Termosifone 2\",\"gateway\":\"bfb073b1b789b5994cro7p\",\"power\":\"BAT\",\"capability\":[\"SET\"],\"dps\":[{\"dp\":8,\"name\":\"Open windows sensitivity\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":10,\"name\":\"Antifreeze\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":27,\"name\":\"Actual T offset\",\"capability\":\"WO\",\"type\":\"int\",\"comment_01\":\"Values: -6..+6 °C\"},{\"dp\":40,\"name\":\"Lock\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":101,\"name\":\"Device\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":102,\"name\":\"Temperature\",\"capability\":\"PUSH\",\"typefield\":\"BYTESMALLFLOAT\"},{\"dp\":103,\"name\":\"Target T\",\"capability\":\"WO\",\"typefield\":\"BYTESMALLFLOAT\"},{\"dp\":105,\"name\":\"unknown01\",\"capability\":\"PUSH\",\"comment_01\":\"Values: 0?\"},{\"dp\":106,\"name\":\"Away mode\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":108,\"name\":\"Day program\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":109,\"name\":\"unknown02\",\"capability\":\"WO\",\"comment_01\":\"Values: unknown\"},{\"dp\":110,\"name\":\"Hist. day target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":112,\"name\":\"Hist. week target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":113,\"name\":\"Hist. month target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":114,\"name\":\"Hist. year target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":115,\"name\":\"Hist. day real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":116,\"name\":\"Hist. week real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":117,\"name\":\"Hist. month real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":118,\"name\":\"Hist. year real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":119,\"name\":\"Hist. day power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":120,\"name\":\"Hist. week power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":121,\"name\":\"Hist. month power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":122,\"name\":\"Hist. year power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":123,\"name\":\"Monday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":124,\"name\":\"Tuesday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":125,\"name\":\"Friday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":126,\"name\":\"Thursday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":127,\"name\":\"Friday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":128,\"name\":\"Saturday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":129,\"name\":\"Sunday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":130,\"name\":\"Water scale proof\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"}]},{\"name\":\"Termosifone 3\",\"cid\":\"bc33acfffe526223\",\"gateway\":\"bfb073b1b789b5994cro7p\",\"power\":\"BAT\",\"capability\":[\"SET\"],\"dps\":[{\"dp\":8,\"name\":\"Open windows sensitivity\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":10,\"name\":\"Antifreeze\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":27,\"name\":\"Actual T offset\",\"capability\":\"WO\",\"type\":\"int\",\"comment_01\":\"Values: -6..+6 °C\"},{\"dp\":40,\"name\":\"Lock\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":101,\"name\":\"Device\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":102,\"name\":\"Temperature\",\"capability\":\"PUSH\",\"typefield\":\"BYTESMALLFLOAT\"},{\"dp\":103,\"name\":\"Target T\",\"capability\":\"WO\",\"typefield\":\"BYTESMALLFLOAT\"},{\"dp\":105,\"name\":\"unknown01\",\"capability\":\"PUSH\",\"comment_01\":\"Values: 0?\"},{\"dp\":106,\"name\":\"Away mode\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":108,\"name\":\"Day program\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"},{\"dp\":109,\"name\":\"unknown02\",\"capability\":\"WO\",\"comment_01\":\"Values: unknown\"},{\"dp\":110,\"name\":\"Hist. day target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":112,\"name\":\"Hist. week target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":113,\"name\":\"Hist. month target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":114,\"name\":\"Hist. year target T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":115,\"name\":\"Hist. day real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":116,\"name\":\"Hist. week real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":117,\"name\":\"Hist. month real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":118,\"name\":\"Hist. year real T\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":119,\"name\":\"Hist. day power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":120,\"name\":\"Hist. week power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":121,\"name\":\"Hist. month power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":122,\"name\":\"Hist. year power\",\"capability\":\"PUSH\",\"typefield\":\"ARRAY8INT\"},{\"dp\":123,\"name\":\"Monday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":124,\"name\":\"Tuesday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":125,\"name\":\"Friday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":126,\"name\":\"Thursday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":127,\"name\":\"Friday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":128,\"name\":\"Saturday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":129,\"name\":\"Sunday target T\",\"capability\":\"PUSH\",\"typefield\":\"STRUCTARGETTEMP\"},{\"dp\":130,\"name\":\"Water scale proof\",\"capability\":\"WO\",\"typefield\":\"BOOLEANONOFF\"}]},{\"name\":\"Temperature 1\",\"cid\":\"00158d00056a1c35\",\"gateway\":\"bfb073b1b789b5994cro7p\",\"capability\":[\"NONE\"],\"dps\":[{\"dp\":101,\"name\":\"humidity\",\"capability\":\"PUSH\"},{\"dp\":103,\"name\":\"temperature\",\"capability\":\"PUSH\"}]},{\"name\":\"Temperature 2\",\"cid\":\"00158d00056a1c45\",\"gateway\":\"bfb073b1b789b5994cro7p\",\"capability\":[\"NONE\"],\"dps\":[{\"dp\":101,\"name\":\"humidity\",\"capability\":\"PUSH\"},{\"dp\":103,\"name\":\"temperature\",\"capability\":\"PUSH\"}]},{\"name\":\"Temperature 3\",\"cid\":\"00158d00056e5022\",\"gateway\":\"bfb073b1b789b5994cro7p\",\"capability\":[\"NONE\"],\"dps\":[{\"dp\":103,\"name\":\"Temperatura\"},{\"dp\":101,\"name\":\"Umidità\"}]},{\"name\":\"esterna\",\"cid\":\"00158d00056a19ad\",\"gateway\":\"bfb073b1b789b5994cro7p\",\"capability\":[\"NONE\"],\"dps\":[{\"dp\":101,\"name\":\"humidity\",\"capability\":\"PUSH\",\"share\":[{\"action\":[{\"device\":\"watering_sys\",\"property\":\"202\"}]}]},{\"dp\":103,\"name\":\"temperature\",\"capability\":\"PUSH\",\"share\":[{\"action\":[{\"device\":\"watering_sys\",\"property\":\"201\"}]}]}]},{\"name\":\"schermo pc\",\"cid\":\"\",\"gateway\":\"56685573d8bfc0508488\",\"capability\":[\"NONE\"],\"dps\":[]}],\"fake\":[{\"id\":\"_system\",\"name\":\"HAL@home\",\"power\":\"BAT\",\"capability\":[\"SET\",\"GET\",\"SCHEMA\"],\"dps\":[{\"dp\":\"_doSCHEMA\",\"type\":\"string\"},{\"dp\":\"_doUPDATE\"},{\"dp\":\"_ACpower\",\"capability\":\"RO\",\"type\":\"boolean\"},{\"dp\":\"_ACunconnected\",\"capability\":\"RO\"},{\"dp\":\"_beep\",\"capability\":\"WO\"},{\"dp\":\"_benchmark\"},{\"dp\":\"_benchmark_end\"},{\"dp\":\"_benchmark_step\",\"capability\":\"TRG\"},{\"dp\":\"_DBase\",\"capability\":\"RO\",\"type\":\"boolean\"},{\"dp\":\"_doBenchmark\"},{\"dp\":\"_doTrigger\",\"capability\":\"WO\",\"type\":\"int\"},{\"dp\":\"_LANnet\",\"capability\":\"RO\",\"type\":\"boolean\"},{\"dp\":\"_laststart\",\"capability\":\"RO\",\"type\":\"string\"},{\"dp\":\"_name\",\"capability\":\"RO\",\"type\":\"string\"},{\"dp\":\"_play\",\"capability\":\"WO\",\"type\":\"see note\"},{\"dp\":\"_proxy\"},{\"dp\":\"_sqlBDlocal\",\"type\":\"string\"},{\"dp\":\"_sqlDBandroid\",\"type\":\"string\"},{\"dp\":\"_timerList\",\"capability\":\"RO\"},{\"dp\":\"_timerOFF\",\"capability\":\"WO\",\"type\":\"string\"},{\"dp\":\"_timerON\",\"capability\":\"WO\"},{\"dp\":\"_toDebug\",\"capability\":\"WO\"},{\"dp\":\"_toFastIN\",\"capability\":\"WO\"},{\"dp\":\"_toLogging\",\"capability\":\"WO\"},{\"dp\":\"_toLowIN\",\"capability\":\"WO\"},{\"dp\":\"_toShare\",\"capability\":\"WO\"},{\"dp\":\"_toStdCmd\",\"capability\":\"WO\"},{\"dp\":\"_toWarn\",\"capability\":\"WO\",\"type\":\"string\"},{\"dp\":\"_trgPing\"},{\"dp\":\"_tuyastatus\",\"capability\":\"WO\"},{\"dp\":\"_WiFinet\",\"capability\":\"RO\"},{\"dp\":\"_WiFiunconnected\",\"capability\":\"RO\"},{\"dp\":\"_beep_loop\",\"comment\":\"Test: timer uses a 'command'\",\"capability\":\"SKIP\",\"share\":[{\"test\":[\"msg.info.value.count > 0\"],\"action\":[{\"device\":\"_system\",\"property\":\"_beep\",\"value\":1},{\"device\":\"_system\",\"property\":\"_timerON\",\"value\":\"@ _xy = {timeout:msg.info.value.timeout, alarmPayload:{device:'_system', property:'_beep_loop',value: {count:(msg.info.value.count -1), timeout: msg.info.value.timeout}}}; _xy \"}]}]},{\"dp\":\"_beep_loop2\",\"comment\":\"Test: timer uses a 'share'\",\"capability\":\"SKIP\",\"share\":[{\"test\":[\"msg.info.value.count > 0\"],\"action\":[{\"device\":\"_system\",\"property\":\"_beep\",\"value\":1},{\"device\":\"_system\",\"property\":\"_timerON\",\"value\":\"@ _xy = {timeout:msg.info.value.timeout, alarmPayload:{share:[{action:[{device:'_system', property:'_beep_loop',value: {count:(msg.info.value.count -1), timeout: msg.info.value.timeout} }] }]}}; _xy \"}]}]},{\"dp\":\"_zeroLog\",\"share\":[{\"action\":[{\"device\":\"_system\",\"property\":\"_benchmark_step\"}]}]},{\"dp\":\"_zeroTask\",\"share\":[{\"action\":[{\"device\":\"_system\",\"property\":\"_benchmark_step\"}]}]}]},{\"name\":\"PM detector\",\"id\":\"_PM1_USB\",\"power\":\"AC\",\"capability\":[\"SET\",\"GET\",\"REFRESH\"],\"dps\":[{\"dp\":\"_refresh\",\"name\":\"refresh\",\"capability\":\"WO\"},{\"dp\":\"_refreshCycle\",\"name\":\"refresh cycle\",\"type\":\"int\"},{\"dp\":1,\"name\":\"sendtime\",\"type\":\"int\"},{\"dp\":2,\"name\":\"storetime\",\"type\":\"int\"},{\"dp\":3,\"name\":\"set clock\",\"type\":\"string\"},{\"dp\":4,\"name\":\"dump data\",\"capability\":\"WO\"},{\"dp\":5,\"name\":\"startRT\",\"typefield\":\"ENUMONOFFHOLD\"},{\"dp\":6,\"name\":\"memory clear\",\"capability\":\"WO\"},{\"dp\":80,\"name\":\"WritePoints\",\"capability\":\"RO\",\"type\":\"int\"},{\"dp\":81,\"name\":\"ReadPoint\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":82,\"name\":\"SendIternalFlag\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":200,\"name\":\"cpm1_0\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":201,\"name\":\"cpm2_5\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":202,\"name\":\"cpm10\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":203,\"name\":\"apm1_0\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":204,\"name\":\"apm2_5\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":205,\"name\":\"apm10\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":206,\"name\":\"aqi\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":207,\"name\":\"Temperature\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":208,\"name\":\"RH\",\"capability\":\"PUSH\",\"type\":\"int\"},{\"dp\":300,\"name\":\"Hist. Day CPM1_0\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":301,\"name\":\"Hist. Day CPM2_5\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":302,\"name\":\"Hist. Day CPM10\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":303,\"name\":\"Hist. Day APM1_0\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":304,\"name\":\"Hist. Day APM2_5\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":305,\"name\":\"Hist. Day APM10\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":306,\"name\":\"Hist. Day AQI\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":307,\"name\":\"Hist. Day  Temp\",\"capability\":\"PUSH\",\"type\":\"string\"},{\"dp\":308,\"name\":\"Hist. Day RH\",\"capability\":\"PUSH\",\"type\":\"string\"}]},{\"id\":\"317080408caab521a5d3\",\"name\":\"smoke detector\",\"power\":\"BAT\",\"capability\":[\"SET\"],\"dps\":[{\"dp\":1800,\"name\":\"alarm\",\"capability\":\"PUSH\",\"type\":\"string\",\"comment_01\":\"Values: 'ON'|'OFF'\"},{\"dp\":1820,\"name\":\"battery\",\"capability\":\"PUSH\",\"type\":\"string\",\"comment_01\":\"Values: 'OK'|'LOW'\"},{\"dp\":1840,\"name\":\"silence\",\"capability\":\"WO\",\"type\":\"string\",\"comment_01\":\"Values:  'ON'|'OFF'\"}]},{\"name\":\"terrace irrigation\",\"id\":\"watering_sys\",\"power\":\"AC\",\"capability\":[\"ALL\"],\"dps\":[{\"dp\":1,\"name\":\"timer\",\"type\":\"string\",\"comment_01\":\"Values: ON|OFF\"},{\"dp\":\"1ans\",\"name\":\"share relay\",\"capability\":\"PUSH\",\"type\":\"string\",\"comment_01\":\"Values: see dp 1\"},{\"dp\":2,\"name\":\"switch\",\"type\":\"string\",\"comment_01\":\"Values: ON|OFF\"},{\"dp\":\"2ans\",\"name\":\"share switch\",\"capability\":\"PUSH\",\"type\":\"string\",\"comment_01\":\"Values: see dp 2\"},{\"dp\":3,\"name\":\"toggle timer\",\"capability\":\"WO\",\"comment_01\":\"Values: any\"},{\"dp\":4,\"name\":\"adjust water\",\"type\":\"number\",\"comment_01\":\"Values: 0...100 (%)\"},{\"dp\":5,\"name\":\"waterweek\",\"type\":\"int\",\"comment_01\":\"Values: 0.... \"},{\"dp\":6,\"name\":\"reset\",\"capability\":\"WO\",\"comment_01\":\"Values: any\"},{\"dp\":7,\"name\":\"store\",\"capability\":\"WO\",\"comment_01\":\"Values: any\"},{\"dp\":8,\"name\":\"restore\",\"capability\":\"WO\",\"comment_01\":\"Values: any\"},{\"dp\":42,\"name\":\"circulate\",\"type\":\"binary\",\"comment_01\":\"Values: decoded: \\tarray of {active: true|false, day:SMTWTFS|DLMMGVS, start HH:MM, end: HH:MM, on: HH:MM, off: HH:MM}\"},{\"dp\":\"42ans\",\"name\":\"timer circulate\",\"capability\":\"PUSH\",\"type\":\"binary\",\"comment_01\":\"Values: see dp 42\"},{\"dp\":111,\"name\":\"timer connected\",\"capability\":\"PUSH\",\"type\":\"boolean\",\"comment_01\":\"Values: true|false \"},{\"dp\":112,\"name\":\"main connected\",\"capability\":\"PUSH\",\"type\":\"boolean\",\"comment_01\":\"Values: true|false\"},{\"dp\":201,\"name\":\"Temp\",\"capability\":\"PUSH\",\"type\":\"int\",\"comment_01\":\"Values: -20... +50 °C\"},{\"dp\":202,\"name\":\"RH\",\"capability\":\"PUSH\",\"type\":\"int\",\"comment_01\":\"Values: 0..100 %\"}]},{\"id\":\"733710408caab5e79887\",\"name\":\"Sensore di movimento\",\"comment\":\"WiFi battery sensor,  mirror device\",\"power\":\"BAT\",\"capability\":[\"NONE\"],\"dps\":[{\"dp\":1010,\"name\":\"Alarm\",\"typefield\":\"BOOLEANONOFF\",\"capability\":\"TRG\"}]},{\"id\":\"04208127d8bfc0dac0e5\",\"name\":\"Sensore porta\",\"comment\":\"WiFi battery sensor, mirror device\",\"power\":\"BAT\",\"capability\":[\"NONE\"],\"dps\":[{\"dp\":1030,\"name\":\"status\",\"capability\":\"TRG\",\"typefield\":\"BOOLEANOPENCLOSE\"}]}],\"__comment\":\"-- do not change code from here! --\",\"__pseudodp\":\"['_T', '_CONNECTED','_REFRESHCYCLE', '_REFRESH','_STANDBY','_RETRYTIMEOUT','_FINDTIMEOUT','MULTIPLE','SCHEMA ','LIST']\",\"__getODev\":\"function(id, limit = null){\\n   function _checkobj(list, dx) {\\n     var o;\\n    o = list.find(device => device.name === dx);\\n   if (o === undefined)\\n      o = list.find(device => device.id == dx);\\n   if (o === undefined)\\n      o = list.find(device => device.cid == dx);\\n   return (o);\\n   }\\n    function _okcheck(lim, branch) {\\n      return ((lim === null) || (lim == branch))\\n    }\\n   var odev;\\n   if (id === undefined)\\n      return (odev);\\n   if (_okcheck(limit, 'real'))\\n      odev = _checkobj(this.real, id);\\n   if ((odev == undefined) && _okcheck(limit, 'virtual'))\\n      odev = _checkobj(this.virtual, id);\\n   if ((odev == undefined) && _okcheck(limit, 'fake'))\\n      odev = _checkobj(this.fake, id);\\n   return (odev);\\n}\",\"__getDevName\":\"function(odev) {  if (odev === undefined) return undefined; return (odev.name === undefined ? (odev.cid == undefined ? odev.id : odev.cid) : odev.name);}\",\"__getConnectName\":\"function(odev) {   if (odev === undefined) return undefined;  if (odev.cid === undefined) return(odev.name === undefined ? odev.id : odev.name);   var o_gat = this.real.find(device => device.id === odev.gateway);   if (o_gat === undefined) return o_gat;   return (o_gat.name === undefined ? o_gat.id : o_gat.name);}\",\"__getODps\":\"function(odev, property) { if (odev === undefined) return undefined; if (Array.isArray(odev.dps)) {  var p = odev.dps.find(data => ((data.name === property) || (data.dp == property)));   return (p);}    return (undefined);}\",\"__getDpsName\":\"function(odev, property) {\\n if (Array.isArray(odev.dps)) {\\n  var p = odev.dps.find(data => ((data.name === property) || (data.dp == property))); \\n if(p !== undefined)\\n return (p.name == undefined ? p.dp : p.name);}  \\n  return (property);}\",\"__normalize\":\"function (xmsg, Do, Po, pseudo =[]){ if(!Do) { xmsg['error'] = \\\"ERROR [normalize]: not found the device '\\\"+xmsg.payload.device+\\\"' in global.alldevices.\\\"; return (xmsg); } xmsg.payload.device = (Do.name) ? Do.name: (Do.cid || Do.id); xmsg['to'] =  Do.cid || Do.id; if(! this.fake.includes(Do)) xmsg['toDev'] = Do.cid ? Do.gateway: Do.id; xmsg['infodp'] = 'schema';if (xmsg.payload.property) { if ((Po === undefined) || (Po.dp === undefined)) { xmsg.infodp  = xmsg.payload.property; if (! pseudo.includes(xmsg.payload.property.toUpperCase())) xmsg['warning'] =\\\"WARNING [normalize]: In alldevices missed the '\\\"+xmsg.payload.device+\\\"':dps[\\\" + xmsg.payload.property + \\\"] definition.\\\"; } else { xmsg.infodp =  Po.dp.toString(); xmsg.payload.property =  Po.name || Po.dp; }} return (xmsg); } \",\"__encodeValue\":\"function(value,dpObj={},encFunctions={}){if((value===undefined)||(dpObj===undefined)) return(value);if((value==='')||(value===null)||(value==='NULL')||(value==='null'))return(null);if((!dpObj.typefield)||(dpObj.typefield==='NONE')||(dpObj.typefield==='NULL')){try{switch(dpObj.type){case'boolean':return((value==true)||(value==='true'));case'int':case'enum':return(Number(value));case'string':return(value.toString());default:if(typeof(value)==='boolean')return(value);if(value==='false')return(false);if(value==='true')return(true);return((parseInt(value) == value)?parseInt(value):value);}}catch(error){return({error:'ERROR [encodeValue]: In conversion from value('+value+') to type '+dpObj.type+': '+error});}}else{if(!encFunctions[dpObj.typefield])return({error:'ERROR [encodeValue]: Not found the encode.'+dpObj.typefield+' function().'});let nval;try{nval=(encFunctions[dpObj.typefield](value));}catch(error){return({error:'ERROR [encodeValue]: In encode.'+dpObj.typefield+' function, on value ('+value+'): '+error});}return(nval);}}\"}","tot":"json"},{"p":"remotemap","pt":"global","to":"{\"itself\":\"DEVPC\",\"local\":{\"DEVPC\":\"http://localhost:1984\",\"TESTPC\":\"http://localhost:1985\",\"ANDROID\":\"http://localhost:1880\"},\"remote\":{\"DEVPC\":\"http://192.168.1.2:1984\",\"TESTPC\":\"http://192.168.1.2:1985\",\"ANDROID\":\"http://192.168.1.19:1880\"}}","tot":"json"},{"p":"beep64","pt":"global","to":"UklGRrguAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YZQuAAABAP8PAyD8LwNA/k8BVAFE/TMDJP4TAQQA9P/jAdT/wwG0/6cBuADI/9cB6P/3AQgBGP0nBDj8RwNY/0sAPAAsABwADAD8AOwA3ADM/7sDrPyvA8D+zwLh/vACAf0QBCH8MARB/FADU/5CATMBI/0SBAP88gPj/tICw/6yAqn+uAHJANkA6QD5AQn+GAIp/jgCSf9YAEsBO/8qABsACwD7Aev+2gLL/roBqwGx/sEB0gDi//ECAv8RACIAMgBCAFIAUgFC/jECIv8R/wEC8v7hAtL+wQKy/akEuvzJA9r+6QH6AAoAGv8pATr/SQJa/kkBOv8pAhr+CQL6/ekD2v/JALn/qAGz/8IC0/7iAfP+AgMT/SIDM/5CAFMBUQBB/jAEIfsQBQH88ALhANH/wAKx/aoCuwDL/9oC6/76AQsAG/8qATsASwBZ/0gCOf0oAxn+CAH5/+gC2P3HBLj8pwK0/8MB1ADk//MABAAUAST/MwFE/lMCUP8/ATAAIP8PAQD/7wHgANAAwACwAKwAvADMANwB7P77Agz+GwIs/jsCTP5XAkj9NwMo/hcCCP72Aef/1gHHALf/pgG1AMX+1APl/fQCBQAV/yQBNf9EAVX/TgI//S4DH/0OA//97gPf/M4Ev/6uAK0Bvf7MAt3/7AH9/gwCHf8sAD0BTf5WAkf+NgIm/xUABgD2AOYA1gHG/rUCpv+1AMYB1v7lAvb+BQIW/yX/NQJG/VUETv09AS4AHv8NA/787QTe/c0BvgGu/q0Cvv/NAN4A7gD+AA4AHgAuAT7+TQJW/kQBNQEl/hQCBf70AeUA1QHF/rQCp/62Asf/1gHn/vYCB/4WAyf9NgJH/lYCTf88AS3+HAIN/vwC7f/cAM0AvQCt/64Cv/7OAt/+7gH/AA//HgIv/j8BUP9TAkT9MwQk/RMABAL0/eMD1P/D/7MCqP63AcgA2P/nAfgACAAY/ycCOP1HA1j+SwE8/ysCHP0LBPz86wPc/ssBvAGs/q8CwP7PAuD/7wAAABAAIQEx/0D/UAJT/kIDM/0iAhP9AgTz/OIE0/3CAbMAqf+4Asn+2ALp/vgACQIZ/igCOf9I/lgES/w6BCv8GgQL/foB6wHb/soCu/6qAbEAwQDRAeH98AMC/hEBIgEy/UEEUvtRBUL8MQMi/hEAAgHy/+EC0v3BA7L9qQO6/ckD2v3pA/r9CQMa/SkDOv1JA1r9SQM6/SkDGv4JAfr/6QHa/8kCuv2pA7L9wQPT/eID8/0CAhP/IgAzAUP/UgBRAEEAMQAhABEAAf/wAuH+0ALB/bADq/66AcsB2/3qBPv8CgMb/yr/OgJL/lgBSQA5ACkAGf8IAvn+6AHZAMn/uAKp/bMDxP7TAeQA9P8DABQCJPwzBUT8UwNQ/T8BMAEg/g8EAPrvBuD7zwPAALD+qwK8/8v/2wPs/fsDDP0bAiz/OwBMAlj9RwM4/ScDGP0HA/j95wPY/sYAtwKn/bQDxf7UAeX/9AEFABX/JAI1/UQDVf1OAz/+LgEfAA/+/gPv/d4Dz/6+AK8Brf+8Ac3/3ADtAP0BDf8cAS3+PAJN/1YBR/82ACcBF/8GAvf95QLW/8UBtgCm/7UBxv7VA+b99QMG/RUDJv01A0b+VQFOAD7/LQIe/g0B/gDu/90Bzv+9Aa7/rQG+/80A3gDuAv79DQMe/S0BPgJO/VUCRv81ACYBFgAF/vQC5f7UA8X9tASn+rYFx/7WAOcC9/wGBBf9JgM3/kYBV/9MAD0BLf8cAQ3//ADtAN0AzQC9AK0ArwC/AM8A3wDvAP8ADwAfAC8APwBPAFX/RAI0/iMCFP4DAvT94wTU+8MFtP2nAbgAyP7XA+j+9wEI/xcBKP83AUj/VwBMATz/KwAcAQz/+wHs/9sBzP+7Aaz/rwHAAND/3wHw//8AEAEg/y8AQAFQ/1IAQwAzASP+EgMD/fIC4/7SA8P9sgOp/bgByQHZ/+gB+f8IARn/KAA5AEkBWf9KATv+KgEbAQv/+gDrANv/ygK7/6oAsQDBANH/4ALx/gABEQAh/zABQv9RAVL/QQEy/yEBEv8BAfIA4v/RAcL/sQGqALr/yQHa/+kB+v8JARr/KQE6AEr+WQNK/jkAKgEa/wkA+gLq/dkDyv65AKoCsv3BA9L94QLy/wEAEwEj/jIBQwBT/1ADQfwwAyH/EP8AAvH+4ALR/sACsf2qA7v/yv/aAuv9+gILARv9KgM7/koBWQBJ/zgBKf8YAgn++ADpAtn9yAO5/qgAswLD/tIB4wD0/wMBFP8jAjT9QwNU/U8CQP8vACABEP7/A/D93wHQAMD/rwOs/bsCzP7bAewB/P8LABwBLP47Akz/VwBIATj+JwEYAAgA+ADoANj/xwG4AKgAtP/EAdX/5AH1AAX/FAElADX/RAFVAE//PgMv/B4ED/3+Au//3gDPAb8Ar/+sAb3/zAHd/+wB/f8MAR3/LAE9/0wBV/9GATf/JgEX/wYB9//mAdf/xgC3Aab/tQHG/9UB5v71Awb8FQQm/TUCRv9VAE4BPv4tAx79DQP+/e0D3v3NA77+rQCuAb7/zQDeAu78/QUO+x0FLvs9BE7+VQBGATb/JQEW/wUA9gHm/9UCxf20Aqf/tgHH/9YC5/z2BQf8FgInADf+RgNX/UwDPf0sAh3/DAH9/+wB3f7MAr3/rAGv/74Bz/7eA+/8/gQP/R4DL/0+Ak//VABFATX+JAIV/wQB9P7jAtT/wwC0Aaj+twLI/9cB6P73Agj/FwAoATj/RwBYAUz/OwAsARz/CwH8/+sB3P7LA7z+qwCwAcD/zwHgAPD+/wMQ/h8BMABA/08BVP9DATQAJP8SAQP/8gHj/9IBw/+yAakAuf/IAdn/6AH5/wgBGf4oAzn8SARZ/UoBOwEr/hoCC/76Auv/2gDLALsAq/+wA8H80ATh/PADAf8Q/yACMf5AAVEAU/9BAjL+IQES/wEA8gLi/tEBwv+xAKoBuv/JAdr/6QD6AAoBGv4pAzr8SQNa/0kAOgAqABr/CQL6/ukC2v7JAboAqgCyAMIA0gDiAPIAAgAS/yECMv5BA1P8UANB/jABIQER/gAC8f7gAtH+wAKx/6oAuwHL/doE6/36Agv/GgArATv+SgJZ/kgCOf8oARn/CAD5AOkA2QDJArn9qAKz/8IA0wHj//IAAwET/iICNP9DAFQAUP8/AjD+HwIQ/v8C8P7fAtD9vwSw/asCvP7LAdwA7AH8/gsDHPwrAzwATP5XA0j8NwMo/xcACAD4AOgA2ADIALj/pwO0/cMC1P7jAvT+BAMV/SQCNf5EAlX+TgM//S4CH/8OAP8A7wHf/s4Dv/yuA63/vADNAd3+7AH9AQ3+HAMt/TwCTf5WAkf+NgMn/BYEB/32Auf+1gLH/rYCp/60AsX+1ALm/vUBBgAWACYANv9FAlb+TQI+/i0BHgAOAP4A7gDeAM4AvgCuAK4AvgHO/t0C7v/9AA4BHv4tAj7/TQBWAUb/NQAmARb+BQP2/eUD1v3FA7b+pQG2/8YB1//mAvf9BgMX/SYDN/1GAlf/TAE9AC3/HAANAf3/7AHdAM3/vAKt/q4AvwLP/t4C7//+AA//HgIv/j4DT/1UAUUANQAlARX/BAD1AeX+1ALFALT+pwO4/McE2P3nA/j9BwMY/CcEOP1HAlgATP47Aiz/G/8LA/z86wXc+ssGvPurBLD9vwLQ/98A8AEA/g8CIAAw/j8CUP5TAUQBNP4jAhT+AwH0AOQA0wDDAbP9qAW5+sgG2fvoBPn8CAMZ/igBOQBJ/1gASwI7/CoGG/kKBfv+6gDbAcv/ugGr/7AAwQHR/uAD8f0AAhEAIf4wA0H9UAJTAEP/MgEj/xIAAgLy/OEF0vvBBLL+qQC6AMoB2v/pAfr/CQAaASr/OQFK/lkDSvw5BCr+GQAKAfr/6f/ZA8r9uQOq/bEDwv3RA+L+8QECABIAIgAy/0ECUv1RBEL8MQIhABH+AAPx/uAB0f/AAbH/qgG7AMv/2gHrAPv/CgEb/yoBOwBLAFn/SAE5/ygCGf4IAfkA6f/YAsn+uAGpALMAwwDTAOP/8gID/hICI/4yAUMAUwBRAEAAMAAgABAAAADwAeD+zwLA/q8CrP67Asz+2wHsAfz9CwQc/CsDPP5LAlj+RwI4/icBGAEI/vcC6P/XAMgAuACoAbT/wwHU/uMC9P4DBBT7IwQ0/UQCVQBP/z4ALwEf/w4B///uAN8Bz/++Aa//rAG9/8wA3QLt/fwDDf0cAi3/PAFN/1YARwI3/SYCFwAH/vYE5/zWAscAtwCn/7QDxfrUCOX59AYF/BQBJgE2/0UAVgFO/j0DLv0dAQ4A/gDuAN4Bzv69Aa4Brv69As7/3QDuAf7/DQAeAS7/PQBOAlb9RQQ2/CUCFgAG//UC5v7VAcYAtv+lArb9xQTW/OUD9/8G/xYCJ/42AUcBV/5MAj3+LAId/gwD/f3sAt3/zAC9Aq39rgO//c4D3/3uA//9DgIfAC/+PgNP/FQDRQA1/iQDFf0EAvX/5AHV/8QBtf+mAbcAxwDY/+cB+AAIABj/JwE4/0cCWP1LAzz9KwMc/gsA/AHsANz/ywG8/6sAsAHA/88A4ADwAQD/DwAgADAAQABQAlT8QwM0/yP/EwIE/vMB5ADU/8MBtP+nArn9yALZAOn/+AEJABn+KAM5/kgAWQJL/ToDK/4aAQv/+gHrANv/ygK7/KoEsf7AAdEA4f7wAwH9EAMh/jAAQQFR/1ICQ/0yAiP+EgID//IB4//SAMIAsgCqAbr+yQLa/ukC+v8JABoAKv85Akr+WQJK/jkCKv4ZAgr++QLq/tkCyv65Aqr+sQLC/tEC4v/xAAIBEv8hADIAQgFS/1ECQv0xAiL/EQEC//EC4f3QA8H9sAKr/7oBy//aAOsB+/4KAhv/KgE7/0oBWf5IAzn9KAMZ/QgC+f/oANkAyQG5/qgCs/7CAdMB4/3yBAP9EgEjADMAQ/9SA1H8QAQx/CAEEfz/BPD93wLQ/7//rwKs/rsCzP7bAewA/P8LAhz+KwI8/ksBWP9HAjj/JwAY/wcB+P/nAtj9xwO4/acCtP/DAdT+4wP0/AMEFP4jADQBRP5TA1D9PwMv/R4CDwD//+4B3//OAb8Ar/+sAb3/zAHdAO3//AIN/hwALQI9/UwDV/9G/zYCJ/4WAQf/9gLn/tYCx/62Aaf/tALF/dQD5f30AwX9FAIl/zQARQFV/k0CPv4tAx78DQT+/e0C3v/NAL4Brv+tAb7+zQLe/+0B/v8NAB4ALgA+AE4AVgBGADYAJv8VAgb99QTm/NUDxv+1/6UCtv7FAtb+5QL2/gUCFv4lATcARwBXAE3/PAEtAB0ADQD9/+wC3f7MAb0ArQCv/74Dz/zeBO/8/gMP/x4ALwE//k4CVf9EADUAJQEV/gQC9f/kANUBxf60Aqf/tgDHANcA5wD3AAcAGAAoADgASP9XAkz+OwIs/RsDDP37A+z92wPM/bsCrP+vAMAB0P/fAPABAP8PASD/LwBAAVD/UwFE/zMBJP8TAQT/8wDkAdT/wwG0/6cAuAHI/tcD6P74AQkAGf8oATn/SAJZ/koBO/8qARv/CgH7/+oB2//KArv9qgOx/sAB0QDh//ACAf4QASEAMf9AAlH+UgJD/TIEI/wSBAP98gHjAdP+wgKz/6j/uALK/tkC6v75AQr/GQAqAToASv5ZA0r9OQIqABr+CQT6/OkD2v7JAboAqgCyAMIA0gDiAPL/AQIS/SEEMv1BAlL+UQFCADIAIgES/wH/8QLi/tEBwgGy/aoDu/3KAtsA6/76Awv9GgIrADv+SgJZAEn/OAEp/xgACQH5/+gB2f/IAbn/qACzAsP90gPj/fICAwATACP/MgFD/1IBUQBBADH/IAER/wAC8f3gA9D9vwOw/qsBvP/LAdz/6wL8/gsBHP8rATz/SwJY/UcDOP4nABgBCP/3Aej/1wHI/rcDqP6zAcT+0wPk/fMDBP4TACQBNP9DAVT/TwBAATD+HwQQ+/8E7/3eAs8Av/6uA638vATN/tz/7AP9/AwEHf4s/zwDTfxWBEf+Nv8mAxf8BgP3AOf91gTH/LYDp/+0/8QC1f3kBPX8BAMV/iQANQJF/VQDT/4+AS8AH/8NAv7+7QHeAM4Avv+tAa4Avv/NAt797QL+AA7+HQMu/T0DTv1VA0b9NQImABb/BQL2/eUD1v7FArb+pQG2AMYA1gDmAPYABgAWACb/NQJG/lUCTv88AC0AHQANAP0B7f/cAc3/vACtAK8Bv//OAd//7gD/AQ//HgEv/z4BT/9UAkX9NAMl/hQBBQD1/+QC1f7EArX+pgG3AMf/1gHn//YBB/8WASf+NgJH/1cBTP87ACwBHP8LAfz/6wHc/8sBvP6rA7D9vwTQ+98E8P3/AxD+HwEw/z8BUP9TAkT9MwMk/RMDBP7zAeT/0wHEALQAqP+3AcgA2ADoAPj/BwEYACkAOf9IAln9SgM7/ioBGwAL//oB6//aAcv/ugGr/7ACwf7QAOEC8f0ABBH9IAExAEH/UAJT/UIDM/4iARMAA//yAeMA0wDD/7IBqf+4Asn+2ALp/vgACgIa/SkEOvxJA1r+SQE6ACoAGgAKAPr/6QLa/skCuv6pArL+wQLS/uEB8gEC/hECIv4xAkL+UQJS/kECMv4hAhL+AQLy/uEC0v7BArL+qQK6/8kA2gDrAPsBC/8aACsBO/5KA1n8SAQ5/SgCGf8I//gC6f/YAMkBuf6oArP/wgDTAeP+8gID/xIAIwEz/kICU/9QAUH/MAAhARH/AAHxAOH+0APB/bACqwC8/8sB3P/rAfz/CwEc/ysBPABM/1cBSP83ASj/FwII/vcB6ADY/8cDuP2nAbQAxP/TAuT/8wAE/xMBJP8zAUQAVP9PAUAAMP8fARAAAADw/98B0ADAAK8ArQC9/8wC3f7sAf0BDf4cAi3/PP9MA1f9RgI3/yYAFwEH/vYC5/7WAsf+tgKn/rQBxQDV/+QC9f4EARX/JAE1/0QCVf1OBD/8LgIfAA///gPv/d4BzgC+AK4Brv+9AM4A3gHuAP7/DQEe/y0BPv9NAVYARv81ASb/FQEG//UA5gLW/MUFtvulBLb+xQDWAOYB9gAG/xUAJgE2/0UCVv1NAz79LQMe/Q0D/f3sAt3/zAC9AK0Br/6+As//3v/uA//9DgIf/y4APwBPAVX/RAE1/yQAFQAFAPUB5f/UAcX+tAKn/7YBx/7WAuf+9gIH/xYAJwA3AEcAVwBNAD0ALQEc/gsC/P7rAdwBzP67Aqz+rwLA/88A4ADwAAABEP8fATD+PwNQ/lMBRP8zASQAFP8DAvT94wPU/sMBtP+nAbj/xwHYAOj/9wEI/xcBKAA4/0cCWP1KBDv7KgUb+woG+/nqBtv7ygW7+6oEsfzAA9H/4ADxAAEAEf8gAjH+QAFRAFP/QgIz/iIBEwADAPMA4//SAsP/sgCpALkAyQDZAOkA+QAJARn/KP84A0r7WQZK+zkDKv8Z/wkB+v/pAtr+yQG6AKr/sQLC/tEB4gDy/wEDEvshBTL8QQJSAFIAQv8xASL/EQECAPIA4v/RAsL9sQOq/rkCyv7ZAur9+QQK/RkBKwA7/0oCWf5IATn/KAIZ/ggB+QDp/tgEyfy4A6n+sgHD/9IB4//yAQMAE/8iATP/QgFT/1ABQf8wACEBEf4AA/H94ALR/8AAsQGr/roDy/3aA+v9+wIM/xsBLP87AUz/VwBIATj/JwEY/gcC+P7nAtj/x/+3A6j8swTE/dMB5AH0/wMAFAEk/jMCRABU/k8DQP0vAiAAEP7/A/D93wPQ/r8AsAGs/rsEzPzcA+39/AMN/hwBLQA9AE0AVwBHADf/JgIX/gYC9/7mAdcAxwC3AKcAtf/EAdUA5QD1AAUAFf8kAjX+RAJV/k4CP/4uAh//DgD/AO8A3wDPAL8ArwCuAL4AzgDeAO4A/gAOAB4ALgA+AE4BVv5FAzb7JQYW+wUE9v3lAdYBxv61A6b8tQXG+9UE5v31Agb/FQAmADYARgFW/k0DPvwtBB78DQT+/O0F3vvNA73/rP+uA7/9zgLf/+4A/wIP/R4DL/0+Ak//VABFATX/JAEV/gQC9f7kA9X+xAC1AKcAtwHH/9YB5//2AAcAFwEn/jYDR/5WAE0BPf4sAh0ADf/8Ae3/2wDMAbz/qwCwAsD8zwTg/e8BAAEQ/h8CMP4/AlD9UwRE/TMBJAEU/QMD9P/j/9MCxP6zAagAuP/HAtj95wP4/QcEGPsnBTj7RwVY/UsBPAAs/xsCC/76Auv/2gDL/7oBqwCxAMEA0f/gAPECAf0QAyH+MAFBAFH/UgFDADMAIwAT/wIC8/3iBdP5wgez+6gDuf/I/9gC6f74Agn+GAEpATn9SARZ/EoDO/4pARr/CQL6/ekD2v3JA7r9qQOy/cEC0v/hAfL/AQIS/CEFMvtBBlL6UQVC/DEDIv8R/wEC8v7hAtL/wQCyAKoAugDKANoA6gD6AAoAGgAq/zkCSv9ZAEkAOQApARn/CAH5/ugC2f/IALkAqQCzAMMA0wDj//IBA/8SAiP+MgFDAFP+UARB/DADIf4QAQH/8ALh/dAEwfywAqsAu//KAtv+6gH7/woCG/4qAjz+SwJY/kcCOP8nABgBCP/3Aej+1wPI/LcFqPuzBMT90wLk//MABAEU/yMBNP5DAlT+TwJAADD+HwMQ/P8D8P/fANABwP6vAqz+uwHMANz/6wL8/gsBHf8sAj39TARX+0YFN/wmAhcAB//2Aef/1gDHAbf/pgG1/8QB1f/kAfX/BAEV/yQBNQBF/1QBT/8+AS8AH/8OAv/+7gLf/s4BvwCvAK0AvQDNAN0A7gD+AA7/HQIu/z0ATgBWAEb/NQIm/hUBBgD2/+UC1v3FBLb8pQO2/sUB1gDmAPYABv8VAib9NQNG/lUATgI+/S0EHvsNBf777QTe/s0BvgCu/60Bvv/OAd//7gL//Q4DH/4uAT8ATwBVAEX/NAIl/hQCBf/0/+QC1f7EArX+pgK3/sYC1//m//YCB/4WAScAN/9GAVf/TAA9AS3+HAIN//wA7QHd/swCvf+sALABwP7PA+D97wIA/w8AIAEw/z8BUP9TAUT/MwEk/xMBBP/zAeT/0wHE/7MBqP+3Acj/1wLo/fcECPsXBSj8NwNI/lcCTP47ASz/GwEMAfz+6wLc/coDu/6qArH+wAHRAOH/8AEB/xABIf8wAUH/UABTAUP/MgAjAhP9AgLz/+IA0wHDALP/qAC5Acn/2AHp//gACQEZ/igDOfxIBFn8SgM7/ioCG/4KAvv+6QLa/skCuv+pALIAwgDSAOIA8gACABL/IQIy/kECUv5RAkL+MQMi/RECAv/xAeL/0QHC/rEDqv25A8r82QTq/fkCCv8ZASr+OQNK/FkESv05Air/GAAJAPkA6QDZAMkAuf+oArP+wgLT/eID8/4CARMAI/8yAUMAUwBR/0ACMf4gAREAAf/wAuH+0AHBALH/qgK7/coD2/3qA/v9CgMb/SoCOwBL/lgDSf03Ayj9FwMI/vcB6ADY/8cBuACo/7MCxP7TAeQA9P8DART/IwE0AET/UwFQ/j8DMP0fAxD+/wDwAuD+zwHAALAArP+7Asz/2wDsAfz+CwIc/isCPP9LAFcBR/42AScAFwAHAff+5gHXAMcAtwCnAbX+xALV/uQB9QAFARX/JAE1/kQCVf9OAD8CL/0eAw/9/gLv/t4Ez/y+A6/9rAK9/8wB3f/sAP0CDf0cAi7/PQBOAlb9RQI2ACb/FQIG/fUC5gDW/8UBtgCm/rUExvzVAuYA9v4FAxb+JQE2/0UBVv9NAT7/LQEe/w0B/gDu/90Bzv+9Aa7/rQG+AM7+3QPu/v0ADwIf/i4APwJP/VQERf00AiX+FAEFAfX+5APV/MQEtf2mArf/xgDXAOcB9/8GARf+JgM3/kYBV/9MAD0BLQAd/wwB/f/sAd0Azf+8Aq39rgO//s4B3wHw/f8DEP4fATAAQABQ/1MBRAA0/yMCFP0DAvQA5P/TAsT+swGoALgAyADYAOgA+AAIABgBKP43Akj+VwJM/jsCLP8bAAwB/P7rAtz/ywC8AKwBsP/AAdH+4ALx/wABEf8gADEBQf9QAVP/QgAzAiP9EgID//IB4wDTAMP+sgOp/bgDyf7YAOkB+f8IARn/KAE5/0gBWf9KATv/KgEbAAv++gPr/NoFy/u6Bar7sQTC/tEA4gHy/wEBEgAi/zEBQgBSAFIAQgAy/yEBEgEC/fEE4vvRBcL8sQOq/rkBygDaAOoA+gAK/xkCKv05A0r+WQBKAjr8KQUa+wkE+v7pANkByf+4AakAs//CANMB4//yAgP9EgIj/zIBQwBT/1ABQf8wASEAEQAB//AC4f7QAsH+sAGrALsAywHb/uoC+/4KARsAKwE7/koCWf5IATkAKQAZ/wgC+P7nAtj9xwO4/qcCtP7DAtT94wX0+wMEFP0jATQBRP9TAVD/P/8vAiD+DwIA/u8C4P3PBMD8rwOs/rsBzAHc/usC/P4LAhz+KwI8/ksDWP1HAjj/JwAXAQf/9gDnAdf/xgC3Aaf/tADFAdX+5AP1/gQAFQEl/jQDRf1UA0/9PgIv/x4ADwH//u4C3//OAb//rgGt/bwEzf7cAe3//AANAB0BLf88AE0AVwFG/zUAJgEW/gUD9v3lAtYAxv61A6b9tQPG/dUD5v31Agb/FQEm/zUARgFW/k0DPv0tAh7/DQD+Ae7+3QLO/r0Crv6tAb4Azv/dA+77/QUO/B0DLv89/04CVf1EBDX8JAMV/QQD9f7kAtX+xAG1/6YCt/7GAtf+5gL3/gYCF/4mAjf+RgJX/kwCPf4sAh3+DAL9/uwC3f7MAr3+rAGvAL8AzwDfAO8A/wAPASD+LwJA/08BVP9DATT+IwMU/QMC9P/jANQAxAC0AKgAuADI/9cD6Pz3BAj9FwEoAjj9RwNY/UsDPP0rAxz9CwP8/esD3P7LALwBrP+vAMAC0PzfBfD7AAUR+yAEMf5AAVEAU/9CATP/IgIT/gIB8wDj/9ICw/6yAakAuQDJ/9gC6f34BAn7GAUp/DgDSf5YAUsAOwAr/xoCC/76Auv/2v/KArv/qgCxAMEA0QDiAfL/AQASACIBMv9BAVL+UQJC/zEAIgES/QEE8vzhA9L/wQCy/6kBuv/JAtr+6QH6AAr/GQEq/zkBSgBa/0kBOv8pARr/CQD6Aer/2QDKAbr+qQOz/cIC0//iAPMBA/8SACMAMwBDAVP+UANB/DADIf8QAAEB8f7gAtH+wAOx/aoCu//KAdv+6gP7/QoCGwAr/joDS/1YAkkAOf4oAxn9CAL5AOn+2ALJ/7cAqAC0AMQA1ADkAPQABAAUACQANABEAFQBUP4/AjD+HwEQAQD+7wLg/88AwACwAKwAvAHM/9sB7P77Agz+GwIs/jsCTP5XAkj+NwEo/xcCCP33BOf81gLHALf+pgO1/sQB1f/kAfX+BAQV/CQDNf5EAVUATwA//y4CH/4OAv/+7gHfAM8Av/+uAq3+vAHNAd387Ab9+gwFHf0sAD0CTf5WAkf+NgEnABcABgH2/uUB1gDGALYApgC2AMYA1gHm/fUFBvoVBib7NQRG/VUCTv49Ai7/HQEO/v0C7v/dAM4Cvv2tA679vQLOAN7/7QH+AA7+HQMu/T0DTv5VAEYANgEl/xQCBfz0BOX91APF/rQApwC3Acf/1gLn/PYEB/0WAif/NgBHAFcBTf88AC0BHf4MAv3/7ADdAM0Bvf6sAa8Bv/3OBN/87gT//A4EH/wuAz//Tv9TAUQBNP0jAxT+AwH0AOQA1P/DArT+pwK4/scB2ADo//cCCP0XAyj9NwJI/1cBTP47Ayz9GwMM/fsD7P3bA8z+uwCsAbD/vwDQAOAA8AEA/w8AIP8vAUEBUf9SAEMAM/8iAhP/Av/yAuP90gPD/rICqf64Acn/2AHpAPkACQAZ/ygCOf5IAVkBS/06BCv8GgML//r/6gLb/soCu/6qArH+wAPR/OAE8fwAAxH/If8xA0L8UQNS/0H/MQIi/xEAAgHy/uEB0gHC/rECqv+5/8kC2v7pAvr/CQEa/ikCOv9JAFoCSvw5BCr9GQIKAPr/6QDaAcr/uQGq/7EBwv/RAeL/8gADABMBI/4yA0P9UgFRAUH+MAIh/xAAAQDxAeH/0ADBAbH+qgO7/coD2/3qAvsAC/4aAyv8OgVL+1gESf04AikAGf4IA/n96APZ/cgDuf2oA7P9wgLU/+MB9P8DABQAJAE0/0MBVP5PA0D9LwIgABD+/wPw/d8D0P2/ArD/qwC8Acz/2wHs/vsDDPwbBSz7OwRM/lcBSP83ACgAGAEI//cA6ADYAMgAuACn/7QCxf7UAeUB9f4EAhX+JAE1AUX/VABPAT/+LgMf/g4A/wHv/94Bz/++Aa//rAG9/8wB3f/sAf3/DAId/SwCPf9MAFcCR/42ASf/FgEH//YC5/3WA8b+tQGm/7UBxv/VAeb/9QEG/xUBJv81AUb/VQJO/T0DLv4dAg7+/QLu/t0Czv69A678rQO+/83/3QPu/f0BDgAeAS7+PQNO/FUERv01Ayb9FQIG//UA5QHV/8QAtQCnALcBx/7WAuf+9gIH/xYBJ/42A0f9VgNN/TwDLf0cAw3+/ADtAd3/zAG9AK3+rgO//c4C3wDv//4ADwEf/i4CPwBP/lQCRf80/yQDFP0DAvT+4wLU/sMDtPynBLj9xwHYAOj/9wMI/RcBKP83Akj+VwNM+zsFLP0bAgz++wHsANwAzAG8/qsCsP6/AtD/3wDwAAAAEAAgATD/P/9PAlT/QwAzAiP8EgQD/vIB4wDT/sIEs/yoBLn8yAPZ/egF+foIBRn9KAA5Akn+WAFLADv/KgIb/goC+/7rAtz+ywO8/asDsv3BAtL/4QDyAgD9DwMg/S8CQP9QAVEAQf8wASH+EAMB/fID4/7SAMMBs/+qAbv/ygHb/+oC+/0IAxn9KAM5/kgBWf9IATn+KAMZ/QgC+//q/9oDy/26Aqv/sv/CA9P94gLz/gACEf8gATL/QQBSAVD/PwEwACAAEAAA//EC4v7RAsL/sf+rArz+ywHcAez++wIK/hkCKv45Akr/VwBIADgAKAAYAAgA+gDqANoAygC6Aar+swPE/NME5P3zAgL/EgAjATP+QgFTAE8APwAvAB//DgEAAfH94APR/cADsf6sAr39zAPd/ewD/f4KARv/KgE7/0oBV/9GATf/JgEX/wYB+f/oAdn+yAO5/qgBtf/EANUB5v/1AQT/EwEk/zMBRP5TAk4APv8tAB4ADgAAAPAC4PzPBMD8rwSu/b0Czv/dAO4B/v8LABwALAE8/0sBVv9FADYAJgAWAQb+9wPo/NcDyP+3AKgAtgHH/tYD5/z2BAX8FAUl/DQBRQFV/kwDPf0sAh3/DAH//+4A3wHP/r4Dr/2uA7/9zgPf/e4D//0MAx39LAQ9/EwCVQBF/jQDJf4UAQX/9gDnAdf/xgG3/6f/twPI/dcC6P/3/wUDFv0lAzb9RQFWAUz+OwMs/RsCDP79Au7+3QLO/r0Crv6vAcAA0P/fAvD+/wEO/x0CLv49AU7/UwBEAjT9IwMU/AME9v7lANUBxf+0AKkBuQDJ/tgE6fr4Bgf8FgEnATf9RgRX/EoEO/sqBRv8CgP9/+z/3AHN/7wCrf2wA8H90ALh//ABAP8OAR//LgA/AU8AU/5CAzP9IgMT/gIB9P7jAtQAxP+zAar/uQHK/9kC6v35Awj+FwEoADj/RwJY/UkDOv0pAxr9CQP8/esC3P/LAbz+qwOy/MEE0v3hAvL+/wIQ/h8BMAFA/k8CUv9BADIBIf4QAgH/8gHj/9IBw/+yAKsBu//KANsB6/76Awn9GAMp/TgBSQFZ/0gBOQAp/hgDCf36AusA2/7KA7v9qgKz/8IB0/7iA/P9AAIRACH+MARB+1AEUf4/ATAAIAAQ/v8E8vvhBtL6wQWy/KsCvADM/9sB7AD8/gkDGv4pATr/SQFY/0cBOP8nARj/BwL6/ukA2gLK/bkEqv2zAMQC1P3jA/T+AQASASL/MQFC/1IBT/4+Ay/9HgMP/f8C8QDh/9ABwQCx/qwDvf7MAN0C7f38AgsAG/4qAjsAS/5WA0f+NgEn/xYBB//4AekA2f/IAbkAqf+0AcUA1f/kAvX9AgMT/iMBNP9DAlT8TQQ+/S0CHgAO/v8D8PzfBND9vwKwAK7+vQLO/t0C7v/9AQz+GwIs/jsCTP9VAEYANgAmABYABgD4AOgA2P/HArj+pwK2/sUA1gLm//X/BAEV/yQBNQBFAFX+TAM9/iwAHQEN//4A7wLf/c4Dv/2uA6/9vgPP/t4B7wD/AA3/HAEt/zwBTQBV/0QBNf8kARX/BAH3/+YB1//GAbf/pgC3Acf/1wHo/vcCBv8VASb/NQFG/1UBTP87ASwAHP8LAv797QPe/s0AvgKu/a8DwP7PAOAB8P7/Aw7+HQEuAD7+TQNU/kMBNAAk/xMCBP71AOYC1v3FA7b+pwC5Acn/2AHpAPn+BgMX/SYDN/5GAFcBS/86ASsAG/4KA/397APd/swBvf+sArH9wAPR/uAB8QAA/w4BH/8uAj/+TgFTAEP/MgIj/hIBAwH1/uQC1f/EALQBqv+5AMoB2v/pAfr/BwEY/icEOPpHB1j5SQY6/CkCGv8JAPwB7P7bA8z9uwKs/7EAwgHS/+EB8v//ARD/HwEw/z8BUABS/0EBMv8hABICAv3zA+P90gLD/7IBq/+6AMsB2//qAfv/CAAZAin9OAJJ/1gASQI5/SgDGf0IAvv/6gHb/8oCu/2qA7P+wgDTAuP98gQB/BAEIfwwA0H+UAFRAEEAMQAhABEAAP/xAeIA0gDCALIArP+7Asz+2wHsAPz/CQIa/ikBOgBK/1cCSP43ASgAGP8HAfoA6v/ZAsr9uQSq/LMDxP7TAeQB9P4BARIAIv8xA0L7UQVQ/D8DMP8e/w4CAP7wAeEA0f/AAbEArf+8As393ALtAP3/CgIb/SoDO/5KAlf9RgQ3+yYFF/wGAvkA6f/YAcn+uAKp/7QAxQDVAOUA9QADABMAIwAzAEMBU/5NAz78LQMe/w0AAAHw/t8C0P6/ArD+rQK+/80A3gHu//0ADAIc/CsFPPtLBVb8RQI2/yUBFv8FAfj+5wPY/scCuP2nArb/xQHWAOb/9QAEART/IwE0/0QAVQFNAD3+LAMd/QwD//7uAN8Bz/++Aq/+rgG//84C3/7uAv/+DAEdAC0APQBNAFUARf80AiX9FAQF/PYD5/7WAMcCt/2mBLf8xgLX/+YB9/8EARb/JQA2AUb/VQBMADwBLP8bAgz8/QTu/d0Dzv69AK4BsP+/AdAA4P/vAQD/DQAeAi79PQNO/VMCRP8zAST/EwEE//UB5v/VAsb+tQGoALj/xwLY/ucC+f4GAhf+JgE3AUf+VgJL/zoAKwAbAQv+/ALt/9wAzQG9/6wAsQDBANEB4f7wAgD+DgIf/i4CP/1OBFP9QgIz/iIBEwADAPUB5v7WAsj+uAKv/70Bzf/cAez++QMH/RQDI/0wAT4BS/4+AjH/Iv8VAgj9+wTw/eIC1//K/74CxP/QAN0B6v71AgD/CwAXASL/LP82Azj8LAQh/RYBDAABAPgA7gDlANsA0gDNAdf/4AHr//MB/QAF/w0BFv8dASYALv8kAh38EwUM+wMF/vz1A+/+5wHhANsA3wDm/+wC9P76AwD8BQIMABL/FgId/hsBFgAQ/woCBf7/Avz+9wLz/u4C6/7pAu/+8gL3/fsE//wBBAX8BwML/g0BEAEM/QgDBv4CAgH9/wP9/fsD+v74APcC+f36Av3//QAAAgD9/wIB/wAAAQEB/wAAAA==","tot":"str"}],"active":true,"x":210,"y":1040,"wires":[],"info":"1) To add a `new device`, or for fine tune an existing one, or to add `share` actions, you must edit the `global.alldevice` JSON structure.\n\n   see: https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices\n   \n   see also: https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMON-toolkit\n\n2) To add a _remote tuyaDEAMON instance_, you must edit `remotemap`\n\n   see: https://github.com/msillano/tuyaDAEMON/wiki/ver.-2.0--milestones#net-extensions"},{"id":"dfd320c0.b4f74","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"Zigbee Gateway","disableAutoStart":false,"deviceId":"bfb073b1b789b5994cro7p","deviceKey":"16a98ab0738c9d2d","deviceIp":"","retryTimeout":"100003","findTimeout":"100019","tuyaVersion":"3.1","eventMode":"event-both","x":1200,"y":140,"wires":[["2ec83963.a7d146"],["5426b54d.99298c"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"e543af34.b2468","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"Smart IR #2","disableAutoStart":false,"deviceId":"56685573d8bfc0508488","deviceKey":"95e44e12dec93db9","deviceIp":"","retryTimeout":"100057","findTimeout":"100069","tuyaVersion":"3.1","eventMode":"event-both","x":1190,"y":220,"wires":[["2ec83963.a7d146"],["4854987c.2fea88"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"5c8eb6e4.500348","type":"tuya-smart-device","z":"173260fb.d021ff","d":true,"deviceName":"Smart IR #1","disableAutoStart":false,"deviceId":"56685573d8bfc05082e6","deviceKey":"9ed2ded75aef2e6e","deviceIp":"","retryTimeout":"8043","findTimeout":"10049","tuyaVersion":"3.1","eventMode":"event-both","x":1190,"y":180,"wires":[["2ec83963.a7d146"],["c6d3a5bb.1fa638"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"ba1d97f9.86c698","type":"tuya-smart-device","z":"173260fb.d021ff","d":true,"deviceName":"Smart IR #3","disableAutoStart":false,"deviceId":"56685573d8bfc0508837","deviceKey":"d7ce90c0a98707c5","deviceIp":"","retryTimeout":"100103","findTimeout":"100109","tuyaVersion":"3.1","eventMode":"event-both","x":1190,"y":260,"wires":[["2ec83963.a7d146"],["2eabebbc.ba4784"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"5a17a058.f17be","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"smart umidifier","disableAutoStart":false,"deviceId":"554301602cf4325eae00","deviceKey":"17266b4c72b1bdb8","deviceIp":"","retryTimeout":"1000","findTimeout":"1000","tuyaVersion":"3.1","eventMode":"event-both","x":1200,"y":300,"wires":[["2ec83963.a7d146"],["71d6faf9.5c3504"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"b7a9fedf.ac7dd","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"BLE MESH（SIG）Gateway","disableAutoStart":false,"deviceId":"bf0b2ef30ffb476aa8ngzw","deviceKey":"16d9b40f95fd3e62","deviceIp":"","retryTimeout":"100153","findTimeout":"100169","tuyaVersion":"3.1","eventMode":"event-both","x":1240,"y":340,"wires":[["2ec83963.a7d146"],["c33e85bd.f37a08"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"cb5af4dc.7cb258","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"watering timer","disableAutoStart":false,"deviceId":"bfa1bdeb107d379fbckkwv","deviceKey":"36c806079b8b1545","deviceIp":"","retryTimeout":"1987","findTimeout":"1901","tuyaVersion":"3.1","eventMode":"event-both","x":1200,"y":540,"wires":[["2ec83963.a7d146"],["b896058b.3f9028"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"fdc6a9ae.1533a8","type":"tuya-smart-device","z":"173260fb.d021ff","d":true,"deviceName":"switch-4CH 2","disableAutoStart":false,"deviceId":"08435372600194fe37c8","deviceKey":"3becf0696deb2c84","deviceIp":"","retryTimeout":"100267","findTimeout":"100271","tuyaVersion":"3.1","eventMode":"event-both","x":1190,"y":380,"wires":[["2ec83963.a7d146"],["e20004fc.2c23b8"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"61c5fb6c.c4fad4","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"smart camera","disableAutoStart":false,"deviceId":"bfbe31dc672657857cxsi0","deviceKey":"025cb798a07ebc56","deviceIp":"","retryTimeout":"2183","findTimeout":"2189","tuyaVersion":"3.1","eventMode":"event-both","x":1200,"y":420,"wires":[["2ec83963.a7d146"],["6a21e688.4e0838"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"3db19556.7e04fa","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"switch module#1","disableAutoStart":false,"deviceId":"bfa355aa196ae5975cy6ii","deviceKey":"10ad2960ff4d08d0","deviceIp":"","retryTimeout":"100193","findTimeout":"100207","tuyaVersion":"3.1","eventMode":"event-both","x":1210,"y":460,"wires":[["2ec83963.a7d146"],["668d3a7b.f2a8e4"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"1a711832.f93bb8","type":"mysql","z":"173260fb.d021ff","mydb":"7e3077c8.ff8e88","name":"*append to DB local","x":1540,"y":1260,"wires":[["9ed599c6.5dc328"]],"info":"CUSTOMIZATION:\n\nEdit for DB url and credentials. \nDisable/delete if not used."},{"id":"12896b89.d95c84","type":"tuya-smart-device","z":"173260fb.d021ff","d":true,"deviceName":"siren","disableAutoStart":false,"deviceId":"42027807d8bfc0c5831e","deviceKey":"70e17a0208ae2e5c","deviceIp":"","retryTimeout":"2000","findTimeout":"2000","tuyaVersion":"3.1","eventMode":"event-both","x":1170,"y":580,"wires":[["2ec83963.a7d146"],["74afb4e1.2c722c"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"74afb4e1.2c722c","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"42027807d8bfc0c5831e","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1590,"y":580,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true."},{"id":"e6b9ecd2.653e4","type":"function","z":"173260fb.d021ff","name":"share actions","func":"if (msg.share === undefined){\n//   node.warn([\"ERROR in 'share' object for '\" + (msg.info?(msg.info.device + \"/\" + msg.info.property):\"standalone share\") + \"'\", msg]);\n   return(null);\n}\n   //\n// node.warn([\"SHARE input\", msg])   ;\n\nif (Array.isArray(msg.share)) {\n   var arrayLength = msg.share.length;\n   var tuyastatus = global.get(\"tuyastatus\");\n   for (var i = 0; i < arrayLength; i++) {\n      let oktodo = true;\n      if (Array.isArray(msg.share[i][\"test\"])) {\n         try {\n            oktodo = msg.share[i][\"test\"].reduce((ok, cond) => ok && eval(cond), true);\n         } catch (error) {\n            node.warn([\"Error processing 'share[\" + i + \"].test' for '\" + (msg.info?(msg.info.device + \"/\" + msg.info.property):\"standalone share\") + \"': \" + error, msg.share[i]]);\n         }\n      }\n    \n      if (Array.isArray(msg.share[i][\"action\"])) {\n         if (oktodo) {\n            var actionLength = msg.share[i][\"action\"].length;\n            for (var j = 0; j < actionLength; j++) {\n                  let xshare = msg.share[i][\"action\"][j]; \n// caller values:  property: msg.infodp, value:    msg.info.value  \n                  var _cmd = {payload: {\n                            device:  msg.info?msg.info.device  :undefined,            \n                            property:msg.info?msg.info.property:undefined,\n                            value :  msg.info?msg.info.value   :undefined }};\n                            \n                   if(xshare.remote !== undefined){\n                       _cmd.payload[\"remote\"] = xshare.remote;\n                        }\n                       // compact\n                   try {\n                      if (xshare.device === null) \n                          _cmd.payload.device = undefined;\n                      else if (typeof(xshare.device) === \"string\") \n                          _cmd.payload.device = (xshare.device.startsWith('@')) ? (eval( xshare.device.substring(1))):xshare.device;\n                      if (xshare.property === null) \n                          _cmd.payload.property = undefined;\n                      else if (typeof(xshare.property) === \"string\") \n                          _cmd.payload.property = (xshare.property.startsWith('@')) ? (eval( xshare.property.substring(1))):xshare.property;\n                      if (xshare.value === null) \n                          _cmd.payload.value = undefined;\n                      else if (typeof(xshare.value) === \"string\") \n                          _cmd.payload.value = (xshare.value.startsWith('@')) ? eval( xshare.value.substring(1)): xshare.value;\n                      else  if (xshare.value !== undefined) \n                          _cmd.payload.value = xshare.value;\n//              node.warn([\"SHARE output action:\", _cmd, xshare])   \n                     node.send(_cmd);\n                   } catch (error) {\n                   let x1 =  msg.info?msg.info.device + \"/\" + msg.info.property:\"standalone share\";\n                   node.warn([\"ERROR processing 'share[\" + i + \"].action [\" + j + \"]' for '\" + x1+ \"': \" + error, msg.share[i]]);\n                   }\n                }\n            }\n\n      } else {\n         node.warn([\"ERROR in 'share[\" + i + \"]' structure for '\" +  (msg.info?(msg.info.device + \"/\" + msg.info.property):\"standalone share\") + \"' \", msg.share[i]]);\n      }\n   }\n   return (null);\n}\nnode.warn([\"ERROR in 'alldevices.share' structure for '\" + (msg.info?(msg.info.device + \"/\" + msg.info.property):\"standalone share\") + \"' \", msg.share]);\nreturn(null);\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1190,"y":1200,"wires":[["d4e02463.0041e8"]]},{"id":"d4e02463.0041e8","type":"link out","z":"173260fb.d021ff","name":"to fast_cmds","links":["c084a743.290b28"],"x":1315,"y":1200,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"5e8accb.6b52034","type":"function","z":"173260fb.d021ff","name":"*FastFormat","func":"\n// Data codification is function of the device and dps:\n// here you can add new encode functions().\n// version 2.0\nvar dataencode = {\n\n    BYTESMALLFLOAT: function (value) {\n        // transforms temperature to byte: 19.5° => 195 => C3H\n        // required by thermostat\n        var x = value;\n        if (typeof value === 'string')\n            x = Number.parseFloat(value);\n        if (Number.isNaN(x)) {\n            throw \"'value' is not a number!\";\n        }\n        return ~~(x * 10.0);\n    },\n\n    BOOLEANONOFF: function (value) {\n        // transforms 'ON'/'OFF' to boolean  true/false (very tolerant :  see https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons)\n        // it|en: can be localized for internationalization\n        if ((value == 0) || (value == null) || (value.toUpperCase() === \"OFF\") || (value.toUpperCase() === \"FALSE\") || (value.toUpperCase() === \"NO\"))\n            return false;\n        return true;\n    },\n\n    BOOLEANOPENCLOSE: function (value) {\n        // transforms 'OPEN'/'CLOSE' to boolean  true/false\n        // it|en: can be localized for internationalization\n        if ((value == 0) || (value == null) || (value.toUpperCase() === \"CLOSE\") || (value.toUpperCase() === \"CHIUSA\"))\n            return false;\n        return true;\n    },\n\n    ENUMONOFFHOLD: function (value) {\n        // transforms 'OFF'/'ON'/'HOLD' to string '0'/'1'/'2'\n        // it|en: can be localized for internationalization\n        if ((value == 0) || (value == null) || (value.toUpperCase() === \"OFF\") || (value.toUpperCase() === \"SPENTO\") || (value.toUpperCase() === \"NO\"))\n            return \"0\";\n        if ((value == 1) || (value.toUpperCase() === \"ON\") || (value.toUpperCase() === \"ACCESO\") || (value.toUpperCase() === \"YES\"))\n            return \"1\";\n        return \"2\";\n    },\n\n    STRUCTARGETTEMP: function (value) {\n        // transform the JSON structure:\n        //   {\"count\":4,\n        //    \"changes\":[{\"time\":\"00:00\",\"temp\":15.5},\n        //              {\"time\":\"07:00\",\"temp\":20},\n        //              {\"time\":\"16:30\",\"temp\":21},\n        //              {\"time\":\"21:00\",\"temp\":16.5}]}\n        // to  base64(Uint8Array[17])\n        // required by thermostat\n\n        function hmTomin(hm) { // local function\n            pieces = hm.split(':');\n            return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n        }\n        function mult10(value) {\n            return ~~(Number.parseFloat(value) * 10.0)\n        }\n\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        node.warn(\"in code \" + value);\n        if (o.count !== undefined) {\n            var buf = Buffer.alloc(o.count * 4 + 1);\n\n            buf.writeInt8(o.count, 0);\n            for (var i = 0; i < o.count; i++) {\n                buf.writeInt16BE(hmTomin(o.changes[i].time), i * 4 + 1);\n                buf.writeInt16BE(mult10(o.changes[i].temp), i * 4 + 3);\n            }\n            return buf.toString('base64');\n        } else {\n            throw \"'value' is not a {time,T}[4] struct\";\n        }\n    },\n\n    ARRAY8INT: function (value) {\n        // Transforms a UInt8Array, e.g.[17,16,16,16,15,15,17,18,19,19,18,18,18,18,17,16,17,18,18,0,0,0,0,0]\n        // as object or JSON string\n        // to  coded64 data => ERAQEA8PERITExISEhIREBESEgAAAAAA\n        // required by thermostat\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        if (Array.isArray(o)) {\n            b = Buffer.from(o);\n            return b.toString('base64');\n        } else {\n            throw \"'value' is not a (json) array !\";\n        }\n    },\n\n    STRUCTTIMEHMS: function (value) {\n        //  Transforms a time \"HH:MM:SS\"\n        //  in coded data base64(Uint16Array[3])\n        //  tentative, on work\n        pieces = value.split(':');\n        var buf = Buffer.alloc(6);\n        buf.writeInt16LE(parseInt(pieces[0]), 0);\n        buf.writeInt16LE(parseInt(pieces[2]), 2);\n        buf.writeInt16LE(parseInt(pieces[4]), 4);\n        return buf.toString('base64');\n    },\n\n    STRUCTCOLOUR: function (value) {\n        // accepts: JSON or object\n        // encode:\n        //      {   \"hex\":\"RRGGBBHHHHSSVV\" }\n        //  or: {   \"r\": RR,\n        //          \"g\": GG,\n        //          \"b\": BB\n        //        ( \"h\":HHHH,\n        //          \"s\": SS,\n        //          \"v\": VV )  }\n        // 100% = 0x64\n        //  required by humidifier led\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        if ((o.hex !== undefined) && (typeof o.hex === 'string') && (o.hex.length == 14))\n            return (o.hex);\n        if ((o.r === undefined) || (o.g === undefined) || (o.b === undefined)) {\n            throw \"'value' is not valid hex|rgb object!\";\n        }\n        var buf = Buffer.alloc(7);\n        buf.writeUInt8(o.r, 0);\n        buf.writeUInt8(o.g, 1);\n        buf.writeUInt8(o.b, 2);\n        if (o.h !== undefined) {\n            buf.writeUInt16BE(o.h, 3);\n            buf.writeUInt8(o.s, 5);\n            buf.writeUInt8(o.v, 6);\n        } else {\n            buf.writeUInt16BE(0, 3);\n            buf.writeUInt8(255, 5); //fixed ?\n            buf.writeUInt8(255, 6); //fixed ?\n        }\n        return buf.toString('hex');\n    },\n    ENUMHIGHGOODLOW: function (value) {\n        // transforms 'LOW'/'GOOD'/'HIGH' to string '0'/'1'/'2'\n        // it|en: can be localized for internationalization\n        // required by switch\n        if ((value == 0) || (value == null) || (value.toUpperCase() === \"LOW\") || (value.toUpperCase() === \"BASSA\"))\n            return \"0\";\n        if ((value.toUpperCase() === \"HIGH\") || (value == 2) || (value.toUpperCase() === \"ALTA\"))\n            return \"2\";\n        return \"1\";\n    },\n    RECMODE: function (value) {\n        // transforms 'continuous'/'events' to string '1'/'2'\n        // it|en: can be localized for internationalization\n        // required by switch\n        if ((value == 1) || (value.toUpperCase() === \"EVENTS\") || (value.toUpperCase() === \"EVENTI\"))\n            return \"1\";\n        return \"2\";\n    },\n    STRUCTINCH: function (value) {\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        var buf = Buffer.alloc(3);\n        buf.writeUInt8((o.inching) ? 1 : 0, 0);\n        buf.writeUInt16BE(o.delay, 1);\n        return buf.toString('base64');\n    },\n\n    STRUCTRAND: function (value) {\n        function hmTomin(hm) { // local function\n            pieces = hm.split(':');\n            return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n        }\n        function dayscode(val) {\n            result = 0;\n            mask = 1;\n            for (var i = 0; i < 7; i++) {\n                result |= (val.charAt(i) == '-') ? 0 : mask;\n                mask = mask << 1;\n            }\n            return (result);\n        }\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        var buf = Buffer.alloc(6 * o.length);\n        for (let i = 0; i < o.length; i++) {\n            buf.writeUInt8((o[i].active) ? 1 : 0, i * 6 + 0);\n            buf.writeUInt8(dayscode(o[i].days), i * 6 + 1);\n            buf.writeUInt16BE(hmTomin(o[i].start), i * 6 + 2);\n            buf.writeUInt16BE(hmTomin(o[i].end), i * 6 + 4);\n        }\n        return buf.toString('base64');\n    },\n\n    STRUCTREPEAT: function (value) {\n        function hmTomin(hm) { // local function\n            pieces = hm.split(':');\n            return (parseInt(pieces[0]) * 60 + parseInt(pieces[1]));\n        }\n        function dayscode(val) {\n            result = 0;\n            mask = 1;\n            for (var i = 0; i < 7; i++) {\n                result |= (val.charAt(i) == '-') ? 0 : mask;\n                mask = mask << 1;\n            }\n            return (result);\n        }\n\n        var o = value;\n        if (typeof value === 'string')\n            o = JSON.parse(value);\n        var buf = Buffer.alloc(10 * o.length);\n        for (let i = 0; i < o.length; i++) {\n            buf.writeUInt8((o[i].active) ? 1 : 0, i * 10 + 0);\n            buf.writeUInt8(dayscode(o[i].days), i * 10 + 1);\n            buf.writeUInt16BE(hmTomin(o[i].start), i * 10 + 2);\n            buf.writeUInt16BE(hmTomin(o[i].end), i * 10 + 4);\n            buf.writeUInt16BE(hmTomin(o[i].on), i * 10 + 6);\n            buf.writeUInt16BE(hmTomin(o[i].off), i * 10 + 8);\n        }\n        return buf.toString('base64');\n    },\n\n    SDSPACES: function (value) {\n        node.warn(\"ERROR: SDSPACES only decode()\")\n        return (value);\n    }\n\n};\n// -------------------------------------------------- do not change\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n        var func = new Function(wrap(obj[fname])); // ignore the node-red ⚠ warning\n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\n// true if device is a real device (virtual == cid exists)\nfunction _isVirtual(odev) {\n    return (odev.cid !== undefined);\n}\n\n// true if is a GET command  (GET == msg.payload.value not exists)\nfunction _isget(mx) {\n    return ((mx.payload.property) && (mx.payload.value === undefined));\n}\n\n// true if is a SET command  (SET == msg.value  exists)\nfunction _isset(mx) {\n    return ((mx.payload.property) && (mx.payload.value !== undefined));\n}\n\nfunction _getHome() {\n    let netmap = global.get(\"remotemap\");\n    return (netmap.itself);\n}\n\n// ============================  fast output processing\nvar req = {\n    to: null,\n    payload: {}\n}\n\n//  node.warn([\"FAST cmd input\", msg]);\n//---------------------- some assert\nif ((!msg.payload)) {\n    node.warn([\"ASSERT fail: msg.payload must exist.\", msg]);\n    return [null];\n}\nif ((msg.payload.property !== undefined) && (typeof(msg.payload.property) !== \"string\")) {\n    node.warn([\"ASSERT fail: msg.payload.property, if it exists, must be a string.\", msg]);\n    return [null];\n}\n\n// fake remote\nif (msg.payload.remote && (msg.payload.remote === _getHome())) {\n    delete msg.payload.remote;\n}\n\nif ((!msg.payload.remote) && (!msg.payload.device)) {\n    node.warn([\"ASSERT fail: msg.payload.device must exist in local.\", msg]);\n    return [null];\n}\n\n// ------------------------ expand messages for remote\n\nif (msg.payload.remote) {\n    let dx = msg.payload;\n    msg.payload = {};\n    msg.payload.value = dx;\n    msg.payload.device = \"_system\";\n    msg.payload.property = \"_proxy\";\n}\n\n// node.warn([\"FAST command\", msg]);\n// ----------------------- stuff: device normalization\n    var alld = global.get(\"alldevices\");\n    const PSEUDODP = alld.__pseudodp;\n    var devObj = _callJSONMethod(alld, \"__getODev\", msg.payload.device);\n    var  dpObj = _callJSONMethod(alld, \"__getODps\", devObj, msg.payload.property);\n    msg        = _callJSONMethod(alld, \"__normalize\",msg, devObj, dpObj, PSEUDODP);\n\n//  node.warn([\"FAST - normalized\", msg]);\n    if (msg.error){\n        node.warn([msg.error, msg]);\n        return([null]);\n    }\n    if (msg.warning){\n        node.warn([msg.warning, msg]);\n    }\n    \n// -------------- encoding data on place (so also fake can use encode functions) \nif(req.infodp !== \"multiple\") {   // multiple value MUST be encoded!\n    msg.payload.value =  _callJSONMethod(alld, \"__encodeValue\", msg.payload.value, dpObj, dataencode);\n    if ( msg.payload.value && msg.payload.value.error){\n        node.warn(msg.payload.value.error);\n        return[null];\n        }\n    }        \n   \n// 'pseudo' dpObject to process PSEUDODP \nif ((dpObj === undefined) && (PSEUDODP.includes(msg.infodp.toUpperCase()))){\n        dpObj = {\n                dp: msg.infodp,\n                } \n        }\n\n// =============================== prima SKIP\nif ((dpObj.capability !== undefined) && (dpObj.capability.toUpperCase() === \"SKIP\")) {\n    // produces response\n    var newMsg = {\n        \"from\": devObj.id,\n        \"payload\": {\n            \"deviceId\": devObj.id,\n            \"data\": {\n                \"t\": Math.floor(Date.now() / 1000),\n                \"dps\": {\n                    [dpObj.dp]: msg.payload.value\n                }\n            }\n        }\n    };\n    return [null, null, newMsg];\n}\n//  ============================= poi fake\nif (alld.fake.includes(devObj)) {\n    return [null, msg];\n}\n\n// ==============================  building request \n\nreq.topic = \"Fast cmd for \" + msg.payload.device;\n\nreq.to     = msg.to;\nreq.toDev  = msg.toDev;\nreq.infodp = msg.infodp;\nreq.payload.dps = msg.infodp.toString(); // dps always string: \"101\" or \"_connected\"\n\nif (_isVirtual(devObj)) {\n    req.payload.devId = devObj.cid;\n}\n\n// =======  request data processing encoding\n    \nif(req.infodp === \"schema\") {    \n   delete req.payload.dps;\n   req.payload.operation = \"GET\";\n   req.payload.schema  = true;   \n} else \nif(req.infodp === \"multiple\") {   \n   delete req.payload.dps;\n   req.payload.data  = msg.payload.value;   \n   req.payload.multiple  = true;   \n} else \nif (_isget(msg)) {\n    req.payload.operation = \"GET\";\n    //\n    var capp = (typeof dpObj.capability !== 'undefined') ? dpObj.capability : \"RW\";\n    if ((capp === \"WW\") || (capp === \"GW\")) {\n        delete req.payload.operation;\n        req.payload.set = null;\n    }\n} else\nif (_isset(msg)) {\n    req.payload.set = msg.payload.value;\n    }\nreturn [req, null];\n","outputs":3,"noerr":0,"initialize":"","finalize":"","x":450,"y":700,"wires":[["4b771bf3.b8cef4"],["18817677.061b9a","7d976f84.81d9a"],["44804bb7.72ee84"]],"outputLabels":["tuya","fake","skip"],"info":"CUSTOMIZATION:\n\nEdit the code to add a custom encode function.\n\nmore: \n2. add the same custom encode function to the 'format command' node\n1. add the dual custom decode function to the 'OUT data process' node\n3. add the CODENAME in the `tuyahome.lookupdecode` table."},{"id":"c084a743.290b28","type":"link in","z":"173260fb.d021ff","name":"fast_cmds","links":["1af71950.31eac7","2c0e5d31.d02b72","4242c140.fdbb2","5e693599.3f435c","739fba48.a46514","851bcf96.8ecb6","8834ba78.eef318","a131d6fe.bff008","a51db0ff.4ca74","acd5152b.5e1448","ad341350.43d4f","c86d3479.eb2f78","e4885bae.99dd58","e8f89f67.1aa7f","eea2d98c.558178","6db5220c.6c9b0c","893c740c.51b898","82e72cec.e2391","6473326d.c244ac","d4e02463.0041e8","2ed08207.23ffae"],"x":200,"y":700,"wires":[["5e8accb.6b52034"]],"l":true,"info":"Fast IN (internal use)\n\nDifferences from standard 'IN commands':\n 1.  No messages on debug pad, no log on DB\n 2.  No test of the capabilities in `alldevices`: all commands are processed.\n 3.  _So we can set `device.capabilities='NONE'` to block all commands from 'IN commands', but still executing commands from 'fast IN'._\n 4.  For tuyaDEAMON commands see 'std_cmd' node.\n"},{"id":"a9d13fa.6649ec","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"watering main","disableAutoStart":false,"deviceId":"bfa9c64e128b39eddcgwyt","deviceKey":"efc4bad697ae5ea2","deviceIp":"","retryTimeout":"10799","findTimeout":"7963","tuyaVersion":"3.1","eventMode":"event-both","x":1200,"y":500,"wires":[["2ec83963.a7d146"],["3667be8e.cb5972"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"b896058b.3f9028","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"bfa1bdeb107d379fbckkwv","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1590,"y":540,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true."},{"id":"785a29f.5c5e2d8","type":"comment","z":"173260fb.d021ff","name":"for system only","info":"","x":1920,"y":340,"wires":[]},{"id":"4ada67ea.91c738","type":"mysql","z":"173260fb.d021ff","d":true,"mydb":"93f8bfd.d0c854","name":"*append to DB remote","x":1540,"y":1320,"wires":[[]],"info":"CUSTOMIZATION\n\nEdit for DB url and credentials. \nDisable/delete if not used."},{"id":"44804bb7.72ee84","type":"link out","z":"173260fb.d021ff","name":"skip: to logging","links":["9fe80f7e.f3f7e"],"x":555,"y":740,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"6f287998.d91408","type":"link out","z":"173260fb.d021ff","name":"to logging","links":["9fe80f7e.f3f7e"],"x":1875,"y":1520,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"7d976f84.81d9a","type":"debug","z":"173260fb.d021ff","d":true,"name":"*trace: msg IN for Fake devices","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1390,"y":960,"wires":[],"info":"CUSTOMIZATION\n\n- Enable to see in the debug pad all msg sended to fake devices.\n- Normal use: disabled"},{"id":"436ff47.238370c","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"power strip","disableAutoStart":false,"deviceId":"3613666124a1600db127","deviceKey":"630673f6ade7b291","deviceIp":"","retryTimeout":"1000","findTimeout":"1000","tuyaVersion":"3.1","eventMode":"event-both","x":1190,"y":620,"wires":[["2ec83963.a7d146"],["7171632e.cb997c"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"a0d5012f.b2551","type":"tuya-smart-device","z":"173260fb.d021ff","d":true,"deviceName":"meter","disableAutoStart":false,"deviceId":"486441603c6105ca6f51","deviceKey":"84bb4fb812611a2d","deviceIp":"","retryTimeout":"2279","findTimeout":"6291","tuyaVersion":"3.3","eventMode":"event-both","x":1170,"y":660,"wires":[["2ec83963.a7d146"],["47aacea1.0d58d"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms).\n \n\nsee: https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON"},{"id":"47aacea1.0d58d","type":"subflow:ee953c15.ada29","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"486441603c6105ca6f51","type":"str"},{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"}],"x":1590,"y":660,"wires":[["81103bac.696bc8"]],"info":"CUSTOMIZATION\n\n- duplicate for any new device\n- set properties: deviceID. true.\n\n\nsee: https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON"},{"id":"3d54171f.a9e138","type":"link in","z":"173260fb.d021ff","name":"share IN","links":["e6e5a7b3.a53aa8","818feefe.ab666"],"x":780,"y":1300,"wires":[["e6b9ecd2.653e4"]],"l":true,"info":"## ENTRY point to execute a 'share'\n\nmsg Format:\n            \"info\": {\n                  \"\"\n            }\n            \"share\": [{\n                \"test\": [\n                     `condition-string-1`\n                     ... more test strings ... ],\n                \"action\": [{\n                     \"remote\"  : \"NAMEXX\",       // optional\n                     \"device\"  : `device`,\n                     \"property\": `property` |@expression,    \n                     \"value\"   : `set-value`|@expression\n                           } ... more actions...]\n                     } ... more {(test[],) action[]} ...\n                 ]\n\nsee [alldevices](https://github.com/msillano/tuyaDAEMON/wiki/tuyaDAEMOM-global.alldevices#share-actions)"},{"id":"678390f9.125df","type":"link out","z":"173260fb.d021ff","name":"to logging","links":["9fe80f7e.f3f7e"],"x":1135,"y":800,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"6830d12a.a0e64","type":"comment","z":"173260fb.d021ff","name":"IN COMMANDS","info":"","x":200,"y":560,"wires":[]},{"id":"2a17d0b8.943bd","type":"comment","z":"173260fb.d021ff","name":"real tuya devices","info":"Add here the 'real tuya-devices' i.e. the devices handled by smart-tuya-device node.\n\nSee in the wiki [how to add a new device](https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON)","x":1200,"y":100,"wires":[]},{"id":"4b771bf3.b8cef4","type":"function","z":"173260fb.d021ff","name":"pseudo DPs","func":"\n//process for pseudoDP \n//---------------------- some asserts for not fake devices\nif (!msg.toDev) {\n    node.warn([\"ASSERT fail: msg.toDev must exist in real|virtual devices.\", msg]);\n    return [null];\n}\n\n// special output message\nvar newMsg = {\n     toDev : msg.toDev,\n     payload:{operation: \"CONTROL\"}\n };\n\n// processes pseudoDP _standby, _findTimeout doing a format change.\n//  SET/GET case:\n// see also  alldevices.__pseudodp: \"['_T', '_CONNECTED','_REFRESHCYCLE', '_REFRESH','_STANDBY','_FINDTIMEOUT','MULTIPLE','SCHEMA']\",\n// case sensitive\nswitch (msg.payload.dps){\n    case \"_standby\":\n//        node.warn(\"in STANDBY\");\n        if (msg.payload.set !== undefined){          // is SET\n //           newMsg[\"standby\"] = !!(msg.payload.set);\n            newMsg.payload[\"action\"] = !!(msg.payload.set)? \"DISCONNECT\":\"CONNECT\";\n            return newMsg;\n            }\n// GET: ignore            \n        return null;\n    case \"_findTimeout\":\n         if (msg.payload.set !== undefined){      // is SET\n  //        newMsg[\"findTimeout\"] = Number(msg.payload.set);\n            newMsg.payload[\"action\"] = \"SET_FIND_TIMEOUT\";\n            newMsg.payload[\"value\"] = Number(msg.payload.set);\n            return newMsg;\n            }\n  // GET: ignore            \n        return null;\n  case \"_retryTimeout\":\n         if (msg.payload.set !== undefined){      // is SET\n  //        newMsg[\"findTimeout\"] = Number(msg.payload.set);\n            newMsg.payload[\"action\"] = \"SET_RETRY_TIMEOUT\";\n            newMsg.payload[\"value\"] = Number(msg.payload.set);\n            return newMsg;\n            }\n// GET: ignore            \n        return null;\n// not implemented: kills        \n    case \"_T\":\n    case \"_t\":\n    case \"_connected\":\n    case \"SCHEMA\":\n    case \"schema\":\n        return null;\n// implemented:  nothing to do      \n    case \"_refreshCycle\":\n    case \"_refresh\":\n    default:  \n// test for MULTIPLE case +  _standby | _findTimeout: \n// here is case sensitive\n        if ((msg.payload.data !== undefined) && (msg.payload.data._standby !== undefined)) {\n              let aval = msg.payload.data._standby;\n              delete msg.payload.data._standby;\n //             node.send(msg);\n //             newMsg[\"standby\"]=aval;\n              newMsg.payload[\"action\"] = !!(aval)? \"CONNECT\":\"DISCONNECT\";\n              node.send(newMsg);\n        }\n       if ((msg.payload.data !== undefined) && (msg.payload.data._findTimeout !== undefined)) {\n              let aval = msg.payload.data._findTimeout;\n              delete msg.payload.data._findTimeout;\n//              node.send(msg);\n//              newMsg[\"findTimeout\"]=aval;\n               newMsg.payload[\"action\"] = \"SET_FIND_TIMEOUT\";\n               newMsg.payload[\"value\"] = aval;\n               node.send(newMsg);\n       }\n      if ((msg.payload.data !== undefined) && (msg.payload.data._retryTimeout !== undefined)) {\n              let aval = msg.payload.data._retryTimeout;\n              delete msg.payload.data._retryTimeout;\n//              node.send(msg);\n//              newMsg[\"findTimeout\"]=aval;\n               newMsg.payload[\"action\"] = \"SET_RETRY_TIMEOUT\";\n               newMsg.payload[\"value\"] = aval;\n               node.send(newMsg);\n       }\n\n}  // case ends\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":450,"y":600,"wires":[["5777b120.3dc3e"]]},{"id":"fb4bfc14.6eece","type":"link in","z":"173260fb.d021ff","name":"fake_cmds_IN","links":[],"x":250,"y":780,"wires":[["18817677.061b9a"]],"l":true,"info":"INPUT for direct commands to _local fake devices_, input Messages MUST be `normalizated` to speedup next elaborations:\n\nused to update `global.tuyastatus`:\n-   `msg.payload.device   = usr-dev-name|msg.to`\n-   `msg.payload.property = undef|usr-dp-name|msg.infodp`\n-   `msg.payload.value    = undef|any`  \n\nused as keys:\n-   `msg.to     = cid|deviceId`  (mandatory)\n-   `msg.infodp = dp|pseudoDP` (mandatory)\n-   `msg.toDev  = gatewayId|deviceId` (not in fake devices)\n\nrules:\n- Only for local devices, not handled by 'tya-smart-device'.\n- pseudoDPs are defined in `global.alldevices.__pseuododp` array.\n- The device|dp `capabilities` are not checked.\n- The device _connection status is not checked.\n- SET: `value` = defined\n- GET: `value` = undefined\n- SCHEMA: `infodp` = 'schema', `property`= undefined, `value`= undefined\n\nrare in _fake devices_:\n- MULTIPLE: `infodp` = 'multiple', `property` = 'multiple', `value` = coded, sent 'as is' to device.\n\n"},{"id":"8bd00e4b.8b09e","type":"comment","z":"173260fb.d021ff","name":"selector for standard devices","info":"","x":700,"y":220,"wires":[]},{"id":"7bdff43d.ef820c","type":"comment","z":"173260fb.d021ff","name":"connection messages","info":"","x":1480,"y":60,"wires":[]},{"id":"9538139a.19ca1","type":"link in","z":"173260fb.d021ff","name":"sql_BD","links":["87a7bcc7.bedfa"],"x":970,"y":1320,"wires":[["70d88fb4.7fcc2"]],"l":true,"info":"##  Entry point for DB (sql)\n\nFormat for tuyaDAEMON Logging purpose (no log):\n\n       {\n        to|from: `deviceId`|`cid`,  // mandatory\n        infodp:  `property`,\n        topic:   \"INSERT ...\"     // sql\n       }\n   \nFormat to execute user sql (log):\n\n       {\n        to:     \"_system\",     \n        // -- userdefined DBs (see `_system`)\n        infodp: \"_sqlDBlocal\"|\"_sqlDBandroid\"|...,\n        topic:  `sql-string`\n       } \n       \nUpdate the `*DB mux-filter` node.        "},{"id":"9ed599c6.5dc328","type":"subflow:81d3b584.14c888","z":"173260fb.d021ff","name":"","env":[{"name":"deviceID","value":"_system","type":"str"},{"name":"propertyDP","value":"_sqlDBlocal","type":"str"},{"name":"value","value":"@msg._event? msg.payload: undefined","type":"str"}],"x":1750,"y":1260,"wires":[["e32fa2db.d0b7c"]]},{"id":"29e8ecd6.79a274","type":"subflow:81d3b584.14c888","z":"173260fb.d021ff","name":"","env":[{"name":"deviceID","value":"_system","type":"str"},{"name":"propertyDP","value":"_sqlDBandroid","type":"str"},{"name":"value","value":"@msg._event? msg.payload: undefined","type":"str"}],"x":1750,"y":1380,"wires":[["e32fa2db.d0b7c"]]},{"id":"e32fa2db.d0b7c","type":"link out","z":"173260fb.d021ff","name":"to log","links":["9fe80f7e.f3f7e"],"x":1935,"y":1260,"wires":[]},{"id":"74205825.bd5e98","type":"mysql","z":"173260fb.d021ff","mydb":"7e3077c8.ff8e88","name":"*append to DB local","x":1540,"y":1200,"wires":[[]],"info":"CUSTOMIZATION:\n\nEdit for DB url and credentials. \nDisable/delete if not used."},{"id":"46a8112c.cdbcf","type":"mysql","z":"173260fb.d021ff","d":true,"mydb":"93f8bfd.d0c854","name":"*append to DB remote","x":1540,"y":1380,"wires":[["29e8ecd6.79a274"]],"info":"CUSTOMIZATION\n\nEdit for DB url and credentials. \nDisable/delete if not used."},{"id":"7171632e.cb997c","type":"subflow:15c9daba.b55285","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"3613666124a1600db127","type":"str"}],"x":1600,"y":620,"wires":[["81103bac.696bc8"],["756a073a.e295b8"]]},{"id":"756a073a.e295b8","type":"link out","z":"173260fb.d021ff","name":"to low_level_IN","links":["b25c688d.705df8"],"x":1895,"y":480,"wires":[]},{"id":"2eabebbc.ba4784","type":"subflow:15c9daba.b55285","z":"173260fb.d021ff","name":"*dynamic retry","env":[{"name":"deviceId","value":"56685573d8bfc0508837","type":"str"}],"x":1600,"y":260,"wires":[["81103bac.696bc8"],["756a073a.e295b8"]],"info":"Use 'dynamic retry' in place of 'static retry' if the device is often disconneted (power strip, power plug, light bulbs etc.)\n\n- duplicate for any new device\n\nset the required parametrs:\n- deviceId: Tuya ID of the device (same value as `tuya-smart-device-node`)\n- MinTimeout: the timeout of fast attempts, in sec.\n- MaxTimeout: the timeout of slow attempts, in sec.\n\nsee: [Howto: add a new device to tuyaDAEMON](https://github.com/msillano/tuyaDAEMON/wiki/Howto:-add-a-new-device-to-tuyaDAEMON)"},{"id":"2b66a27e.d6726e","type":"subflow:e1c6cc8a.2f92a","z":"173260fb.d021ff","name":"*REFRESH","env":[{"name":"deviceID","value":"486441603c6105ca6f51","type":"str"},{"name":"name (same as device node)","value":"meter","type":"str"}],"x":950,"y":660,"wires":[["a0d5012f.b2551"],["678390f9.125df"]]},{"id":"946d7931.c2a828","type":"debug","z":"173260fb.d021ff","d":true,"name":"*trace: msg IN for Real devices","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1390,"y":920,"wires":[],"info":"CUSTOMIZATION\n\n- Enable to see in the debug pad all msg sended to fake devices.\n- Normal use: disabled"},{"id":"cb0e33e6.f0a6b","type":"tuya-smart-device","z":"173260fb.d021ff","deviceName":"WiFi plug","disableAutoStart":false,"deviceId":"bf94066e80ba060a04vmxi","deviceKey":"ddfd532e9962d0a8","deviceIp":"","retryTimeout":"5000","findTimeout":"3000","tuyaVersion":"3.1","eventMode":"event-both","x":1180,"y":700,"wires":[["2ec83963.a7d146"],["572ec9e9.c41048"]],"info":"CUSTOMIZATION\n\n  - duplicate for any new device\n  - set proprties: deviceId (or IP), key, retry timeout (1000 ms), find timeout (5000 ms)."},{"id":"3d5897cf.378f68","type":"subflow:e1c6cc8a.2f92a","z":"173260fb.d021ff","name":"","env":[{"name":"deviceID","value":"bf94066e80ba060a04vmxi","type":"str"}],"x":910,"y":700,"wires":[["cb0e33e6.f0a6b","29e990a5.dd72d"],["678390f9.125df"]]},{"id":"572ec9e9.c41048","type":"subflow:15c9daba.b55285","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"bf94066e80ba060a04vmxi","type":"str"},{"name":"MinTimeout","value":"2","type":"num"}],"x":1600,"y":700,"wires":[["81103bac.696bc8"],["756a073a.e295b8"]]},{"id":"1101a53c.b61d6b","type":"comment","z":"173260fb.d021ff","name":"Dbase logging","info":"","x":1210,"y":1360,"wires":[]},{"id":"c4463434.4fd7b8","type":"subflow:3332031a.de38fc","z":"173260fb.d021ff","name":"","env":[],"x":1200,"y":740,"wires":[["2ec83963.a7d146"],["db4cb537.59d698"]]},{"id":"db4cb537.59d698","type":"subflow:15c9daba.b55285","z":"173260fb.d021ff","name":"","env":[{"name":"deviceId","value":"sonoff001","type":"str"},{"name":"MinTimeout","value":"4","type":"num"},{"name":"MaxTimeout","value":"120","type":"str"}],"x":1600,"y":740,"wires":[["81103bac.696bc8"],["756a073a.e295b8"]]},{"id":"b8e273f8.d51a7","type":"link in","z":"173260fb.d021ff","name":"event in","links":["2e4937fc.2ef1f8"],"x":495,"y":1440,"wires":[["65eb2aa.067dfd4","f1edf094.cfc34"]]},{"id":"f1edf094.cfc34","type":"function","z":"173260fb.d021ff","name":"notification","func":"const TIMEOUT = 20000;\n\nvar urls = global.get(\"remotemap\");\n\ncmdlist = flow.get(\"waitcmd\");\n//  node.warn([\"inPUT SET \", msg, cmdlist]);\nif (cmdlist === undefined)\n  cmdlist = [];\n  \ncmdlist = cmdlist.filter(obj => obj._t + TIMEOUT > Date.now()); \n\n// remote SET msg: stores it to send delayed answewr  \nif(msg.payload && msg.payload.remote_from && (msg.infodp !== \"_toLogging\"))\n{\n//  node.warn([\"in SET \", msg, cmdlist])\n  msg['_t'] = Date.now();\n  cmdlist.push(msg); \n  flow.set(\"waitcmd\", cmdlist);\n  return null;\n}\n/*\n{\n    \"remote\": \"DEVPC\",\n    \"device\": \"_system\",\n    \"property\": \"_toLogging\",\n    \"value\": {\n        \"remote_from\": \"ANDROID\",\n        \"deviceId\": \"bfa355aa196ae5975cy6ii\",\n        \"data\": {\n            \"dps\": {\n                \"1\": \"OFF\"\n            }\n        }\n    }\n}\n*/\n// noting to do\nif (cmdlist.length < 1 ) return null;\n// test response\nif(msg.info && msg.info.value && (msg.infodp !== \"_toLogging\")) {\n   cmdlist.forEach(function (oldmsg, index) {\n//    node.warn([\"test GET \", msg, oldmsg]);\n           if (oldmsg.to == msg.from){\n                var cmm ={\n                    payload:{\n                      remote : oldmsg.payload.remote_from,\n                      device:\"_system\",\n                      property: \"_toLogging\",\n                      value:{\n                            remote_from : urls.itself,\n                            deviceId : oldmsg.to,\n                            data:{\n                                dps: {}\n                                }\n                       }\n                     }};\n                cmm.payload.value.data.dps[msg.infodp] = msg.info.value;   \n       node.warn([\"in GET \", msg, cmm]);\n               node.send( cmm );\n            }\n  \n   });\n}\n\nreturn null;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":670,"y":1440,"wires":[["58c718a1.bbd748"]]},{"id":"66c51b24.228eb4","type":"inject","z":"173260fb.d021ff","name":"Plug STANDBY true","props":[{"p":"payload.device","v":"Wifi Plug","vt":"str"},{"p":"payload.property","v":"_standby","vt":"str"},{"p":"payload.value","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":210,"y":1700,"wires":[["7d098f27.1bff7"]]},{"id":"7d098f27.1bff7","type":"link out","z":"173260fb.d021ff","name":"","links":["8a1da02d.424ae"],"x":415,"y":1700,"wires":[]},{"id":"8792104e.e64d4","type":"function","z":"173260fb.d021ff","name":"*Info commands filter","func":"// kills unwanted tuyaDEAMON info messages & MQTT\n// Simple case based only on device ID\n// You can add more tests, based on single data point dp (in msg.infodp)\nif((typeof(msg.to) !== \"string\") && (typeof(msg.from) !== \"string\") )\n         node.warn([\"ASSERT fail: in msg the to/from (string) must exist.\", msg]) ;   \nif(typeof(msg.infodp) !== \"string\")\n         node.warn([\"ASSERT fail: in msg the msg.infodp (string) must exist.\" , msg]) ;   \n\n// ==================== for COMMANDS msg TO devices\nswitch (msg.to){    \n    case \"bfa1bdeb107d379fbckkwv\":                    // watering switch   \n    case \"bfa9c64e128b39eddcgwyt\":                    // watering timer   \n       return null;  // killed\n    case \"bf8c4fd0c03067079cplb4\":                    // tuya bridge trigger\n         if (msg.infodp === \"7\") return(null);\n         break;\n    case \"_system\":\n         if (msg.infodp === \"_zeroTask\") return(null);   // fast benchmarks\n         if (msg.infodp === \"_toLogging\") return(null);   //  internal use: REST remote echo\n         if (msg.infodp === \"_proxy\") return(null);   //  internal use: REMOTE commands \n        break;\n\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1200,"y":1060,"wires":[["d62f5a18.fe10b8","7316efb9.f1d1c"]],"info":"CUSTOMIZATION:\n\nFilter to reduce info messages on Debug pad.\n\n- On installation and test:\n  Best don't filer any message.\n- On production:\n  Better to filter not useful events.\n\n_________________________________\n  \nSee the example filter:\n \nTest can be done on \n       msg.from:            RX info, the deviceId\n       msg.to:              TX info, the deviceId\n       msg.infodp:          the dpId          \n  \n   "},{"id":"9fe75b23.a05408","type":"link out","z":"173260fb.d021ff","name":"events info","links":["39f74e4e.a48f02"],"x":1470,"y":1140,"wires":[],"l":true},{"id":"7316efb9.f1d1c","type":"link out","z":"173260fb.d021ff","name":"commands info","links":[],"x":1460,"y":1060,"wires":[],"l":true},{"id":"5922e185.46297","type":"comment","z":"173260fb.d021ff","name":"Test version 2.1","info":"","x":160,"y":1640,"wires":[]},{"id":"40ef2712.d53ea8","type":"inject","z":"173260fb.d021ff","name":"Plug STANDBY false","props":[{"p":"payload.device","v":"Wifi Plug","vt":"str"},{"p":"payload.property","v":"_standby","vt":"str"},{"p":"payload.value","v":"false","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":210,"y":1740,"wires":[["f260f4ac.978c98"]]},{"id":"f260f4ac.978c98","type":"link out","z":"173260fb.d021ff","name":"","links":["8a1da02d.424ae"],"x":415,"y":1740,"wires":[]},{"id":"7c4c2941.1c90a8","type":"inject","z":"173260fb.d021ff","name":"Plug ON","props":[{"p":"payload.device","v":"power strip","vt":"str"},{"p":"payload.property","v":"Switch2","vt":"str"},{"p":"payload.value","v":"ON","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":160,"y":1800,"wires":[["dbaa0d27.77ed5"]]},{"id":"dbaa0d27.77ed5","type":"link out","z":"173260fb.d021ff","name":"","links":["8a1da02d.424ae"],"x":415,"y":1800,"wires":[]},{"id":"81fa486f.002308","type":"inject","z":"173260fb.d021ff","name":"Plug OFF","props":[{"p":"payload.device","v":"power strip","vt":"str"},{"p":"payload.property","v":"Switch2","vt":"str"},{"p":"payload.value","v":"OFF","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":160,"y":1840,"wires":[["aa615c60.56ca4"]]},{"id":"aa615c60.56ca4","type":"link out","z":"173260fb.d021ff","name":"","links":["8a1da02d.424ae"],"x":415,"y":1840,"wires":[]},{"id":"29e990a5.dd72d","type":"debug","z":"173260fb.d021ff","name":"WIFI","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1280,"y":780,"wires":[]},{"id":"7e3077c8.ff8e88","type":"MySQLdatabase","name":"PC server","host":"localhost","port":"3306","db":"tuyathome","tz":"","charset":"UTF8"},{"id":"93f8bfd.d0c854","type":"MySQLdatabase","d":true,"name":"ANDROID","host":"192.168.1.19","port":"3306","db":"tuyathome","tz":"","charset":"UTF8"}]