[
    {
        "id": "64074ca.02860b4",
        "type": "tab",
        "label": "core_MQTT",
        "disabled": false,
        "info": "# tuyaDAEMON.core.MQTT #\nThis flow extends tuyaDEAMON.core with an MQTT broker.\n\n### Advantages\n *   Use of standard MQTT client as UI interface to tuyaDAEMON. I chose [MQTTExplorer](http://mqtt-explorer.com) because it is easy to use, complete, portable.\n \n *   Use of standard MQTT clients applications in smartphones, (my favorite for Android is [IOT MQTT Panel](www.snrlab.in/category/iot) to build specialized interfaces to some tasks (e.g. watering)\n \n *   Interface for the exchange of data and commands with more application and automation systems that use this protocol. Using TRIGGER, we can remotely control tuyaDAEMON and the connected systems. \n \n### Installation\n \n  note: tuyadaemon.core.MQTT can be installed (and tested) even without any Tuya device.\n  \n - Download last version and import it in node-red tuyaDAEMON, using a new flow.\n - Or enable the flow, if it is present.\n\n - One instance: enable `tuyaDEAMON broker` and link clients\n - More instances: chose between one `tuyaDEAMON broker` (disable others) or many `tuyaDEAMON broker`.\n\n\n \n"
    },
    {
        "id": "5e5a634a.3dd57c",
        "type": "mqtt out",
        "z": "64074ca.02860b4",
        "name": "client MQTT out: events",
        "topic": "",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "337e95bb.d94d9a",
        "x": 550,
        "y": 280,
        "wires": []
    },
    {
        "id": "d9a39495.b40668",
        "type": "mqtt in",
        "z": "64074ca.02860b4",
        "name": "client MQTT in: commands",
        "topic": "tuyaDAEMON/DEVPC/+/command/#",
        "qos": "1",
        "datatype": "auto",
        "broker": "337e95bb.d94d9a",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 550,
        "y": 340,
        "wires": [
            [
                "a71345ed.371c68"
            ]
        ]
    },
    {
        "id": "5481379d.427ab8",
        "type": "aedes broker",
        "z": "64074ca.02860b4",
        "d": true,
        "name": "tuyaDEAMON broker",
        "mqtt_port": 1883,
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "8088",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "dburl": "",
        "usetls": false,
        "credentials": {},
        "x": 540,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a71345ed.371c68",
        "type": "function",
        "z": "64074ca.02860b4",
        "name": "format std command",
        "func": "function yesSpecial(str){\n      let tmp = str.replace('%23','#').replace('%2B','+').trim();\n      return ((tmp === undefined)|| (tmp === ''))?undefined : tmp.replace('%25','%');     // the only spaces (' ') becomes undefined\n}\n\n    let inptop = msg.topic + '//////';\n    let pars = inptop.split(\"/\");\n    newmsg = {payload:{}};\n//    node.warn([\"pre in MQTT\",pars, newmsg ]);\n    if ((pars[0]=='tuyaDAEMON') && (pars[3]=='command')) {\n        newmsg.payload['remote']   =  pars[1]; \n        newmsg.payload['device']   =  yesSpecial(pars[2]) ; \n        newmsg.payload['property'] =  yesSpecial(pars[4]) ; \n        newmsg.payload['value']    =  (msg.payload)?JSON.parse(msg.payload): msg.payload ; \n//     node.warn([\"post in MQTT\",pars, newmsg ]);\n// null cases\n        if (!newmsg.payload.value) delete(newmsg.payload.value);\n        if (!newmsg.payload.property) delete(newmsg.payload.property);\n        if (!newmsg.payload.device) delete(newmsg.payload.device);\n        return newmsg;       \n    }\n return null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 340,
        "wires": [
            [
                "c6eec3b9.38b0b",
                "4ff9cef5.4369b"
            ]
        ]
    },
    {
        "id": "39f74e4e.a48f02",
        "type": "link in",
        "z": "64074ca.02860b4",
        "name": "to MQTT",
        "links": [
            "9fe75b23.a05408"
        ],
        "x": 115,
        "y": 280,
        "wires": [
            [
                "650b8f33.afb81",
                "ec6fabc5.d5f158"
            ]
        ]
    },
    {
        "id": "650b8f33.afb81",
        "type": "function",
        "z": "64074ca.02860b4",
        "name": "format event",
        "func": "//\nfunction noSpecial(str) {\n    if (str === undefined) return(\"\");\n    let tmp = str.replace('%', '%25').replace('#', '%23');\n    return tmp.replace('+', '%2B');\n}\n\nremote = global.get(\"instance_name\");\nif ( msg.remote_from  && ( msg.remote_from !== \"NULL\"))\n   remote = msg.remote_from ;\nlet xtopic = flow.get(\"topic-events\").replace(\"+remote+\",remote);\n\n// Special case list devices \nif ((msg.from === \"_system\") && (msg.infodp === \"list\") && (msg.info.value.length > 0)) {\n    msg.info.value.forEach((device, index) => {\n         lmsg = {\n              topic : xtopic.replace(\"+device+\", noSpecial(device)).replace(\"/+property+\",\"\"),\n//            topic: 'tuyaDAEMON/' + remote + '/' + noSpecial(device) + '/event',\n              payload: null\n        };\n        node.send(lmsg);\n    });\n    return null;\n}\n\n// Special case list devices   ( from _system/_tuyastatus)\nif ((msg.from === \"_system\") && (msg.infodp === \"_tuyastatus\") && (msg.info.value.list !== undefined)) {\n    msg.info.value.list.forEach((device, index) => {\n        lmsg = {\n            topic : xtopic.replace(\"+device+\", noSpecial(device)).replace(\"/+property+\",\"\"),\n    //        topic: 'tuyaDAEMON/' + remote + '/' + noSpecial(device) + '/event',\n            payload: null\n        };\n        node.send(lmsg);\n    });\n    return null;\n}\n\n// Special case schema devices   ( from _system/_tuyastatus)\nif ((msg.from === \"_system\") && (msg.infodp === \"_tuyastatus\") && (msg.info.value.value.schema !== undefined)) {\n    //         msg.info.value.value.schema.forEach((dps, val) => {\n    for (const[dps, val] of Object.entries(msg.info.value.value.schema)) {\n        lmsg = {\n //           topic: 'tuyaDAEMON/' + remote + '/' + noSpecial(msg.info.value.device) + '/event/' + noSpecial(dps),\n            topic : xtopic.replace(\"+device+\", noSpecial(msg.info.value.device)).replace(\"+property+\",noSpecial(dps)),\n            payload: (val === null | val === \"\") ? '\"null\"' : JSON.stringify(val)\n        };\n        if (dps !== '_t')\n            node.send(lmsg);\n    }\n    return null;\n}\n// general case\n// let xtopic = 'tuyaDAEMON/' + remote + '/' + noSpecial(msg.info.device) + '/event/' + noSpecial(msg.info.property);\nnewmsg = {\ntopic : xtopic.replace(\"+device+\", noSpecial(msg.info.device)).replace(\"+property+\", noSpecial(msg.info.property)),\npayload : (msg.info.value === \"\" | msg.info.value === \"\" ) ? '\"null\"' : JSON.stringify(msg.info.value)\n}\nif (msg.info.property === '_t')\n    return null;\nreturn newmsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 280,
        "wires": [
            [
                "5e5a634a.3dd57c",
                "84e57447.7a8ff8"
            ]
        ]
    },
    {
        "id": "84e57447.7a8ff8",
        "type": "debug",
        "z": "64074ca.02860b4",
        "d": true,
        "name": "MQTT TX EVENTS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 500,
        "wires": []
    },
    {
        "id": "c6eec3b9.38b0b",
        "type": "link out",
        "z": "64074ca.02860b4",
        "name": "from MQTT",
        "mode": "link",
        "links": [
            "8a1da02d.424ae"
        ],
        "x": 1055,
        "y": 340,
        "wires": []
    },
    {
        "id": "4ff9cef5.4369b",
        "type": "debug",
        "z": "64074ca.02860b4",
        "d": true,
        "name": "MQTT COMMANDS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 460,
        "wires": []
    },
    {
        "id": "ec6fabc5.d5f158",
        "type": "debug",
        "z": "64074ca.02860b4",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 420,
        "wires": []
    },
    {
        "id": "285a48e918248346",
        "type": "comment",
        "z": "64074ca.02860b4",
        "name": "CORE MQTT extension  2.2.0",
        "info": "",
        "x": 200,
        "y": 60,
        "wires": []
    },
    {
        "id": "120a05ad22ec628c",
        "type": "config",
        "z": "64074ca.02860b4",
        "name": "Global _MQTT config",
        "properties": [
            {
                "p": "topic-events",
                "pt": "flow",
                "to": "tuyaDAEMON/+remote+/+device+/events/+property+",
                "tot": "str"
            },
            {
                "p": "topic-commands",
                "pt": "flow",
                "to": "tuyaDAEMON/+remote+/+device+/commands/+property+",
                "tot": "str"
            }
        ],
        "active": true,
        "x": 220,
        "y": 120,
        "wires": [],
        "info": "## _mqtt Configuration\n\nnothing to do here: use node-red 'MQTT server configuration' in client nodes.\n\n## MQTT tuyaDEAMON module\n\nThis optional module add to CORE a MQTT broker.\n\n\n** Configuration\n\n- Topic architecture: \n             'tuyaDAEMON/<instance_name>/<device>/command/<property>'  JSON value |\n             'tuyaDAEMON/<instance_name>/<device>/event/<property>'\n       \n     and values are always JSON.\n\n- The default includes a 'MQTT broker' (server) node. Clients nodes and external client (like MQTTexplorer) can connect to this server.\n\n- If you like to use an external broker (e.g. Mosqitto) disable/delete the 'MQTT broker' node and use node-red 'MQTT server configuration' in client nodes to link the external broker.\n\n- In case of many insataces you can:\n   a) any instance uses own broker.\n   b) an instace (master: better if 24/7 on) works as broker for all others (slaves):\n     - in slaves disable/delete the 'MQTT broker' node.\n     - in slaves set the 'MQTT server configuration' in client nodes to link the master.\n     - the external clients (like MQTTexplorer) must connect the master.\n   c) all instances uses and external MQTT broker (e.g. Mosquitto).\n\n\n** Test **\n\nUse a MQTT Client (e.g. MQTTExplorer) to connect to http://localhost:1883\n\nMessages example:\n\n-tuyaDAEMON/DEVPC/tuya_bridge/command/relay  value=\"ON\"\n-tuyaDAEMON/DEVPC/tuya_bridge/event/relay  value=\"ON\"\n"
    },
    {
        "id": "e3c5a751a61febd8",
        "type": "comment",
        "z": "64074ca.02860b4",
        "name": "test only",
        "info": "",
        "x": 660,
        "y": 420,
        "wires": []
    },
    {
        "id": "6a68de6950c7ae1f",
        "type": "comment",
        "z": "64074ca.02860b4",
        "name": "MQTT topic: tuyaDAEMON/DEVPC/core/command/_info        value=\"ok\"",
        "info": "Copy-paste the topic, set JSON value. Then PUBLISH\n\nExpected response (same as SET std cmds):\n\n          [\"TX: SET fake core/version\",\"ok\"]\n\nThen (as usual):\n\n          [\"RX: core/version\", object]\n\nOpen: \n\n          array[2]\n               0: \"RX: core/version\"\n               1: object\n                   devices: object\n                      real: array[0]\n                      virtual: array[0]\n                      fake: array[1]\n                          0: \"core\"\n                   core_mqtt: \"2.2.0\"\n                   core: \"2.2.0\"\n\n In MQTTExplorer:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                    version = {\"devices\":{\"real\":[],\"virtual\":[],\"fake\":[\"core\"]},\"core_mqtt\":\"2.2.0\",\"core\":\"2.2.0\"}\n",
        "x": 320,
        "y": 640,
        "wires": []
    },
    {
        "id": "79fd8d3e9f0fd14a",
        "type": "comment",
        "z": "64074ca.02860b4",
        "name": "CORE test using MQTT (readme)",
        "info": "\nAll tuyaDEAMON commads and events can be handled via MQTT\n\nExamples:\n \n test CORE properties using 'MQTTExplorer' (http://mqtt-explorer.com/) as UI client connected to 'localhost'.\n\nTopic: \n\ngeneral [structure](https://github.com/msillano/tuyaDAEMON#mqtt-interface): \n\n    tuyaDAEMON/<remote_name>/<device_name>|' '/event|command[/<property_name>]\n\nValue (payload):\n\n   always JSON:\n       a string        = \"string\"\n       boolean true    = true\n       null, undefined = < nothing, clean pad >\n     \nhit:\n   If 'PUBLISH' is without effect, check for extra spaces before or after the topic string (common mistake using copy-paste).\n   \nMore examples can be found in ['github.tuyaDEAMON.tuyaTRIGGER.readme'](https://github.com/msillano/tuyaDAEMON/blob/main/tuyaTRIGGER/README.md#mqtt-tuya_bridge-tests)-",
        "x": 190,
        "y": 580,
        "wires": []
    },
    {
        "id": "b4c893136a2c3d42",
        "type": "comment",
        "z": "64074ca.02860b4",
        "name": "MQTT topic: tuyaDAEMON/DEVPC/core/command/_info        value: nothing",
        "info": "Copy-paste the topic, clear JSON pad. then PUBLISH\n\nExpected response (same as GET std cmds):\n          \"TX: GET fake core/version\"\n\nthen (after Deploy or Restart):\n\n\n          [\"RX: core/version\",\"none\"]\n          \nor (after a SET):\n\n          [\"RX: core/version\", object]\n          \nIn MQTTExplorer:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                    version = \"none\"\nor:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                    version = {\"devices\":{\"real\":[],\"virtual\":[],\"fake\":[\"core\"]},\"core_mqtt\":\"2.2.0\",\"core\":\"2.2.0\"}\n          ",
        "x": 330,
        "y": 680,
        "wires": []
    },
    {
        "id": "f1e2ef3098135818",
        "type": "comment",
        "z": "64074ca.02860b4",
        "name": "MQTT topic: tuyaDAEMON/DEVPC/core/command/_DBase        value: nothing",
        "info": "Copy-paste the topic, set JSON value. then PUBLISH\n\nExpected response (same as GET std cmds):\n           \"TX: GET fake core/_DBase\"\n\nthen (as usual):\n           [\"RX: core/_DBase\",true]\n           \nIn MQTTExplorer:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                    _DBase = true\n           ",
        "x": 340,
        "y": 740,
        "wires": []
    },
    {
        "id": "9b15173063f9fc9f",
        "type": "comment",
        "z": "64074ca.02860b4",
        "name": "MQTT topic: tuyaDAEMON/DEVPC/core/command/_heartbeat        value=nothing",
        "info": "Copy-paste the topic, clear JSON pad. Then PUBLISH\n\nExpected response (same as GET std cmds):\n          TX: GET fake core/_heartbeat\n\nthen (as usual):\n          [\"RX: core/_heartbeat\",\"09:37:10\"]\n          \nIn MQTTExplorer:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                     _heartbeat = \"09:37:10\" ",
        "x": 350,
        "y": 800,
        "wires": []
    },
    {
        "id": "4b88277f39463790",
        "type": "comment",
        "z": "64074ca.02860b4",
        "name": "MQTT topic: tuyaDAEMON/DEVPC/core/command      value= nothing",
        "info": "Copy-paste the topic, clear JSON pad. Then PUBLISH\n\nExpected response (same as SCHEMA std cmds):\n\n         TX: GET SCHEMA: fake core\n\nThen (as usual):\n\n         [\"RX: core/_DBase\",true]\n         [\"RX: core/_heartbeat\",\"09:49:08\"]\n         [\"RX: core/version\",\"none\"]\n\nIn MQTTExplorer:\n\n       tuyaDAEMON\n          DEVPC\n              core\n                 event\n                    _DBase = true\n                    _heartbeat = \"09:49:38\"\n                    version = \"none\"",
        "x": 320,
        "y": 860,
        "wires": []
    },
    {
        "id": "f2fd729d8609cfb0",
        "type": "inject",
        "z": "64074ca.02860b4",
        "name": "statup only",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.4",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 435,
        "y": 120,
        "wires": [
            [
                "397177b93ded85b1"
            ]
        ],
        "icon": "node-red/trigger.svg",
        "l": false
    },
    {
        "id": "397177b93ded85b1",
        "type": "function",
        "z": "64074ca.02860b4",
        "name": "mqtt flow startup",
        "func": "// So, if some 'On Start' function  requires 'Global Config' data, palace it there.\n// --------------- locals\nconst asMODULE = \"modules.core_mqtt\";\nconst VERSION = \"2.2.0\";\n// --------------------------------------------------- standard\nif (!global.get(\"coresetup\")){\n    node.warn(\"STARTUP ERROR: adjust startup delays.\");\n    return([null]);\n}\n// --------------------- init startup for the flow.\nglobal.set(asMODULE,  VERSION);  // update\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// nothing to do\n",
        "finalize": "global.set(\"modules.core_mqtt\", undefined);\n",
        "libs": [],
        "x": 550,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "337e95bb.d94d9a",
        "type": "mqtt-broker",
        "name": "ANDROID",
        "broker": "http://192.168.1.4",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    }
]