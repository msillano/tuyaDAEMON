[{"id":"81d3b584.14c888","type":"subflow","name":"mirror msg","info":"Build an update message for 'mirror' devices.\n\nUsed to process tuyaTRIGGERS.\n\n- `deviceID`: the 'mirror' device ID or CID\n- `fakeDP`: the data point id. Convention: user defined, equal to related tuyaTRIGGER, number (1000-2000). \n- `value`: the new value. If the value starts with '@', then it is eval()ued: exemple '@msg.payoad.set' => eval('msg.payoad.set'))\n\nnote: The 'mirror' device MUST exist in the `fake` branch of **alldevices**.","category":"","in":[{"x":120,"y":80,"wires":[{"id":"6d1b2b8f.c5e554"}]}],"out":[{"x":460,"y":80,"wires":[{"id":"6d1b2b8f.c5e554","port":0}]}],"env":[{"name":"deviceID","type":"str","value":""},{"name":"fakeDP","type":"str","value":""},{"name":"value","type":"str","value":""}],"color":"#87A980","icon":"node-red/debug.svg"},{"id":"6d1b2b8f.c5e554","type":"function","z":"81d3b584.14c888","name":"do mirror msg","func":"// local function\n// note: the value param can also be a @variable:\n//e.g. \"@msg.payload.set\" => eval(msg.payload.set) \nfunction _sendMirror(idevice, dpname, value) {\n    // builds a fake OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": idevice,\n            \"data\": {\n                \"dps\": {}\n                //          \"dps\":[dpname = value]\n            }\n        }\n    };\n    value = value.toString().trim();\n    if (value.startsWith('@')){\n        value = eval(value.substring(1));\n    }\n    newMsg.payload.data.dps[dpname.toString()] = value;\n    return newMsg;\n}\n\nreturn _sendMirror(env.get(\"deviceID\"), env.get(\"fakeDP\"), env.get(\"value\"));\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":300,"y":80,"wires":[[]]},{"id":"66ca1554.e4c85c","type":"subflow","name":"red trigger","info":"Build a REDTRG msg for tuya_bridge device.\n\nREDTRG values are in range 2000-3000 (convention)\n\nNote: it uses dp 102 (for  [Switch MS-104]). \nChange the code if your tuya-bridge device uses a different dp.","category":"","in":[{"x":60,"y":80,"wires":[{"id":"f0932848.b39158"}]}],"out":[{"x":360,"y":80,"wires":[{"id":"f0932848.b39158","port":0}]}],"env":[{"name":"TRGnumber","type":"str","value":"800"}],"color":"#A6BBCF","inputLabels":["any msg"],"outputLabels":["continue"],"icon":"font-awesome/fa-arrow-right"},{"id":"f0932848.b39158","type":"function","z":"66ca1554.e4c85c","name":"send  X TRIGGER","func":"const triggerDP = 7;  // tuya-bridge countdown\n// normal use: no msg.payload.data.dps[triggerDP]\n// ack use:   msg.payload.data.dps[triggerDP] > 800\n if ((msg.payload.data != undefined) && (msg.payload.data.dps != undefined) && (msg.payload.data.dps[triggerDP] < 800))\n    return null;\nvar n = env.get(\"TRGnumber\");\nvar trig = {\n       \"payload\": {\n          \"dps\":triggerDP, \n          \"set\": parseInt(n)       \n          }\n}\n\nreturn trig ;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\nflow.set(\"tsstart\", null);\nflow.set(\"pingstat\",{\n      total:1,\n      test: 0,\n      sum:0,\n      min: 100000000000,\n      max:0\n});\n","finalize":"","x":210,"y":80,"wires":[[]]},{"id":"ee953c15.ada29","type":"subflow","name":"connected","info":"Handles tuya device status changes.\r\n\r\n\r\nProcesses the status of a real device , if the connection status changes:\r\n   - Creates a log msg (deviceId, \"_connected\", true/false) for standard processing\r\n \r\nIMPORTANT: set the ** deviceID ** parameter with the correct ID value.","category":"","in":[{"x":80,"y":80,"wires":[{"id":"6160136.f5f99ec"}]}],"out":[{"x":440,"y":80,"wires":[{"id":"6160136.f5f99ec","port":0}]}],"env":[{"name":"deviceId","type":"str","value":""}],"color":"#DDAA99","icon":"font-awesome/fa-rss-square"},{"id":"6160136.f5f99ec","type":"function","z":"ee953c15.ada29","name":"device connected message","func":"// set DIRECTLY global.tuyasyatus.xxxx._connected \n// send msg every change call only as trigger\n// version 1.1 (use of _callJSONMethod)\n\nvar CONN = \"_connected\";  //  tuyadaemon internal define\n// see also tuyaDAEMON.\"connection check\" function\n// local function\nfunction _sendReal(idevice, name, value){\n// builds a fake OUT message \nvar newMsg = { \"payload\":{\n      \"deviceId\": idevice,\n      \"deviceName\": name,\n      \"data\": {\n          \"dps\":{\n              \"_connected\":value\n          }}}};\nreturn newMsg;  \n}\n\n// stuff to acces global.alldevices\nvar alldevices = global.get(\"alldevices\");\nif (alldevices === undefined) return null;\n// user set id\nvar deviceId = env.get(\"deviceId\");\n// only real devices are connected\nvar dev = alldevices.real.find(device => device.id === deviceId);\nif (dev === undefined) return null;\n// found... logic process:\nvar nowconnected =  (msg.status.text == \"connected\");        // can change\nreturn(_sendReal(deviceId, dev.name, nowconnected) );\n \n\n\n\n\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// set the default status _connected to true in tuyastatus\n// creates tuyastatus entry to null.\nvar alldevices = global.get(\"alldevices\");\nif (alldevices === undefined) return null;\nvar deviceId = env.get(\"deviceId\");\nvar d = alldevices.real.find(device => device.id === deviceId);\nif (d === undefined) return null;\n//\nvar tuyastatus = global.get(\"tuyastatus\");\n    if (tuyastatus == undefined)\n        tuyastatus = {};\n    if (tuyastatus[d.name] === undefined) {\n        tuyastatus[d.name] = {_connected:null};\n        global.set(\"tuyastatus\", tuyastatus);\n    }\n    ","finalize":"","x":260,"y":80,"wires":[[]]},{"id":"638c6657.ce65c8","type":"tab","label":"tuyaDAEMON.triggers","disabled":false,"info":"**addon for tuyaDAEMON flow**\n\nThis addon enables **tuyaDAEMON TRIGGERS** handling and extends tuyaDAEMON capabilities to get a very strict integration of tuya-cloud with node-red.\n\n_Triggers can be used:_\n - to reflect in _node-red_ some **tuya events** from devices and sensors that are not caught by the _tuya-smart-device_ node, e.g. WiFi battery-powered sensors (`mirroring TRIGGER`)\n \n - to perform a ** command or smart action ** (automation) on tuya (_smartlife_), activated by _node-red_ (`REDTRIGGER`)\n \n - to run a **flow on node-red ** activated by tuya (_smartlife_), in Smart Scene Automation (`TUYATRIGGER`), due to user actions or weather conditions, geolocation or changes in the status of the tuya devices.\n \n - to fire a **node-red flow** when a device message satisfies some conditions, even more complex than those expressed in _smartlife_. (`EVNTRIGGER`)\n\n \n**Precondition:**\n\nRequires a _real device_ having a big unused parameter, writable from both Tuya and node-red.\n\n_I chose the_ Switch MS-104 _because its countdown parameter is with a large range [0-86400] and still this device can be used as WiFi switch. Plus it is small and cheap._"},{"id":"798c4138.06176","type":"link out","z":"638c6657.ce65c8","name":"to logging","links":["9fe80f7e.f3f7e"],"x":975,"y":180,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"ebf1518e.eb3e2","type":"comment","z":"638c6657.ce65c8","name":"tuyaTRIGGERS ","info":"## TRIGGER tuyaDEAMON module\n\n_A real device WiFI, having  a big unused numerical parameter, say a 'counter', writable for both **Tuya** and **node-red**, is all the required hardware to implement a robust bilateral event communication (**TRIGGER**)._\n\nsee   https://github.com/msillano/tuyaDAEMON/blob/main/tuyaTRIGGER/README.md","x":140,"y":60,"wires":[]},{"id":"69321d9a.30b7d4","type":"link in","z":"638c6657.ce65c8","name":"to tuya_bridge","links":["305e7686.63b0fa","5024d2e0.b05cec","d6c8adeb.cd279","fc22adad.2f985","18d062e0.0b631d","83ab4822.a4d028","5b00e866.1ee048","790c7224.74435c","a3dfd8c8.7dac98"],"x":210,"y":180,"wires":[["2c0a4e62.c8adf2"]],"icon":"font-awesome/fa-expand","l":true},{"id":"5024d2e0.b05cec","type":"link out","z":"638c6657.ce65c8","name":"to send","links":["69321d9a.30b7d4"],"x":1235,"y":220,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"bfddb028.1da3","type":"debug","z":"638c6657.ce65c8","d":true,"name":"trace: msg OUT from tuya_bridge","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":660,"y":360,"wires":[]},{"id":"aea82682.f3bef8","type":"status","z":"638c6657.ce65c8","name":"spy status","scope":["bd44880d.8cdda8"],"x":660,"y":120,"wires":[["fd3a31f5.8912d"]]},{"id":"2c0a4e62.c8adf2","type":"switch","z":"638c6657.ce65c8","name":"do nothing","property":"payload","propertyType":"msg","rules":[{"t":"neq","v":"null","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":335,"y":180,"wires":[["2710cd5f.1eb562","c81edba3.cbcd58"]],"l":false},{"id":"2710cd5f.1eb562","type":"debug","z":"638c6657.ce65c8","d":true,"name":"trace: msg IN for tuya_bridge","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":680,"y":320,"wires":[]},{"id":"8b585752.c9b818","type":"switch","z":"638c6657.ce65c8","name":"TUYATRGXXX","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"btwn","v":"1001","vt":"num","v2":"4999","v2t":"num"},{"t":"lt","v":"1000","vt":"num"}],"checkall":"true","repair":false,"outputs":2,"x":920,"y":260,"wires":[["aba38dbb.f8b33","9efb8156.f33d4"],["6da77dc2.b387a4"]],"info":"selects all TRIGGERS from tuya cloud (values: 801-1999), to more prosesses\nselect test pig values (0-799) (optional)\n\n"},{"id":"63e6d5d.0a5da2c","type":"link out","z":"638c6657.ce65c8","name":"connection pool","links":["c90b7eb2.07595"],"x":975,"y":120,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"fd3a31f5.8912d","type":"subflow:ee953c15.ada29","z":"638c6657.ce65c8","name":"","env":[{"name":"deviceId","value":"bf8c4fd0c030********","type":"str"},{"name":"deviceID","value":"bfa355aa196ae5975cy6ii","type":"str"}],"x":850,"y":120,"wires":[["63e6d5d.0a5da2c"]]},{"id":"642996df.e68388","type":"inject","z":"638c6657.ce65c8","name":"START PING","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":410,"y":640,"wires":[["8f6b2a1d.3ddf58"]]},{"id":"d6c8adeb.cd279","type":"link out","z":"638c6657.ce65c8","name":"to send","links":["69321d9a.30b7d4"],"x":1235,"y":540,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"faeef0bb.0924b","type":"function","z":"638c6657.ce65c8","name":"ACK  process","func":"var delta;\n\n// test on all tuya_bridge messages\n// output:  finish/ reset/more loops\nif  ((msg.payload.tuyatrigger > 699) &&\n     (msg.payload.tuyatrigger < 1000)){\n     // fallback in case of missed  ACK: restart and keep alive\n     flow.set(\"tsstart\", 0);\n     return([null, msg, msg]); \n     }\n\nif(msg.payload.tuyatrigger != 0 ) // not ACK,  nothing to do\n     return([null,null,null]); \n\n// standard 0 ACK,  nothing to do\n    var old = flow.get(\"tsstart\");\n    if (old === 0)  return([null,null,null]);   // not in ping test\n    \n    var back = Date.now();\n    delta = back - old;\n    if ((delta > 2000) || (delta < 20)) { \n// fallback in case of timeout: restart and keep alive\n         flow.set(\"tsstart\", 0);\n         return([null, null, msg]);\n         }\n\n// ok, updates stats\n  var stats = flow.get(\"pingstat\") ; \n //flow.set(\"pingstat\",{\n //     test: 0,\n //     total:0,\n //     min: 100000000000,\n //     max:0\n // set data    \n   stats.sum += delta;\n    if( stats.min > delta)\n         stats.min = delta;\n    if( stats.max < delta)\n         stats.max = delta;\n    stats.test++;  \n    stats.total--;   \n    flow.set(\"pingstat\", stats);\n \n  if (stats.total >0)  {       // more  tests  \n      flow.set(\"tsstart\", 0);\n      return [null, null, msg];\n      }   \n\n// done, does statistics & msg  \n var st = {\n    \"deviceId\":\"_system\",\n    \"data\":{\n       \"dps\":{\n           \"_trgPing\":{\n               \"count\": stats.test,\n               \"avg\": Math.floor(stats.sum/stats.test),\n               \"max\": stats.max,\n               \"min\": stats.min\n           }\n       }\n    }};  \n   msg.payload = st;\n   flow.set(\"tsstart\", 0);\n// sends results  \n   return([msg, null, null]);\n\n","outputs":3,"noerr":0,"initialize":"","finalize":"","x":650,"y":540,"wires":[["2fb79388.82d8cc"],["5bc8ec20.e12ff4"],["8bc0b981.0ca808"]],"outputLabels":["log result","reset0","more"]},{"id":"7231e545.53e66c","type":"link in","z":"638c6657.ce65c8","name":"in msg","links":["6da77dc2.b387a4"],"x":535,"y":540,"wires":[["faeef0bb.0924b"]],"icon":"font-awesome/fa-expand"},{"id":"8bc0b981.0ca808","type":"delay","z":"638c6657.ce65c8","name":"more: delay 3","pauseType":"delay","timeout":"3","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":860,"y":580,"wires":[["2af08fdb.f4934"]]},{"id":"57526a3d.919364","type":"comment","z":"638c6657.ce65c8","name":" _system :  trigger related cmds","info":"device: _system property: _trgPing\n\nThis flow implements a trigger ping test (optional).\nA refresh can be triggered using the inject node or a standard user GET command.\nDo it in a quiet moment to avoid interferences.\n\n","x":220,"y":460,"wires":[]},{"id":"39de0ee1.2f0352","type":"function","z":"638c6657.ce65c8","name":"4","func":"\n flow.set(\"tsstart\", 0);\n flow.set(\"pingstat\",{\n      total:node.name,\n      test: 0,\n      sum:0,\n      min: 100000000000,\n      max:0\n});\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n flow.set(\"tsstart\", 0);","finalize":"","x":750,"y":640,"wires":[["2af08fdb.f4934"]],"info":"Sets node name to required pings number for the test"},{"id":"6c92c626.076118","type":"function","z":"638c6657.ce65c8","name":"_system cmd selector","func":"// selects&executes commands for _system:_trgPing, _trigger\n// version 1.1 (use of _callJSONMethod)\n// --------------- locals\nvar alld = global.get(\"alldevices\");\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname]));       // ignore ⚠\n    return func.call(null).call(obj, a, b, c, d);    //invoke the function using arguments\n}\n\n// test: _system GET command? \nfunction _isGetCommand (idDev, msx) {\n return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value === undefined));\n}\n// test: _system SET command? \nfunction _isSetCommand (idDev, msx) {\n return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value !== undefined));\n}\n\n// ------------- main\n//  partial implementation of _system GET for GET _trgPing SET _trigger\n\nif (_isGetCommand(\"_system\", msg)) {  // a GET\n// find object dp\n    var oDev = _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\n    var oPx  = _callJSONMethod(alld, \"__getODps\", oDev,  msg.payload.property);\n//\n  if (oPx.dp != undefined)  // found\n    switch (oPx.dp){\n          case \"_trgPing\":\n                return([null, msg]);   //to  _trgPing:output 2\n       }\n    } \n    \nif (_isSetCommand(\"_system\", msg)) {  // a SET\n// find object dp\n    var GDev = _callJSONMethod(alld, \"__getODev\", \"_system\", \"fake\");\n    var GoPx  = _callJSONMethod(alld, \"__getODps\", GDev,  msg.payload.property);\n//\n  if (GoPx.dp != undefined)  // found\n    switch (GoPx.dp){\n       case \"_trigger\":\n           msg = {\n             \"payload\": {\n               \"dps\":7, \n               \"set\": parseInt(msg.payload.value)       \n                }\n           };\n           return([msg, null]);   // _to tuya_bridge:output 1\n       }\n    }    \n\n// ignore \nreturn([null]);\n","outputs":2,"noerr":0,"initialize":"","finalize":"","x":260,"y":540,"wires":[["790c7224.74435c","65cdad00.79d0e4"],["8f6b2a1d.3ddf58","f4c153fd.a490d"]],"info":"Select GET/SET/SCHEMA/MULTIPLE  commands \nfor 'fake' device\n\nImplementation:\n\n\"_system\":\"_trgPing\" accepts only GET: fires a data refresh.\n             \nThe stadard GET tuyaDAEMON request\n````\n    msg.payload:{\n        \"device\":\"_system\", \n        \"property\":\"_trgPing\"  \n        } \n````        \nfires a flow that implements the command.\n"},{"id":"8f6b2a1d.3ddf58","type":"delay","z":"638c6657.ce65c8","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":600,"y":640,"wires":[["39de0ee1.2f0352"]]},{"id":"5bc8ec20.e12ff4","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"reset: trigger0","env":[{"name":"TRGnumber","value":"0","type":"str"}],"x":1060,"y":540,"wires":[["d6c8adeb.cd279"]]},{"id":"2fb79388.82d8cc","type":"link out","z":"638c6657.ce65c8","name":"end: to log","links":["9fe80f7e.f3f7e"],"x":795,"y":480,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"c81edba3.cbcd58","type":"delay","z":"638c6657.ce65c8","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"20","nbRateUnits":"10","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":480,"y":180,"wires":[["bd44880d.8cdda8"]],"info":"limit throughput, but allows smooth operations and less connection problems"},{"id":"3d5351ac.12b92e","type":"link in","z":"638c6657.ce65c8","name":"IN cmd","links":["18817677.061b9a"],"x":115,"y":540,"wires":[["6c92c626.076118"]],"icon":"font-awesome/fa-expand"},{"id":"9efb8156.f33d4","type":"link out","z":"638c6657.ce65c8","name":"to mirror devices","links":["3246c6c8.f9ed9a","7724fe64.ce399","d3e4089a.6570c8","ae124920.c94578"],"x":1160,"y":280,"wires":[],"icon":"font-awesome/fa-expand","l":true},{"id":"aba38dbb.f8b33","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"send ACK","env":[{"name":"TRGnumber","value":"0","type":"str"}],"x":1120,"y":220,"wires":[["5024d2e0.b05cec"]]},{"id":"242c3b02.88b314","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"ping: trigger1000","env":[{"name":"TRGnumber","value":"1000","type":"str"}],"x":1110,"y":640,"wires":[["d6c8adeb.cd279"]]},{"id":"2af08fdb.f4934","type":"function","z":"638c6657.ce65c8","name":"start time","func":"\nflow.set(\"tsstart\",Date.now());\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":920,"y":640,"wires":[["242c3b02.88b314"]]},{"id":"30ac034a.029d3c","type":"change","z":"638c6657.ce65c8","name":"dp convert","rules":[{"t":"set","p":"payload.tuyatrigger","pt":"msg","to":"payload.data.dps[\"7\"]","tot":"msg"},{"t":"set","p":"payload.data","pt":"msg","to":"{}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":710,"y":260,"wires":[["8b585752.c9b818"]]},{"id":"6da77dc2.b387a4","type":"link out","z":"638c6657.ce65c8","name":"to ping test","links":["7231e545.53e66c"],"x":1075,"y":340,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"cf1237ea.b909e8","type":"comment","z":"638c6657.ce65c8","name":"Debug pad options","info":"**Disable unwonted trace messages on debug pad.**\n\n - Disable unwonted debug nodes.\n  \n ","x":370,"y":320,"wires":[]},{"id":"790c7224.74435c","type":"link out","z":"638c6657.ce65c8","name":"to send","links":["69321d9a.30b7d4"],"x":435,"y":540,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"65cdad00.79d0e4","type":"subflow:81d3b584.14c888","z":"638c6657.ce65c8","name":"","env":[{"name":"deviceID","value":"_system","type":"str"},{"name":"fakeDP","value":"_trigger","type":"str"},{"name":"value","value":" @msg.payload.set","type":"str"}],"x":490,"y":440,"wires":[["fabf158b.0d82a8"]]},{"id":"fabf158b.0d82a8","type":"link out","z":"638c6657.ce65c8","name":"to logging","links":["9fe80f7e.f3f7e"],"x":635,"y":440,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"f4c153fd.a490d","type":"subflow:81d3b584.14c888","z":"638c6657.ce65c8","name":"","env":[{"name":"deviceID","value":"_system","type":"str"},{"name":"fakeDP","value":"_trgPing","type":"str"},{"name":"value","value":"started","type":"str"}],"x":490,"y":480,"wires":[["fabf158b.0d82a8"]]},{"id":"bd44880d.8cdda8","type":"tuya-smart-device","z":"638c6657.ce65c8","deviceName":"*tuya_bridge","deviceId":"bf8c4fd0c030*******","deviceKey":"b2feff3e0cac7db7","deviceIp":"","retryTimeout":"3000","findTimeout":"3000","tuyaVersion":"3.1","x":670,"y":180,"wires":[["798c4138.06176","bfddb028.1da3","30ac034a.029d3c"]],"info":"**tuya_ms_104**   \n\n_tuya bridge for \"WiFi Smart Switch Module MS-104\"_\n\nAfter any command, this device sends (and this node captures) a 'status' message carring only the changed values.\n\nA command can be send by node-red, SmartLife app, Google home, Google voice: in any case this node captures the status message.\n\n_note:_\n If node-red changes the switch state, SmartLife is updated correctly, but Google Home not.\n \n_Input:_\nTo send a command via node-red. the payload structure can be:\n` multiple: true\n  data: object\n    1: true\n    102: 5`\n\n_nb:_\nset **Device Virtual ID** and **Device Key** to a tuya connected and working switch, model M-104 ( see [https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104](https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104))."}]