[{"id":"81d3b584.14c888","type":"subflow","name":"mirror msg","info":"Build an update message for 'mirror' devices.\n\nUsed to process tuyaTRIGGERS.\n\n- `deviceID`: the 'mirror' device ID or CID\n- `fakeDP`: the data point id. Convention: user defined, equal to related tuyaTRIGGER, number (1000-2000). \n- `value`: the new value\n\nnote: The 'mirror' device MUST exist in the `fake` branch of **alldevices**.","category":"","in":[{"x":120,"y":80,"wires":[{"id":"6d1b2b8f.c5e554"}]}],"out":[{"x":460,"y":80,"wires":[{"id":"6d1b2b8f.c5e554","port":0}]}],"env":[{"name":"deviceID","type":"str","value":""},{"name":"fakeDP","type":"num","value":""},{"name":"value","type":"str","value":""}],"color":"#87A980","icon":"node-red/debug.svg"},{"id":"6d1b2b8f.c5e554","type":"function","z":"81d3b584.14c888","name":"do mirror msg","func":"// local function\nfunction _sendMirror(idevice, dpname, value){\n// builds a fake OUT message \nvar newMsg = { \"payload\":{\n      \"deviceId\": idevice,\n      \"data\": {\n             \"dps\":{}\n//          \"dps\":[dpname = value]\n          }}};\nnewMsg.payload.data.dps[dpname.toString()] = value;         \nreturn newMsg;  \n}\n\nreturn _sendMirror(env.get(\"deviceID\"), env.get(\"fakeDP\"), env.get(\"value\"));","outputs":1,"noerr":0,"initialize":"","finalize":"","x":300,"y":80,"wires":[[]]},{"id":"66ca1554.e4c85c","type":"subflow","name":"red trigger","info":"Build a REDTRG msg for tuya_bridge device.\n\nREDTRG values are in range 2000-3000 (convention)\n\nNote: it uses dp 102 (for  [Switch MS-104]). \nChange the code if your tuya-bridge device uses a different dp.","category":"","in":[{"x":60,"y":80,"wires":[{"id":"f0932848.b39158"}]}],"out":[{"x":360,"y":80,"wires":[{"id":"f0932848.b39158","port":0}]}],"env":[{"name":"TRGnumber","type":"str","value":"800"}],"color":"#A6BBCF","inputLabels":["any msg"],"outputLabels":["continue"],"icon":"font-awesome/fa-arrow-right"},{"id":"f0932848.b39158","type":"function","z":"66ca1554.e4c85c","name":"send  X TRIGGER","func":"const triggerDP = 102;  // tuya-bridge countdown\n\nif ((msg.payload.data != undefined) && (msg.payload.data.dps != undefined) && (msg.payload.data.dps[triggerDP] < 800))\n    return null;\nvar n = env.get(\"TRGnumber\");\nvar trig = {\n       \"payload\": {\n          \"dps\":triggerDP, \n          \"set\": parseInt(n)       \n          }\n}\n\nreturn trig ;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\nflow.set(\"tsstart\", null);\nflow.set(\"pingstat\",{\n      total:1,\n      test: 0,\n      sum:0,\n      min: 100000000000,\n      max:0\n});\n","finalize":"","x":210,"y":80,"wires":[[]]},{"id":"ee953c15.ada29","type":"subflow","name":"connected","info":"Handles tuya device status changes.\r\n\r\n\r\nProcesses the status of a real device , if the connection status changes:\r\n   - Creates a log msg (deviceId, \"_connected\", true/false) for standard processing\r\n \r\nIMPORTANT: set the ** deviceID ** parameter with the correct ID value.","category":"","in":[{"x":80,"y":80,"wires":[{"id":"6160136.f5f99ec"}]}],"out":[{"x":440,"y":80,"wires":[{"id":"6160136.f5f99ec","port":0}]}],"env":[{"name":"deviceId","type":"str","value":""}],"color":"#DDAA99","icon":"font-awesome/fa-rss-square"},{"id":"6160136.f5f99ec","type":"function","z":"ee953c15.ada29","name":"device connected message","func":"// set DIRECTLY global.tuyasyatus.xxxx._connected \n// send msg every change call only as trigger\n\nvar CONN = \"_connected\";  //  tuyadaemon internal define\n// see also tuyaDAEMON.\"connection check\" function\n\n// local function\nfunction _sendReal(idevice, name, value){\n// builds a fake OUT message \nvar newMsg = { \"payload\":{\n      \"deviceId\": idevice,\n      \"deviceName\": name,\n      \"data\": {\n          \"dps\":{\n              \"_connected\":value\n          }}}};\nreturn newMsg;  \n}\n\n// stuff to acces global.alldevices\n// using subflow parameter deviceId\nvar alldevices = global.get(\"alldevices\");\nif (alldevices === undefined) return null;\n// user set id\nvar deviceId = env.get(\"deviceId\");\n// only real devices are connected\nvar dev = alldevices.real.find(device => device.id === deviceId);\nif (dev === undefined) return null;\n// found...\n// logic process:\nvar nowconnected =  (msg.status.text == \"connected\");        // can change\nreturn(_sendReal(deviceId, dev.name, nowconnected) );\n \n\n\n\n\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// set the default status _connected to true in tuyastatus\n// creates tuyastatus entry to null.\nvar alldevices = global.get(\"alldevices\");\nif (alldevices === undefined) return null;\nvar deviceId = env.get(\"deviceId\");\nvar d = alldevices.real.find(device => device.id === deviceId);\nif (d === undefined) return null;\n//\nvar tuyastatus = global.get(\"tuyastatus\");\n    if (tuyastatus == undefined)\n        tuyastatus = {};\n    if (tuyastatus[d.name] === undefined) {\n        tuyastatus[d.name] = {_connected:null};\n        global.set(\"tuyastatus\", tuyastatus);\n    }\n    ","finalize":"","x":260,"y":80,"wires":[[]]},{"id":"638c6657.ce65c8","type":"tab","label":"TuyaTRIGGERS","disabled":false,"info":"**addon for tuyaDAEMON flow**\n\nThis addon enables **tuyaDAEMON TRIGGERS** handling and extends tuyaDAEMON capabilities to get a very strict integration of tuya-cloud with node-red.\n\n_Triggers can be used:_\n - to reflect in _node-red_ some **tuya events** from devices and sensors that are not caught by the _tuya-smart-device_ node, e.g. WiFi battery-powered sensors (`mirroring TRIGGER`)\n \n - to perform a ** command or smart action ** (automation) on tuya (_smartlife_), activated by _node-red_ (`REDTRIGGER`)\n \n - to run a **flow on node-red ** activated by tuya (_smartlife_), in Smart Scene Automation (`TUYATRIGGER`), due to user actions or weather conditions, geolocation or changes in the status of the tuya devices.\n \n - to fire a **node-red flow** when a device message satisfies some conditions, even more complex than those expressed in _smartlife_. (`EVNTRIGGER`)\n\n \n**Precondition:**\n\nRequires a _real device_ having a big unused parameter, writable from both Tuya and node-red.\n\n_I chose the_ Switch MS-104 _because its countdown parameter is with a large range [0-86400] and still this device can be used as WiFi switch. Plus it is small and cheap._"},{"id":"bd44880d.8cdda8","type":"tuya-smart-device","z":"638c6657.ce65c8","deviceName":"<here your 'tuya_bridge' device>","deviceId":"bf1235aa196ae59712abc","deviceKey":"d12345d0240caeee","x":830,"y":260,"wires":[["798c4138.06176","bfddb028.1da3","30ac034a.029d3c"]],"info":"**tuya_ms_104**   \n\n_tuya bridge for \"WiFi Smart Switch Module MS-104\"_\n\nAfter any command, this device sends (and this node captures) a 'status' message carring only the changed values.\n\nA command can be send by node-red, SmartLife app, Google home, Google voice: in any case this node captures the status message.\n\n_note:_\n If node-red changes the switch state, SmartLife is updated correctly, but Google Home not.\n \n_Input:_\nTo send a command via node-red. the payload structure can be:\n` multiple: true\n  data: object\n    1: true\n    102: 5`\n\n_nb:_\nset **Device Virtual ID** and **Device Key** to a tuya connected and working switch, model M-104 ( see [https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104](https://it.aliexpress.com/wholesale?SearchText=smart+switch+ms+104))."},{"id":"dfe76590.e38ca8","type":"switch","z":"638c6657.ce65c8","name":"*triggers selector","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"eq","v":"1010","vt":"str"},{"t":"eq","v":"1020","vt":"str"},{"t":"eq","v":"1030","vt":"str"},{"t":"eq","v":"1040","vt":"str"},{"t":"eq","v":"<more mirror tuya TRIGGERS (1000-2000)>","vt":"str"},{"t":"eq","v":"1600","vt":"str"},{"t":"eq","v":"1610","vt":"str"},{"t":"eq","v":"<more 'ad  hoh' tuya TRIGGERS>","vt":"str"}],"checkall":"false","repair":false,"outputs":8,"x":1270,"y":340,"wires":[["d7f4cc0b.061e3"],["b93f012b.15d84"],["fa77010c.81ae2"],["d1bf07c.6072ef8"],[],["3bd4ecd5.d94104"],["62953a42.38d7c4"],[]],"info":"for my device\ndp = 102    // countdown"},{"id":"17e0848d.d3ccdb","type":"link in","z":"638c6657.ce65c8","name":"*REDTRG2010","links":[],"x":140,"y":200,"wires":[["6c151f8c.05cd3"]],"l":true},{"id":"49756a9c.483284","type":"inject","z":"638c6657.ce65c8","name":"*test  REDTRG2010","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":190,"y":240,"wires":[["6c151f8c.05cd3"]]},{"id":"2531f6ff.0debaa","type":"link in","z":"638c6657.ce65c8","name":"*REDTRG2020","links":[],"x":140,"y":320,"wires":[["20d5edb.5873312"]],"l":true},{"id":"8b9f5995.580bc8","type":"inject","z":"638c6657.ce65c8","name":"*test  REDTRG2020","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":190,"y":360,"wires":[["20d5edb.5873312"]]},{"id":"d307ea52.86e3f8","type":"comment","z":"638c6657.ce65c8","name":"example: Tuya TRIGGERS exit","info":"TRIGGERS from smartlife  used to trigger custom user flows.","x":1630,"y":380,"wires":[]},{"id":"28d20fae.6061b","type":"link out","z":"638c6657.ce65c8","name":"to log","links":["9fe80f7e.f3f7e"],"x":1755,"y":260,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"798c4138.06176","type":"link out","z":"638c6657.ce65c8","name":"to logging","links":["9fe80f7e.f3f7e"],"x":1035,"y":200,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"3bd4ecd5.d94104","type":"link out","z":"638c6657.ce65c8","name":"*TUYATRG1600","links":[],"x":1580,"y":440,"wires":[],"l":true},{"id":"62953a42.38d7c4","type":"link out","z":"638c6657.ce65c8","name":"*TUYATRG1610","links":[],"x":1580,"y":480,"wires":[],"l":true},{"id":"4e0fea2f.4e1014","type":"comment","z":"638c6657.ce65c8","name":"example: mirror devices ","info":"Some devices can't be read by **smart_tuya_device** node.\n\nThe unreachable devices can be perfectly managed by **tuyaDAEMON** using TRIGGERS and 'mirror' devices (in the 'fake' section of `alldevices`).\n\nA _smartlife_ automation sends, for every status variation of the device, a different **TUYATRG**.\n\n   example: the **PIR sensor** is WiFi and battery powered, so it can't connect the `smart_tuya_device` node. It has an unique data point: `\"alarm\", BOOLEAN`.\n\n   We need two automations in _smartlife_:\n   - `if PIRsensor#1:alarm:false then tuya_bridge:countdown:1010`\n   - `if PIRsensor#1:alarm:true then tuya_bridge:countdown:1020`\n\n   On **tuyaTRIGGER** we have two nodes: `1010: inject PIR alarm OFF` and `1020: inject PIR alarm ON` which produces two messages processed by tuyaDAEMON, updating the `global.tuyastatus.PIRsensor#1` as a real messages sent by the device does.\n   \nThe same for a command SET/GET/SCHEMA. An automation does the work, fired by an unique REDTRG.\n\nLimit: only for ENUM and BOOLEAN data points. \ntentative: \n\n_Since it is not straightforward and resource-intensive, reserve \"mirror\" use only for the actual data really required._\n\nHow to add a 'mirror' data point, for trigger PUSH update:\n      \n1. Define the TUYATRG used, and create the required automation on  _smartlife_.\n2. Update the `alldevices` structure\n3. For the new TUYATRG, add a condition on `*triggers selector` node and add a new `mirror msg` node. \n      \nHow to add a new command (SET/GET/SCHEMA) capability to a 'mirror' data point:\n\n1. Define the REDTRG used, and create the required automation on  _smartlife_.\n2. Update the `alldevices` structure\n3. Update the '`mirror cmd selector`' block code to select the new command (new output)\n4. A new '`RED trigger`' block will build the trigger msg to tuya-cloud.\n\n-------------------\nsee also extra flow: `siren mirror`\n","x":1580,"y":140,"wires":[]},{"id":"ebf1518e.eb3e2","type":"comment","z":"638c6657.ce65c8","name":"tuyaTRIGGERS ","info":"## TRIGGER tuyaDEAMON module\n\n_A real device WiFI, having  a big unused numerical parameter, say a 'counter', writable for both **Tuya** and **node-red**, is all the required hardware to implement a robust bilateral event communication (**TRIGGER**)._\n\nA sender (_tuya-cloud/node-red_) set the counter to some XX value, the receiver gets the XX value, acts accordingly, and resets the counter to 0 (ACK action): \nthe _node-red_ send/receive actions are performed by **tuyaTRIGGER** flow, the _Tuya-cloud_ actions are performed by ad hoc automation, one for TRIGGER.\n\n\n - _node-red => tuya_: **node-red** write a predefined value in the 'counter' and that fires a specific **Tuya** automation: first the automation must reset 'counter' to 0, then it can do anything.\n Tuya automation, say `trigger1010`:   _If \"counter:1010\" do \"counter:0\" and \"any...\"_ \n\n - _tuya => node-red_: A tuya **schema** (user action) or **automation** (event) sets  a predefined value on the 'counter' (e.g. 2030), and when node-red read that, it must first reset  the \"counter' to 0, then it can do anything.\n Tuya automation,  say `trigger2030`: _If \"any:event\" do \"counter:2030\"_ \n\nThis **TRIGGER** mechanism, implemented in **tuyaTRIGGER**, allow a better _tuya <=> node-red_ integration in **tuyaDAEMON**:\n- _node-red_ can set/get status for _all devices and data point_ not found by `node-red-contrib-tuya-smart-device`.\n- _node-red_ can fire automation on _tuya-cloud_ \n- _tuya scene_ can control _node-red flows_, so a node-red user can employ _smartlife_ as remote control (from anywhere).\n- _tuya autmations_ can fire flows in _node-red_, implementing this way any control strategy.\n- user can fire _node-red flows_ with vocal control (`Googlehome`).\n     \n    \n\n\n[TuyaSmart App and SmartLife App limits (2021-01-07)](https://support.tuya.com/en/help/_detail/K9q79msw3accz)\n\n````\n  Item                             Description                                                               Limit\nDevice Schedule quantity         The maximum number of timers that can be added to a single device         30\nNumber of household devices      Maximum number of devices that can be added in a single home              120\nNumber of scenes                 The maximum number of Tap-to-Run that a single home can create            100\nNumber of automations            Maximum number of Automations that can be created in a single home        100\nNumber of scene actions          The maximum number of tasks that can be added in a Tap-to-Run             150\nNumber of automation actions     The maximum number of tasks that can be added in an Automation            150\nNumber of automation conditions  The maximum number of conditions that can be added in an Automation       10\nNumber of multi-terminal logins  The maximum number of mobile devices that \n                                                can simultaneously log in to an account                    200\nNumber of homes                  The maximum number of Homes that can be created by a single App account   20\nNumber of home members           The maximum number of home members that can be added in a single home     20\nNumber of rooms                  The maximum number of rooms that a single home can create                 20\nNumber of room equipment         The maximum number of devices that can be added in a single room          50\nNumber of equipment groups       The maximum number of devices that can be added in a single device group  100\nNumber of home equipment groups  The maximum number of device groups that a single home can create         20\nNumber of users                  The maximum number of each device group that\n     shared by device group                     can be shared with other users                             20\nNumber of users sharing devices  The maximum number of each device that can be shared with other users     20\nNumber of homes invited          The maximum number of each App account that can be invited by other homes 20\n ````\n more\n- [Number of Zigbee devices](https://support.tuya.com/en/help/_detail/K8xu0c86wlte1) : gateway theoretical limit is 128 wired, and 50 WiFi.\n\n\nAn extestion of `_system` fake device is in tuyaTRIGGER, and manages the property `_trgPing`: i.e. a measure of the time consumed by a complete _TRIGGER round trip_:\n1) a `TRIGGER800` is sent by node-red\n2) The `tuya_bridge:counter` is set to 800 by node-red\n3) An automation is found and fired by _tuya-cloud_ \"`if tuya-bridge:counter:800 then set tuya-bridge:counter:0`\"\n4) `tuya_bridge:counter` is set to 0 by tuya-cloud \n5) `TRIGGER0` is caught by _node-red_ and decoded.\n\nOn my PC I get the result (in ms):\n````\n_trgPing: object\n    count: 5\n      avg: 209\n      max: 312\n      min: 145\n````\n\n## Actual (example) triggers map in **tuyaTRIGGER** flow:\n\n1)  _TUYATRG (1000-1990) are used to handle 'mirror' devices._\n\n   - the device changes status\n   - an automation is fired by this event and it sends a TUYATRG to _node-red_.\n   - on receiving the TUYATRG, _node-red_ remaps the trigger as a usual device message, to log them,  using a fake dps         (convention: same as the trigger value). The mirror device and dps must be defined in `global.alldevice.fake` branch.\n   - _node-red_ sends an ACK (reset the 'counter' to 0)\n   \n   Example in tuyaTRIGGER: \n\n   the WiFi '_Motion Detector_' device is battery powered. But a trigger is send at any status change by _tuya-cloud_ to _tuyaDAEMON_:\n\n   - **TUYATRG1010**: is mapped as `Motion Detector [123410408caab8e79837]/alarm[dps:1010]/OFF`\n\n    In Tuya Automation we need: _If \"sensore di movimento:normale\", \"tuya-bridge:countdown:1010\"_ \n\n   - **TUYATRG1020**: is mapped as `Motion Detector [123410408caab8e79837]/alarm[dps:1010]/ON`\n\n    In Tuya Automation we need: _Se \"sensore di movimento:Allarme\", \"tuya-bridge:countdown:1020\"_ \n\n   See also \"siren mirror\" extra flow.\n\n2) _TUYATRG (1000-1990) are also used fired by_ smartlife _to signal some  user/device/weather/geolocation action_ \n\n Examples in tuyaTRIGGER:\n\n   - **TUYATRG1030**: free\n   - **TUYATRG1040**: free\n\n3) _REDTRG (2000-2990) can be fired by_ node-red, _to activate_ smartlife _automations:_  \n\n   Examples in tuyaTRIGGER:\n   - **REDTRG2010**: free\n   - **REDTRG2020**: free\n\n4) _more TRIGGERS, with conditions defined by the user, can fire node-red flows asynchronously, without `global.alldevices` polling, or implement conditions not allowed by_ smartlife _automatitions._\n\n Examples in tuyaTRIGGER:\n   - **EVNTRIGGER00A**: fired if temperature > 20 °C  (from a virtual device)\n   - **EVNTRIGGER00B**: fired on PIR alarm (from a mirror device)\n\n\n## **implementation**\n\n_This tick can be used with any device, named in the flow and in_ `alldevices` \"tuya_bridge\".\n\n1) _I choose first the_ [Switch MS-104](https://www.aliexpress.com/item/33012114855.html) (USD 8) _because its countdown (`dp` = 102) is with a large range [0-86400, i.e. 24H] and still the device can be used as a WiFi switch, because only the countdown function is used by this implementation, plus it is small and cheap. \n\n The unique problem is the lack of a battery backup.\n\n2) _Now I'm waiting for another device, a wifi switch_ [TYWR 7-32](https://www.aliexpress.com/item/1005001292469801.html)(USD 10) _with a micro USB power input. When I get it I will update here after some tests_.\n\n3) 'TuyaTrigger' values are in `msg.payload.tuyatrigger`.  The conversion `data.dp[\"102\"] ==>  msg.payload.tuyatrigger` is done by `\"dp converter\"` change node. _To config your own `tuya-bridge` device, and to use any `dp`:_\n     - modify the  `\"dp converter\"` change node. \n     - modify the code in `\"red trigger\"` sub-flow.\n\n\n**note**\n \n - analog values can't be sent from tuya this way, because tuya does not allow the use of calculated values. But comparations are allowed: e.g. send trigger if `'temperature < 16'`. (Available: `<`; `=`; `>`). We can 'mirror' `BOOLEAN` dp (2 automations) `ENUM` dp: [0|1|2]  (3 automations) or also `INT` dp, but converted to ENUM when required: `{<15|16-20|21-25|26-30|31-35|36-40|>40}` can be done with 7 automations.\n\n - using a countdown as a trigger, as _Switch MS-104_ does, requires REDTRG with numbers greater (e.g. 2000+) than TUYATRG (e.g. 1000..1999]): so, if _node-red_ is down, a Tuya TRIGGER not caught can't trigger a fake REDTRG.\n \n - If the used counter is a time counter (countdown in case of  _Switch MS-104_ ) you must choose trigger values at least separated by 10s, to allow the ACK action.\n\n - for fallback, MUST exist a Tuya Automation fired when the countdown is less than any trigger value (e.g. 800), to reset the countdown to 0 without ACK: so the countdown never interferes with the logic of the switch (this automation is also deployed by `_trgPing` implementation).\n \n- this implementation does not verify the ACKs presence and timing, and not uses any handshake strategy, so it is theoretically possible to have some interferences.\n\n--------------------\n**Versions**\n\n_tuyaTRIGGER version 1.0_ (15/01/2021)\n  - tuyaDAEMON ver 1.0\n\nInitial version     ","x":140,"y":60,"wires":[]},{"id":"69321d9a.30b7d4","type":"link in","z":"638c6657.ce65c8","name":"to tuya_bridge","links":["305e7686.63b0fa","5024d2e0.b05cec","d6c8adeb.cd279","fc22adad.2f985","18d062e0.0b631d","83ab4822.a4d028"],"x":430,"y":400,"wires":[["2c0a4e62.c8adf2"]],"icon":"font-awesome/fa-expand","l":true},{"id":"5024d2e0.b05cec","type":"link out","z":"638c6657.ce65c8","name":"to send","links":["69321d9a.30b7d4"],"x":1295,"y":200,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"bfddb028.1da3","type":"debug","z":"638c6657.ce65c8","d":true,"name":"trace: msg OUT from tuya_bridge","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":780,"y":540,"wires":[]},{"id":"aea82682.f3bef8","type":"status","z":"638c6657.ce65c8","name":"spy status","scope":["bd44880d.8cdda8"],"x":680,"y":400,"wires":[["fd3a31f5.8912d"]]},{"id":"2c0a4e62.c8adf2","type":"switch","z":"638c6657.ce65c8","name":"do nothing","property":"payload","propertyType":"msg","rules":[{"t":"neq","v":"null","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":575,"y":220,"wires":[["2710cd5f.1eb562","c81edba3.cbcd58"]],"l":false},{"id":"2710cd5f.1eb562","type":"debug","z":"638c6657.ce65c8","d":true,"name":"trace: msg IN for tuya_bridge","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":800,"y":500,"wires":[]},{"id":"8b585752.c9b818","type":"switch","z":"638c6657.ce65c8","name":"TUYATRGXXX","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"btwn","v":"801","vt":"num","v2":"1999","v2t":"num"},{"t":"lt","v":"800","vt":"num"}],"checkall":"true","repair":false,"outputs":2,"x":960,"y":320,"wires":[["dfe76590.e38ca8","aba38dbb.f8b33","9efb8156.f33d4"],["6da77dc2.b387a4"]],"info":"selects all TRIGGERS from tuya cloud (values: 801-1999), to more prosesses\nselect test pig values (0-799) (optional)\n\n"},{"id":"63e6d5d.0a5da2c","type":"link out","z":"638c6657.ce65c8","name":"connection pool","links":["c90b7eb2.07595"],"x":995,"y":400,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"fd3a31f5.8912d","type":"subflow:ee953c15.ada29","z":"638c6657.ce65c8","name":"","env":[{"name":"deviceId","value":"babcd5aa196ae59712356ii","type":"str"},{"name":"deviceID","value":"bfa355aa196ae5975cy6ii","type":"str"}],"x":870,"y":400,"wires":[["63e6d5d.0a5da2c"]]},{"id":"e059eb1f.d8a858","type":"function","z":"638c6657.ce65c8","name":"event selector","func":"// msg (real)\n//  _msgid: \"3042f3fd.8497fc\"\n//  _event: \"node:2ec83963.a7d146\"\n//  payload: object\n//     deviceId: \"123aaaaa196ae5975cy123i\"\n//     deviceName: \"*tuya_bridge\" \n//     data: object\n//        t: 1609234903\n//        dps: object\n//           102: 1020\n//\n//msg (virtual)\n//   _msgid: \"d0b26a44.e81738\"\n//   payload: object\n//      deviceId: \"12343b1b789b5994cr123\"\n//      deviceName: \"Zigbee Gateway\"\n//      data: object\n//        cid: \"00aa8d0005123456\"\n//        t: 1609235292\n//        dps: object\n//           103: 19\n\n// select messages to fire your EVNTRIGGERXXX.\n// the condition can be as complex  as required \n//  works with messages from any device: real, virtual, mirror, system\n//\n\n// filter example: \n// Trigger on temperature > 20 °C  (from a virtual device)\n if(msg.payload.deviceId == \"123473b1b789b5994aabbo7p\")  // from  gateway\n    if(msg.payload.data.cid == \"0abc8d0001234c45\")     // device: cid termometer\n       if (msg.payload.data.dps[103] >=  200)          // test on undecoded value\n         return[{payload:\"go\"}];                 // in output#1\n// filter example: \n// Trigger on PIR on (from mirror device)\n if(msg.payload.deviceId == \"1234560408caab5aaa887\")    // the device\n       if (msg.payload.data.dps[1010] === true)        // test on value\n           return[null, {payload:\"go\"}];         // in output#2\n\n//  more....\nreturn null;","outputs":2,"noerr":0,"initialize":"","finalize":"","x":1280,"y":580,"wires":[["2c896f14.5367a"],["7ede2fdd.ab709"]]},{"id":"a9aac6e5.70f988","type":"link in","z":"638c6657.ce65c8","name":"IN msg from real devices","links":["81a9b329.092b1"],"x":1075,"y":580,"wires":[["e059eb1f.d8a858"]],"icon":"font-awesome/fa-expand"},{"id":"2c896f14.5367a","type":"link out","z":"638c6657.ce65c8","name":"EVNTRIGGER00A","links":[],"x":1570,"y":600,"wires":[],"l":true},{"id":"7ede2fdd.ab709","type":"link out","z":"638c6657.ce65c8","name":"EVNTRIGGER00B","links":[],"x":1570,"y":640,"wires":[],"l":true},{"id":"b71dbb65.21c7d8","type":"comment","z":"638c6657.ce65c8","name":"example: event TRIGGER exit","info":"TRIGGER buid from tuyaTRIGGER flow and not by tuya-cloud.\n\nBased on local events and conditions, used as accelerators by some user flows.","x":1640,"y":540,"wires":[]},{"id":"642996df.e68388","type":"inject","z":"638c6657.ce65c8","name":"START PING","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":210,"y":780,"wires":[["8f6b2a1d.3ddf58"]]},{"id":"d6c8adeb.cd279","type":"link out","z":"638c6657.ce65c8","name":"to send","links":["69321d9a.30b7d4"],"x":1215,"y":680,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"faeef0bb.0924b","type":"function","z":"638c6657.ce65c8","name":"ACK  process","func":"var delta;\n// test on all tuya_bridge messages\n// output:  finish/ reset/more loops\nif(msg.payload.tuyatrigger == 0 ) {\n    var old = flow.get(\"tsstart\");\n// standard 0 ACK,  nothing to do\n    if (old === 0)  return([null,null,null]);   // no in ping test\n    var back = Date.now();\n    delta = back - old;\n    if ((delta > 2000) || (delta < 20)) { \n// fallback in case of timeout: restart and keep alive\n         flow.set(\"tsstart\", 0);\n         return([null, null, msg]);\n         }\n// ok, updates stats\n  var stats = flow.get(\"pingstat\") ; \n //flow.set(\"pingstat\",{\n //     test: 0,\n //     total:0,\n //     min: 100000000000,\n //     max:0\n // set data    \n   stats.sum += delta;\n    if( stats.min > delta)\n         stats.min = delta;\n    if( stats.max < delta)\n         stats.max = delta;\n    stats.test++;  \n    stats.total--;   \n    flow.set(\"pingstat\", stats);\n    node.log(\" Ping test:\" + JSON.stringify(stats));\n\n  if (stats.total >0)  {\n// more  tests  \n      flow.set(\"tsstart\", 0);\n      return [null, null, msg];\n      }   \n\n// done, does statistics & msg  \n var st = {\n    \"deviceId\":\"_system\",\n    \"data\":{\n       \"dps\":{\n           \"_trgPing\":{\n               \"count\": stats.test,\n               \"avg\": Math.floor(stats.sum/stats.test),\n               \"max\": stats.max,\n               \"min\": stats.min\n           }\n       }\n    }};  \n    \n   msg.payload = st;\n   flow.set(\"tsstart\", 0);\n// sends results  \n   return([msg, null, null]);\n}\n\nif  ((msg.payload.tuyatrigger == 780) ||\n     (msg.payload.tuyatrigger == 760)){\n     // fallback in case of missed  ACK: restart and keep alive\n     flow.set(\"tsstart\", 0);\n     return([null, msg, msg]); \n     }\n// else do nothing\nreturn([null, null, null]);\n\n","outputs":3,"noerr":0,"initialize":"","finalize":"","x":550,"y":680,"wires":[["2fb79388.82d8cc"],["5bc8ec20.e12ff4"],["8bc0b981.0ca808"]],"outputLabels":["log result","reset0","more"]},{"id":"7231e545.53e66c","type":"link in","z":"638c6657.ce65c8","name":"in msg","links":["6da77dc2.b387a4"],"x":415,"y":680,"wires":[["faeef0bb.0924b"]],"icon":"font-awesome/fa-expand"},{"id":"8bc0b981.0ca808","type":"delay","z":"638c6657.ce65c8","name":"more: delay 3","pauseType":"delay","timeout":"3","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":760,"y":720,"wires":[["2af08fdb.f4934"]]},{"id":"57526a3d.919364","type":"comment","z":"638c6657.ce65c8","name":" _system : _trgPing  property","info":"device: _system property: _trgPing\n\nThis flow implements a trigger ping test (optional).\nA refresh can be triggered using the inject node or a standard user GET command.\nDo it in a quiet moment to avoid interferences.\n\n","x":220,"y":640,"wires":[]},{"id":"39de0ee1.2f0352","type":"function","z":"638c6657.ce65c8","name":"4","func":"\n flow.set(\"tsstart\", 0);\n flow.set(\"pingstat\",{\n      total:node.name,\n      test: 0,\n      sum:0,\n      min: 100000000000,\n      max:0\n});\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n flow.set(\"tsstart\", 0);","finalize":"","x":670,"y":780,"wires":[["2af08fdb.f4934"]],"info":"Sets node name to required pings number for the test"},{"id":"6c92c626.076118","type":"function","z":"638c6657.ce65c8","name":"*fake cmd selector","func":"\n// --------------- locals\n// find ObjDevice, using o.name or o.id or o.cid, from a device[] (i.e.  real|virtual|fake)\n// otherwise return undefined.\n\nfunction _checkobj(list, dx) {\n   var o;\n   if (list == undefined)\n      return o;\n   o = list.find(device => device.name === dx);\n   if (o === undefined)\n      o = list.find(device => device.id === dx);\n   if (o === undefined)\n      o = list.find(device => device.cid === dx);\n  return (o);\n}\n\nfunction _getObjDevice(key, limit = null) {\n   function okcheck(lim, branch) {\n      return ((lim === null) || (lim === branch))\n   }\n   var odev;\n   var alld = global.get(\"alldevices\");\n   if (key === undefined)\n      return (odev);\n   if (okcheck(limit, \"real\"))\n      odev = _checkobj(alld.real, key);\n   if ((odev === undefined) && okcheck(limit, \"virtual\"))\n      odev = _checkobj(alld.virtual, key);\n   if ((odev === undefined) && okcheck(limit, \"fake\"))\n      odev = _checkobj(alld.fake, key);\n   return (odev);\n}\n\nfunction getOdevDpx(d,odev){\nvar dp ;\n  if  ((odev !== undefined) && (Array.isArray(odev.dps)))  {\n       dp = odev.dps.find(dpx => dpx.nome == d);\n    if (dp === undefined)\n        dp = odev.dps.find(dpx => dpx.dp == d);\n      }\n  return (dp);   \n }\n \nfunction _isGetCommand (idDev, msx) {\n return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value === undefined));\n}\n \n// ------------- main\n//  partial implementation of _system GET for  _trgPing\n\n if ( _isGetCommand (\"_system\", msg)){  // a GET\n    // find dp\n        var dpx = getOdevDpx( msg.payload.property, _getObjDevice(\"_system\", \"fake\"));   \n        switch (dpx.dp){\n          case \"_trgPing\":\n                return([msg]);   // _trgPing:output 1\n       }\n    }    \n// ignore \nreturn([null]);\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":230,"y":700,"wires":[["8f6b2a1d.3ddf58"]],"info":"Select GET/SET/SCHEMA/MULTIPLE  commands \nfor 'fake' device\n\nImplementation:\n\n\"_system\":\"_trgPing\" accepts only GET: fires a data refresh.\n             \nThe stadard GET tuyaDAEMON request\n````\n    msg.payload:{\n        \"device\":\"_system\", \n        \"property\":\"_trgPing\"  \n        } \n````        \nfires a flow that implements the command.\n"},{"id":"8f6b2a1d.3ddf58","type":"delay","z":"638c6657.ce65c8","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":500,"y":780,"wires":[["39de0ee1.2f0352"]]},{"id":"5bc8ec20.e12ff4","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"reset: trigger0","env":[{"name":"TRGnumber","value":"0","type":"str"}],"x":1040,"y":680,"wires":[["d6c8adeb.cd279"]]},{"id":"2fb79388.82d8cc","type":"link out","z":"638c6657.ce65c8","name":"end: to log","links":["9fe80f7e.f3f7e"],"x":715,"y":640,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"c81edba3.cbcd58","type":"delay","z":"638c6657.ce65c8","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"20","nbRateUnits":"10","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":700,"y":200,"wires":[["bd44880d.8cdda8"]],"info":"limit throughput, but allows smooth operations and less connection problems"},{"id":"3d5351ac.12b92e","type":"link in","z":"638c6657.ce65c8","name":"IN cmd","links":["18817677.061b9a"],"x":95,"y":700,"wires":[["6c92c626.076118"]],"icon":"font-awesome/fa-expand"},{"id":"20d5edb.5873312","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"*trigger2020","env":[{"name":"TRGnumber","value":"2020","type":"str"}],"x":430,"y":320,"wires":[["2c0a4e62.c8adf2"]]},{"id":"6c151f8c.05cd3","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"*trigger2010","env":[{"name":"TRGnumber","value":"2010","type":"str"}],"x":430,"y":200,"wires":[["2c0a4e62.c8adf2"]]},{"id":"d7f4cc0b.061e3","type":"subflow:81d3b584.14c888","z":"638c6657.ce65c8","name":"1010: inject PIR alarm OFF","env":[{"name":"deviceID","value":"733710408caab5e79887","type":"str"},{"name":"fakeDP","value":"1010","type":"str"},{"name":"value","value":"false","type":"bool"}],"x":1560,"y":200,"wires":[["28d20fae.6061b"]]},{"id":"b93f012b.15d84","type":"subflow:81d3b584.14c888","z":"638c6657.ce65c8","name":"1020: inject PIR alarm ON","env":[{"name":"deviceID","value":"733710408caab5e79887","type":"str"},{"name":"fakeDP","value":"1010","type":"num"},{"name":"value","value":"true","type":"bool"}],"x":1570,"y":240,"wires":[["28d20fae.6061b"]]},{"id":"d1bf07c.6072ef8","type":"subflow:81d3b584.14c888","z":"638c6657.ce65c8","name":"1040: inject door open ON","env":[{"name":"deviceID","value":"04208127d8bfc0dac0e5","type":"str"},{"name":"fakeDP","value":"1030","type":"num"},{"name":"value","value":"true","type":"bool"}],"x":1570,"y":320,"wires":[["28d20fae.6061b"]]},{"id":"fa77010c.81ae2","type":"subflow:81d3b584.14c888","z":"638c6657.ce65c8","name":"1030: inject door open OFF","env":[{"name":"deviceID","value":"04208127d8bfc0dac0e5","type":"str"},{"name":"fakeDP","value":"1030","type":"num"},{"name":"value","value":"false","type":"bool"}],"x":1560,"y":280,"wires":[["28d20fae.6061b"]]},{"id":"7791bbe3.757ca4","type":"comment","z":"638c6657.ce65c8","name":"example: node_red TRIGGERS  ","info":"A node-red trigger (REDTRGXXXX) is used to fire _smarlife_ automations.\n\nconvention: reserved values for REDTRG: 2000-2999\n\nexamples: REDTRG2010,  REDTRG2020","x":230,"y":140,"wires":[]},{"id":"deb91f5b.25bc6","type":"function","z":"638c6657.ce65c8","name":"*mirror cmd selector","func":"// -------------------------------------------------- do not change\n// --------------- locals\n// find Obj-Device, using dev-name or dev-id or dev-cid, from a device[] (i.e.  real|virtual|fake)\n// otherwise return undefined.\n\nfunction _getObjDevice(key, limit = null) {\n    function _checkobj(list, dx) {\n       var o;\n       if (list == undefined)\n          return o;\n       o = list.find(device => device.name === dx);\n       if (o === undefined)\n          o = list.find(device => device.id === dx);\n       if (o === undefined)\n          o = list.find(device => device.cid === dx);\n    return (o);\n    }\n   function okcheck(lim, branch) {\n      return ((lim === null) || (lim === branch))\n   }\n   var odev;\n   var alld = global.get(\"alldevices\");\n   if (key === undefined)\n      return (odev);\n   if (okcheck(limit, \"real\"))\n      odev = _checkobj(alld.real, key);\n   if ((odev === undefined) && okcheck(limit, \"virtual\"))\n      odev = _checkobj(alld.virtual, key);\n   if ((odev === undefined) && okcheck(limit, \"fake\"))\n      odev = _checkobj(alld.fake, key);\n   return (odev);\n}\n\n// find Obj-dp, using dp-name or dp-id, from a obj-device\n// otherwise return undefined.\nfunction getOdevDpx(d,odev){\nvar dp ;\n  if  ((odev !== undefined) && (Array.isArray(odev.dps)))  {\n       dp = odev.dps.find(dpx => dpx.name == d);\n    if (dp === undefined)\n        dp = odev.dps.find(dpx => dpx.dp == d);\n      }\n  return (dp);   \n }\n \n// --------------------------- main\n\nvar odev = _getObjDevice(msg.to, \"fake\");\nif (odev === undefined) {\n   node.warn(\"ERROR: add to alldevices the fake device: '\" + msg.payload.device + \"'\");\n   return [null];\n}\nvar dprq = getOdevDpx(msg.payload.property,odev);\nif (dprq === undefined) {\n   node.warn([\"ERROR: not found property '\" + msg.payload.property + \"' of device '\" + odev.name + \"'(1)\", odev]);\n   return [null];\n}\n\n// uses the standardizated request string to select\nvar stcmd = {\n         \"device\":odev.id, \n         \"property\":dprq.dp } ;\nvar request = JSON.stringify(stcmd);\n//\n\n// a GET: this is an example doing nothing !!! \n// -------------------------------------------------- change here!!\n   if (request === \"{\\\"device\\\":\\\"PIRsensor#1\\\",\\\"property\\\":\\\"_alarm\\\"}\" )\n       return [msg, null] ;  // exit 1\n// more GET cases   here....\n \n\n// a SET: this is an example doing nothing !!! \n// -------------------------------------------------- change here!!\n   if (request === \"{\\\"device\\\":\\\"PIRsensor#1\\\",\\\"property\\\":\\\"_alarm\\\",\\\"value\\\":\\\"ON\\\"}\" )\n        return [null,msg];  // exit 2\n // more SET cases   here....\n  \n   \n\nreturn[null];","outputs":2,"noerr":0,"initialize":"","finalize":"","x":240,"y":500,"wires":[["52e21b8a.374544"],["896687ec.126bc8"]],"info":"Select GET/SET/SCHEMA/MULTIPLE  commands \nfor 'mirror' device\n\nExample Implementation:\n GET PIRsensor#1:_alarm  => REDTRG2910\n SET PIRsensor#1:_alarm:ON  => REDTRG2920 // stupid\n\n             \n"},{"id":"52e21b8a.374544","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"*trigger2910","env":[{"name":"TRGnumber","value":"2910","type":"str"}],"x":430,"y":480,"wires":[["2c0a4e62.c8adf2"]]},{"id":"896687ec.126bc8","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"*trigger2020","env":[{"name":"TRGnumber","value":"2020","type":"str"}],"x":430,"y":540,"wires":[["2c0a4e62.c8adf2"]]},{"id":"ed7caa46.78c218","type":"link in","z":"638c6657.ce65c8","name":"in msg","links":["18817677.061b9a"],"x":95,"y":500,"wires":[["deb91f5b.25bc6"]],"icon":"font-awesome/fa-expand"},{"id":"eb85a201.f4a0b","type":"comment","z":"638c6657.ce65c8","name":"example: mirror device cmd","info":"**mirror device commands**\n\nThe stadard tuyaDAEMON request\n````\n    msg.payload:{\n        \"device\":\"a-device-name\", \n        \"property\":\"a-property-name\", \n        \"value\": \"a-value\" \n        } \n````        \nis transformed in a **REDTRGXXXX**, to fire the _smartlife_ automation doing the job.\n\nExamples //fake\n````\n    msg.payload:{\n        \"device\":\"PIRsensor#1\", \n        \"property\":\"_alarm\"\n        } \n````\nbecomes REDTRG2910\n    \n\n\n{\\\"device\\\":\\\"PIRsensor#1\\\",\\\"property\\\":\\\"_alarm\\","x":220,"y":440,"wires":[]},{"id":"9efb8156.f33d4","type":"link out","z":"638c6657.ce65c8","name":"tuya triggers","links":["7724fe64.ce399"],"x":1190,"y":240,"wires":[],"icon":"font-awesome/fa-expand","l":true},{"id":"aba38dbb.f8b33","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"send ACK","env":[{"name":"TRGnumber","value":"0","type":"str"}],"x":1180,"y":200,"wires":[["5024d2e0.b05cec"]]},{"id":"242c3b02.88b314","type":"subflow:66ca1554.e4c85c","z":"638c6657.ce65c8","name":"ping: trigger800","env":[],"x":1040,"y":780,"wires":[["d6c8adeb.cd279"]]},{"id":"2af08fdb.f4934","type":"function","z":"638c6657.ce65c8","name":"start time","func":"\nflow.set(\"tsstart\",Date.now());\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":860,"y":780,"wires":[["242c3b02.88b314"]]},{"id":"30ac034a.029d3c","type":"change","z":"638c6657.ce65c8","name":"dp convert","rules":[{"t":"set","p":"payload.tuyatrigger","pt":"msg","to":"payload.data.dps[\"102\"]","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":750,"y":320,"wires":[["8b585752.c9b818"]]},{"id":"6da77dc2.b387a4","type":"link out","z":"638c6657.ce65c8","name":"to ping test","links":["7231e545.53e66c"],"x":1135,"y":440,"wires":[],"icon":"font-awesome/fa-expand"},{"id":"cf1237ea.b909e8","type":"comment","z":"638c6657.ce65c8","name":"Debug pad options","info":"**Disable unwonted trace messages on debug pad.**\n\n - Disable unwonted debug nodes.\n  \n ","x":1070,"y":500,"wires":[]}]