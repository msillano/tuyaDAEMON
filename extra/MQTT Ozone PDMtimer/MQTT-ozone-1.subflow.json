[{"id":"3332031a.de38fc","type":"subflow","name":"MQTT/ozone/1","info":"","category":"","in":[{"x":120,"y":120,"wires":[{"id":"9ae04f2.4bac6b"},{"id":"c8e74e64.7eafe"}]}],"out":[{"x":1020,"y":120,"wires":[{"id":"80d3499e.df2d58","port":0},{"id":"7a13d179.a10ed","port":0},{"id":"938228d2.f21868","port":0},{"id":"9ae04f2.4bac6b","port":0}]}],"env":[{"name":"deviceID","type":"str","value":"sonoff001"}],"color":"#DDAA99","status":{"x":680,"y":360,"wires":[{"id":"464d6ade.3318f4","port":0}]}},{"id":"808a0753.c4e598","type":"mqtt in","z":"3332031a.de38fc","name":"","topic":"/ozone/timerpdm/1/status/info","qos":"0","datatype":"utf8","broker":"2e55898d.e8af66","x":540,"y":220,"wires":[["80d3499e.df2d58"]]},{"id":"c1b5bd9e.0aff1","type":"mqtt out","z":"3332031a.de38fc","name":"MQTT send","topic":"","qos":"","retain":"","broker":"2e55898d.e8af66","x":490,"y":160,"wires":[]},{"id":"505b5823.792928","type":"mqtt in","z":"3332031a.de38fc","name":"","topic":"/ozone/timerpdm/1/status/config","qos":"0","datatype":"utf8","broker":"2e55898d.e8af66","x":550,"y":260,"wires":[["7a13d179.a10ed"]]},{"id":"215fc962.4168a6","type":"mqtt in","z":"3332031a.de38fc","name":"","topic":"/ozone/timerpdm/1/status/output","qos":"2","datatype":"utf8","broker":"2e55898d.e8af66","x":550,"y":300,"wires":[["938228d2.f21868"]]},{"id":"9ae04f2.4bac6b","type":"function","z":"3332031a.de38fc","name":"handle GET operations","func":"// GET: response from tuyastatus.\n//\n// local functions to get tuyastatus from device.msg\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // to use the stored JSON method library in global alldevices\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname])); // ignore the âš  node-red warning\n    return func.call(null).call(obj, a, b, c, d); //invoke the function using arguments\n}\n\nfunction _getGlobalValue(Dn, Pn){\nvar tuyastatus = global.get(\"tuyastatus\");\nif ((tuyastatus !== undefined) && (tuyastatus[Dn] !== undefined)) { // ok device field\n   if (Pn === \"schema\") \n          return tuyastatus[Dn];\n   return tuyastatus[Dn][Pn];\n   }\nreturn undefined;\n}\n\n// ===========================  main\n\nlet command = msg.payload.operation || 'SET';\n// node.warn([\"in command\", command, msg]);\nconst PREFIX = \"/ozone/timerpdm/1/\";\n\nif (command === 'GET'){\n      // value from tuyastatus, format as device response\n      let oD    = _callJSONMethod(alld, \"__getODev\", msg.to);\n      var dName = _callJSONMethod(alld, \"__getDevName\", oD);\n      var pName = _callJSONMethod(alld, \"__getDpsName\", oD, msg.infodp);\n      var value = _getGlobalValue(dName, pName);\n      if (value !== undefined){\n            var newMsg = { \n               \"payload\":{\n                  \"deviceId\": msg.to,\n                  \"deviceName\": dName,\n                  \"data\": {\n                      \"dps\":{\n                          [msg.payload.dps]: value  \n                  }}}};\n          return newMsg;\n          }\nreturn null;          \n}  \n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":310,"y":120,"wires":[[]]},{"id":"464d6ade.3318f4","type":"status","z":"3332031a.de38fc","name":"MQTT status","scope":["808a0753.c4e598","c1b5bd9e.0aff1","505b5823.792928","215fc962.4168a6"],"x":490,"y":360,"wires":[[]]},{"id":"80d3499e.df2d58","type":"function","z":"3332031a.de38fc","name":"JSON split","func":"let tcount = global.get(\"tcount\");\ntcount = ( ++tcount) % global.get(\"tstart\");\nglobal.set(\"tcount\",tcount);\nif (tcount > 0) return null;\n\nvar newMsg = { \n    \"payload\":{\n        \"deviceId\": \"sonoff001\",\n        \"data\": {\n             \"dps\":{\n            }}}};\nlet odata = JSON.parse(msg.payload);\nnewMsg.payload.data.dps[\"_info\"] = odata[0];\nswitch(odata[1]){\n  case 0:\n     newMsg.payload.data.dps[\"_led\"] = \"gray\";\n     break;\n  case 1:\n     newMsg.payload.data.dps[\"_led\"] = \"green\";\n     break;\n  case 2:\n     newMsg.payload.data.dps[\"_led\"] = \"red\";\n     break;\n}\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node \nglobal.set(\"tstart\", 10);\nglobal.set(\"tcount\", 0);","finalize":"","x":810,"y":220,"wires":[[]]},{"id":"7a13d179.a10ed","type":"function","z":"3332031a.de38fc","name":"JSON split","func":"\nvar newMsg = { \n    \"payload\":{\n        \"deviceId\": \"sonoff001\",\n        \"data\": {\n             \"dps\":{\n            }}}};\nlet odata = JSON.parse(msg.payload);\nnewMsg.payload.data.dps[\"_mode\"] = odata[\"mode\"] ==0?\"OFF\":odata[\"mode\"] ==1?\"AUTO\":\"LOOP\";\nnewMsg.payload.data.dps[\"_ONtime\"] = odata[\"ONtime\"];\nnewMsg.payload.data.dps[\"_OFFtime\"] = odata[\"OFFtime\"];\nnewMsg.payload.data.dps[\"_PDM\"] = odata[\"PDM\"];\nnewMsg.payload.data.dps[\"_timezone\"] = odata[\"timezone\"];\n// change\nnewMsg.payload.data.dps[\"_startTime\"] = odata[\"Ttime\"];\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node \nflow.set(\"tstart\", 5);\nflow.set(\"tcount\", 0);","finalize":"","x":810,"y":260,"wires":[[]]},{"id":"938228d2.f21868","type":"function","z":"3332031a.de38fc","name":"JSON split","func":"var newMsg = { \n    \"payload\":{\n        \"deviceId\": \"sonoff001\",\n        \"data\": {\n             \"dps\":{\n            }}}};\nlet odata = JSON.parse(msg.payload);\nnewMsg.payload.data.dps[\"_mode\"] = odata[\"mode\"] ==0?\"OFF\":odata[\"mode\"] ==1?\"AUTO\":\"LOOP\";\nnewMsg.payload.data.dps[\"_PDM\"] = odata[\"PDM\"];\nnewMsg.payload.data.dps[\"_count\"] = odata[\"count\"];\n// name change\nnewMsg.payload.data.dps[\"_clock\"] = odata[\"Ttime\"];\nnewMsg.payload.data.dps[\"_switch\"] = odata[\"output\"];  //  converted by BOOLEANONOFF\nnewMsg.payload.data.dps[\"_countdown\"] = odata[\"toggle\"];\nreturn newMsg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node \nflow.set(\"tstart\", 5);\nflow.set(\"tcount\", 0);","finalize":"","x":810,"y":300,"wires":[[]]},{"id":"c8e74e64.7eafe","type":"function","z":"3332031a.de38fc","name":"SET to MQTT","func":"// SET: format change, and some name/values changes\n\nlet command = msg.payload.operation || 'SET';\nconst PREFIX = \"/ozone/timerpdm/1/\";\n\nif (command == 'SET'){\n       switch(msg.payload.dps) {\n           case '_go':    // MQTT commands\n           case '_off':\n           case '_end':\n           case '_send':\n               msg.topic=PREFIX + \"command\";\n               msg.payload = msg.payload.dps.substring(1);\n               return msg;\n           case '_refresh': // name change\n               msg.payload =\"send\";\n               msg.topic=PREFIX + \"command\";\n               return msg;\n           case '_refreshCycle':  // implementation\n               global.set(\"tstart\", msg.payload.set);\n               break;\n           case \"_mode\":     // value conversion\n                if (msg.payload.set === 'OFF')  msg.payload.set = 0;\n                if (msg.payload.set === 'AUTO') msg.payload.set = 1;\n                if (msg.payload.set === 'LOOP') msg.payload.set = 2;\n                msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                msg.topic=PREFIX + \"set\";\n                return msg;\n             case \"_startTime\":  // name change\n                 msg.payload.dps = \"+Ttime\";\n                 msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                 msg.topic=PREFIX + \"set\";\n                 return msg;\n             case \"_clock\":  // name change\n                 msg.payload.dps = \"+nowtime\";\n                 msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                 msg.topic=PREFIX + \"set\";\n                 return msg;\n           default:      // MQTT set, not name change, not value conversions\n                 msg.payload =\"{\\\"data\\\":\\\"\"+msg.payload.dps.substring(1)+\"\\\",\\\"value\\\":\\\"\"+msg.payload.set +\"\\\"}\";\n                 msg.topic=PREFIX + \"set\";\n                 return msg;\n           }\n}\nreturn null;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":280,"y":160,"wires":[["c1b5bd9e.0aff1"]]},{"id":"2e55898d.e8af66","type":"mqtt-broker","name":"PDM Ozone timer#1","broker":"192.168.1.23","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""}]