[{"id":"66ca1554.e4c85c","type":"subflow","name":"red trigger","info":"Build a REDTRG msg for tuya_bridge device.\n\nREDTRG values are in range 2000-3000 (convention)\n\nNote: it uses dp 102 (for  [Switch MS-104]). \nChange the code if your tuya-bridge device uses a different dp.","category":"","in":[{"x":60,"y":80,"wires":[{"id":"f0932848.b39158"}]}],"out":[{"x":360,"y":80,"wires":[{"id":"f0932848.b39158","port":0}]}],"env":[{"name":"TRGnumber","type":"str","value":"800"}],"color":"#A6BBCF","inputLabels":["any msg"],"outputLabels":["continue"],"icon":"font-awesome/fa-arrow-right"},{"id":"f0932848.b39158","type":"function","z":"66ca1554.e4c85c","name":"send  X TRIGGER","func":"const triggerDP = 102;  // tuya-bridge countdown\n\nif ((msg.payload.data != undefined) && (msg.payload.data.dps != undefined) && (msg.payload.data.dps[triggerDP] < 800))\n    return null;\nvar n = env.get(\"TRGnumber\");\nvar trig = {\n       \"payload\": {\n          \"dps\":triggerDP, \n          \"set\": parseInt(n)       \n          }\n}\n\nreturn trig ;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\nflow.set(\"tsstart\", null);\nflow.set(\"pingstat\",{\n      total:1,\n      test: 0,\n      sum:0,\n      min: 100000000000,\n      max:0\n});\n","finalize":"","x":210,"y":80,"wires":[[]]},{"id":"81d3b584.14c888","type":"subflow","name":"mirror msg","info":"Build an update message for 'mirror' devices.\n\nUsed to process tuyaTRIGGERS.\n\n- `deviceID`: the 'mirror' device ID or CID\n- `fakeDP`: the data point id. Convention: user defined, equal to related tuyaTRIGGER, number (1000-2000). \n- `value`: the new value\n\nnote: The 'mirror' device MUST exist in the `fake` branch of **alldevices**.","category":"","in":[{"x":120,"y":80,"wires":[{"id":"6d1b2b8f.c5e554"}]}],"out":[{"x":460,"y":80,"wires":[{"id":"6d1b2b8f.c5e554","port":0}]}],"env":[{"name":"deviceID","type":"str","value":""},{"name":"fakeDP","type":"num","value":""},{"name":"value","type":"str","value":""}],"color":"#87A980","icon":"node-red/debug.svg"},{"id":"6d1b2b8f.c5e554","type":"function","z":"81d3b584.14c888","name":"do mirror msg","func":"// local function\nfunction _sendMirror(idevice, dpname, value){\n// builds a fake OUT message \nvar newMsg = { \"payload\":{\n      \"deviceId\": idevice,\n      \"data\": {\n             \"dps\":{}\n//          \"dps\":[dpname = value]\n          }}};\nnewMsg.payload.data.dps[dpname.toString()] = value;         \nreturn newMsg;  \n}\n\nreturn _sendMirror(env.get(\"deviceID\"), env.get(\"fakeDP\"), env.get(\"value\"));","outputs":1,"noerr":0,"initialize":"","finalize":"","x":300,"y":80,"wires":[[]]},{"id":"4bebbdfa.41af64","type":"tab","label":"mirror siren","disabled":false,"info":""},{"id":"7724fe64.ce399","type":"link in","z":"4bebbdfa.41af64","name":"siren troggers IN","links":["9efb8156.f33d4"],"x":195,"y":220,"wires":[["9bff7a92.229d98"]]},{"id":"9bff7a92.229d98","type":"switch","z":"4bebbdfa.41af64","name":"triggers selector","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"eq","v":"1800","vt":"str"},{"t":"eq","v":"1810","vt":"str"},{"t":"eq","v":"1820","vt":"str"},{"t":"eq","v":"1830","vt":"str"}],"checkall":"false","repair":false,"outputs":4,"x":360,"y":220,"wires":[["dfbd21ba.05302"],["41bd356c.fc27fc"],["f0d9e484.2247c8"],["f1e0396d.6f30a8"]],"info":"for my device\ndp = 102    // countdown"},{"id":"dfbd21ba.05302","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1800: alarm ON","env":[{"name":"deviceID","value":"mirror USB siren","type":"str"},{"name":"fakeDP","value":"1800","type":"num"},{"name":"value","value":"ON","type":"str"}],"x":680,"y":180,"wires":[["54d03d6e.945994"]]},{"id":"41bd356c.fc27fc","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1810: alarm OFF","env":[{"name":"deviceID","value":"mirror USB siren","type":"str"},{"name":"fakeDP","value":"1800","type":"num"},{"name":"value","value":"OFF","type":"str"}],"x":690,"y":220,"wires":[["54d03d6e.945994"]]},{"id":"f0d9e484.2247c8","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1820: battery LOW","env":[{"name":"deviceID","value":"mirror USB siren","type":"str"},{"name":"fakeDP","value":"1820","type":"num"},{"name":"value","value":"LOW","type":"str"}],"x":690,"y":260,"wires":[["54d03d6e.945994"]]},{"id":"54d03d6e.945994","type":"link out","z":"4bebbdfa.41af64","name":"to logging","links":["9fe80f7e.f3f7e"],"x":895,"y":220,"wires":[]},{"id":"d6618ecb.a3d0b","type":"comment","z":"4bebbdfa.41af64","name":"TRIGGER device status changes (from Tuya)","info":"Switch node to select incoming TRIGGER from Tuya (status update)","x":370,"y":160,"wires":[]},{"id":"71493ceb.b6f104","type":"function","z":"4bebbdfa.41af64","name":"pick and execute","func":"// Implementation of GET/SET/SCHEMA/MULTIPLE  commands \n// for an 'abstract' device\n//    1) verify incoming command\n//    2) update the global.tuyadevice (if required)\n//    3) one output for every TRIGGER to Tuya cloud\n//\n// sirena accepts only SET, absorb all msg.\n// mapping msg to outputs\nconst DEVID = \"mirror USB siren\";\n\n// --------------- locals functions\n\n\n// find ObjDevice, using o.name or o.id or o.cid\n// limit: the type  of device. i.e.  \"real\"|\"virtual\"|\"fake\"\n// if limit == null (default): the full alldevices is used.\n// not found: return undefined.\nfunction _getObjDevice(key, limit = null) {\n    function _checkobj(list, dx) {\n   var o;\n   if (list == undefined)\n      return o;\n   o = list.find(device => device.name === dx);\n   if (o === undefined)\n      o = list.find(device => device.id === dx);\n   if (o === undefined)\n      o = list.find(device => device.cid === dx);\n   return (o);\n   }\n   function okcheck(lim, branch) {\n      return ((lim === null) || (lim === branch))\n   }\n   var odev;\n   var alld = global.get(\"alldevices\");\n   if (key === undefined)\n      return (odev);\n   if (okcheck(limit, \"real\"))\n      odev = _checkobj(alld.real, key);\n   if ((odev === undefined) && okcheck(limit, \"virtual\"))\n      odev = _checkobj(alld.virtual, key);\n   if ((odev === undefined) && okcheck(limit, \"fake\"))\n      odev = _checkobj(alld.fake, key);\n   return (odev);\n}\n\n\n function  _getodevName(odev){\n     // device name id odev.name, if exist, or odev.id\n     if(odev.name !== undefined) return odev.name;\n     return odev.id;\n }\n\n//   get odps from name or dps, in odev\nfunction _getOdevOdp(d,odev){\nvar dp ;\n  if  ((odev !== undefined) && (Array.isArray(odev.dps)))  {\n       dp = odev.dps.find(dpx => dpx.name == d);\n    if (dp === undefined)\n        dp = odev.dps.find(dpx => dpx.dp == d);\n      }\n  return (dp);   \n }\n \n// get dp name, from odev and dp-id/name \n function  _getdpName(odev, id){\n     function  _getodpName(odp){\n     // proerty  name id odp.name, if exist, or odp.dp\n         if(odp.name !== undefined) return odp.name;\n         return odp.dp;\n     }\n    var dp = _getOdevOdp(id, odev);\n     if (dp === undefined){\n         node.error([\"ERROR: not found in alldevices.'\"+odev.name+\"'(1) the dp == '\"+id+\"'\", odev]);\n         return undefined;\n        }\n     return _getodpName(dp);\n }\n\n//  set (and create, if required) global.tuyastatus structure from: dev-name, dp-name, value\n function _setGlobalValue(devname, dpname, val){\n   if((devname === undefined)||(dpname === undefined)||(val === undefined)) return;\n   var tuyastatus = global.get(\"tuyastatus\");\n   if (tuyastatus == undefined)\n      tuyastatus = {};\n   if (tuyastatus[devname] == undefined)\n      tuyastatus[devname] = {};\n   tuyastatus[devname][dpname] = val;\n   global.set(\"tuyastatus\", tuyastatus);\n}\n\n// test msg \nfunction _isGetCommand (idDev, msx) {\n return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value === undefined));\n}\n\n// test msg \nfunction _isSetCommand (idDev, msx) {\n return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value !== undefined));\n}\n\n// ------------- main\n// select and execute all commands for 'siren'\n// sirena accepts only SET, final: absorb all siren msg + error.\n\n//\nif (_isSetCommand(DEVID, msg)) {// test: is SET\n// -----------  get obj-dev and obj-dp\n   var odev =  _getObjDevice(DEVID, \"fake\");\n   var odp = _getOdevOdp( msg.payload.property, odev); \n   //\n   if (odp !== undefined)\n       switch (odp.dp){\n          case \"1800\":\n    // -----------  select by value - tolerant, accepts 'OFF','NO', 0, \"0\", \"\", [],[0],[[]], null, undefined :  see https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\n    //  language en/it\n                if ((msg.payload.value == null) || (msg.payload.value == false) || (msg.payload.value.toUpperCase() === \"OFF\") || (msg.payload.value.toUpperCase() === \"NO\"))\n                           return([msg]);  // output#1\n    // no local tuyastatus update, device update        \n                return([null, msg]);                     // output#2\n          case \"2820\":\n                if (msg.payload.value.toUpperCase() === \"ALARM\"){\n    // local tuyastatus update, device don't update        \n                   _setGlobalValue(_getodevName(odev),  _getdpName(odev, \"2820\"), \"alarm\") ;\n                   return([null,null,msg]);              // output#3\n                }\n    // todo: more setups....            \n           }\n   }\n   \n// default: warning, bad \"siren\" command \nif (msg.to === DEVID){ \n      node.warn([\"The command '\"+msg.payload.property+\"=\"+msg.payload.value+\"' is not allowed for alldevices.'\" + msg.payload.device + \"'(1)\", odev]);\n}\n// total 3 outputs\n\n","outputs":3,"noerr":0,"initialize":"","finalize":"","x":370,"y":400,"wires":[["6c452e2f.f77e"],["51abfb8.0f92a04"],["640dc09d.ea0a5"]]},{"id":"369ab28b.348ebe","type":"link in","z":"4bebbdfa.41af64","name":"siren commands IN","links":["18817677.061b9a"],"x":195,"y":400,"wires":[["71493ceb.b6f104"]]},{"id":"6c452e2f.f77e","type":"subflow:66ca1554.e4c85c","z":"4bebbdfa.41af64","name":"2800 alarm:OFF","env":[{"name":"TRGnumber","value":"2800","type":"str"}],"x":680,"y":360,"wires":[["83ab4822.a4d028"]]},{"id":"83ab4822.a4d028","type":"link out","z":"4bebbdfa.41af64","name":"to send","links":["69321d9a.30b7d4"],"x":895,"y":400,"wires":[]},{"id":"51abfb8.0f92a04","type":"subflow:66ca1554.e4c85c","z":"4bebbdfa.41af64","name":"2810 alarm:ON","env":[{"name":"TRGnumber","value":"2810","type":"str"}],"x":680,"y":400,"wires":[["83ab4822.a4d028"]]},{"id":"640dc09d.ea0a5","type":"subflow:66ca1554.e4c85c","z":"4bebbdfa.41af64","name":"2820 setup:alarm","env":[{"name":"TRGnumber","value":"2820","type":"str"}],"x":690,"y":440,"wires":[["83ab4822.a4d028"]]},{"id":"67189163.f24ea","type":"comment","z":"4bebbdfa.41af64","name":"convert commands to REDTRG (to Tuya)","info":"decodes user command and send TRIGGER to Tuya cloud","x":360,"y":340,"wires":[]},{"id":"f1dc63d6.6e4b5","type":"comment","z":"4bebbdfa.41af64","name":"case study: 'mirror' device for WiFi USB siren","info":"## **case study: alarm siren**\n\n_My ['USB alarm siren'](https://www.aliexpress.com/item/4000161671864.html) (WiFi, AC  + BATT, USD 18) don't works with `smart_tuya_devices`: all answers are undecoded strings like this:_\n````\nERROR from 'USB siren': not JSON data but HEX:332e3300000000000000efbfbd00000001efbfbdefbfbd6f300861efbfbd31efbfbd20efbfbdefbfbdefbfbd7e161610180671efbfbdefbfbdefbfbdefbfbd0451efbfbd530aefbfbdefbfbdefbfbdefbfbd08efbfbd01efbfbdefbfbddf8dc7a41eefbfbd0cefbfbd7defbfbd2ac8baefbfbd6314efbfbdefbfbdefbfbd0cefbfbd135b5f6c02efbfbd28efbfbdefbfbd2c32efbfbd0463efbfbd112f366d1d  ('3.3�\u0001��o0\ba�1� ���~\u0016\u0016\u0010\u0018\u0006q����\u0004Q�S\n����\b�\u0001��ߍǤ\u001e�\f�}�*Ⱥ�c\u0014���\f�\u0013[_l\u0002�(��,2�\u0004c�\u0011/6m\u001d')     \n````\n_But while I'm waiting for `tuyap` and `smart-tuya-device `  updates,  I need it. So I will use a 'mirror' device._\n\n**Siren capabilities** (data points), from `smartlife`:\n- `alarm`: BOOL, ON/OFF (RW)\n- `duration` of the alarm: INT, [1..60]s  (RW)\n- `battery` level: ENUM (FULL|GOOD|MEDIUM|LOW|DOWN) (RO)\n- Alarm `sound`: ENUM [1..10] (RW)\n\nThis siren can produce 10 different sounds, so it can be used also as door bell, phone repeater etc. As Alarm, sound #7 (and #8) are preferred. see EN 50131-4, EN 54-3, DIN 33404-3.\n- The local regolament fixes a max of 180s with a modulated sound, and the max volume to 100 dB (external) and 80 dB (internal). I  measured 70 dB.\n\n**'mirror' device capabilities**\n   _To reduce complexity I implement in the 'mirror' siren device only a optmized subset of siren capabilities: my interest is only on dynamic options and security issues: function ON/OFF,  the battery status._ \n   _I can implement some 'setup' automations to force 'sound' and 'duration' parameters to the correct values.  So I can still use the same device for more functions (intrusion alarm, fire alarm, door bell...) using different 'setup'._\n   The rule is simple: fire anyway the required 'setup' before to do the ON command.\n\n_status update_  events from device:\n````\n   - alarm:ON                         trigger 1800\n   - alarm:OFF                        trigger 1810\n            (two triggers are required for a BOOL status)\n   - battery level:LOW                trigger 1820\n   - battery level:DOWN               trigger 1820  \n            (The automations does a battery status polling every 24H)\n   - setup:alarm                      trigger 1830\n            (echo send by siren2820 automation)\n   - setup:todo (reserved)            trigger 1840, 1850 \n ````     \n_commands node-red => device_ to change status:\n ````\n   - SET alarm:OFF                    trigger 2800\n   - SET alarm:ON                     trigger 2810\n   - SET setup:alarm                  trigger 2820\n   - SET setup:todo (reserved)        trigger 2830, 2840 \n````\n\nTotal count is 7 automations on  `smartlife`, all called 'sirenXXXXY' for semplicity.\n\n## In `alldevice.fake` the description is: \n````\n\t\t{\n\t\t\t\"id\": \"mirror USB siren\",\n\t\t\t\"name\": \"USB siren\",\n\t\t\t\"power\": \"UPS\",\n\t\t\t\"capability\":[\"SET\"],\n\t\t\t\"comment\": \"WiFi siren, HEX data:disabled, mirror\",\n\t\t\t\"dps\": [\n\t\t\t\t{\n\t\t\t\t\t\"dp\": \"1800\",\n\t\t\t\t\t\"name\": \"alarm\",\n\t\t\t        \"comment\": \"values: ON|OFF, updated RT from device\",\n\t\t\t\t\t\"capability\":\"WO\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"dp\": \"1830\",\n\t\t\t\t\t\"name\": \"setup\",\n\t\t\t        \"comment\": \"values: alarm|(more todo), local update\",\n\t\t\t\t\t\"capability\":\"WO\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"dp\": \"1820\",\n\t\t\t\t\t\"name\": \"battery\",\n\t\t\t        \"comment\": \"values: OK(default)|LOW, PUSH 24H from device\",\n\t\t\t\t\t\"capability\":\"TRG\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n````\nThe flow \"Siren device\" implements that. _You CAN put all your 'mirror' devices on **\"tuyaTRIGGER\"** flow, but I keep this flow separate to make it a simpler example_.\n\n\n## Here the automations in _smartlife_:\n\n- siren1800: ` if \"siren\"alarm:off, \"tuya_bridge\"countdown:1800`\n- siren1810: ` if \"siren\"alarm:on, \"tuya_bridge\"countdown:1810`\n- siren1820A:` if \"siren\"battery:Low,\"tuya_bridge\"countdown:1820`    (+ timer: 3:00H every day)\n- siren1820B:` if \"siren\"battery:critic,\"tuya_bridge\"countdown:1820` (+ timer: 3:00H every day)\n\n- siren2800:  ` if \"tuya_bridge\"countdown:2800, \"siren\"alarm:off + \"tuya_bridge\"countdown:0`\n- siren2810:  ` if \"tuya_bridge\"countdown:2810, \"siren\"alarm:on + \"tuya_bridge\"countdown:0`\n- siren2820:   `if \"tuya_bridge\"countdown:2820, \"siren\"durata:20 + \"siren\"type:7 + \"tuya_bridge\"countdown:1830`\n                 (this automation don't send ACK. If required add \"tuya_bridge\"countdown:0 + delay(1) before to send 1830)\n\n## Implementation\n\n- The siren `smart-tuya-device` node can be disabled in **tuyaDAEMON**, to cancel HEX data on debug pad.\n- You can use this _siren device_ as a template for _custom 'mirror' devices_: you obviously need to modify the nodes in the flow. And the  `pick and execute`  node code needs to be updated as well.\n\n\n","x":310,"y":100,"wires":[]},{"id":"f1e0396d.6f30a8","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1830: setup  alarm","env":[{"name":"deviceID","value":"mirror USB siren","type":"str"},{"name":"fakeDP","value":"1830","type":"num"},{"name":"value","value":"LOW","type":"str"}],"x":690,"y":300,"wires":[["54d03d6e.945994"]]}]