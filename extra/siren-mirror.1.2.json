[{"id":"66ca1554.e4c85c","type":"subflow","name":"red trigger","info":"Build a REDTRG msg for tuya_bridge device.\n\nREDTRG values are in range 2000-3000 (convention)\n\nNote: it uses dp 102 (for  [Switch MS-104]). \nChange the code if your tuya-bridge device uses a different dp.","category":"","in":[{"x":60,"y":80,"wires":[{"id":"f0932848.b39158"}]}],"out":[{"x":360,"y":80,"wires":[{"id":"f0932848.b39158","port":0}]}],"env":[{"name":"TRGnumber","type":"str","value":"800"}],"color":"#A6BBCF","inputLabels":["any msg"],"outputLabels":["continue"],"icon":"font-awesome/fa-arrow-right"},{"id":"f0932848.b39158","type":"function","z":"66ca1554.e4c85c","name":"send  X TRIGGER","func":"const triggerDP = 102;  // tuya-bridge countdown\n// normal use: no msg.payload.data.dps[triggerDP]\n// ack use:   msg.payload.data.dps[triggerDP] > 800\n if ((msg.payload.data != undefined) && (msg.payload.data.dps != undefined) && (msg.payload.data.dps[triggerDP] < 800))\n    return null;\nvar n = env.get(\"TRGnumber\");\nvar trig = {\n       \"payload\": {\n          \"dps\":triggerDP, \n          \"set\": parseInt(n)       \n          }\n}\n\nreturn trig ;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\nflow.set(\"tsstart\", null);\nflow.set(\"pingstat\",{\n      total:1,\n      test: 0,\n      sum:0,\n      min: 100000000000,\n      max:0\n});\n","finalize":"","x":210,"y":80,"wires":[[]]},{"id":"81d3b584.14c888","type":"subflow","name":"mirror msg","info":"Build an update message for 'mirror' devices.\n\nUsed to process tuyaTRIGGERS.\n\n- `deviceID`: the 'mirror' device ID or CID\n- `fakeDP`: the data point id. Convention: user defined, equal to related tuyaTRIGGER, number (1000-2000). \n- `value`: the new value. If the value starts with '@', then it is eval()ued: exemple '@msg.payoad.set' => eval('msg.payoad.set'))\n\nnote: The 'mirror' device MUST exist in the `fake` branch of **alldevices**.","category":"","in":[{"x":120,"y":80,"wires":[{"id":"6d1b2b8f.c5e554"}]}],"out":[{"x":460,"y":80,"wires":[{"id":"6d1b2b8f.c5e554","port":0}]}],"env":[{"name":"deviceID","type":"str","value":""},{"name":"fakeDP","type":"str","value":""},{"name":"value","type":"str","value":""}],"color":"#87A980","icon":"node-red/debug.svg"},{"id":"6d1b2b8f.c5e554","type":"function","z":"81d3b584.14c888","name":"do mirror msg","func":"// local function\n// note: the value param can also be a @variable:\n//e.g. \"@msg.payload.set\" => eval(msg.payload.set) \nfunction _sendMirror(idevice, dpname, value) {\n    // builds a fake OUT message\n    var newMsg = {\n        \"payload\": {\n            \"deviceId\": idevice,\n            \"data\": {\n                \"dps\": {}\n                //          \"dps\":[dpname = value]\n            }\n        }\n    };\n    value = value.trim();\n    if (value.startsWith('@')){\n        value = eval(value.substring(1));\n    }\n    newMsg.payload.data.dps[dpname.toString()] = value;\n    return newMsg;\n}\n\nreturn _sendMirror(env.get(\"deviceID\"), env.get(\"fakeDP\"), env.get(\"value\"));\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":300,"y":80,"wires":[[]]},{"id":"4bebbdfa.41af64","type":"tab","label":"tuyaDAEMON.mirror","disabled":false,"info":"This flow contains all mirror devices on the system"},{"id":"7724fe64.ce399","type":"link in","z":"4bebbdfa.41af64","name":"siren troggers IN","links":["9efb8156.f33d4","470e4807.b4b4f8","8ab4238e.8fc8c"],"x":195,"y":220,"wires":[["9bff7a92.229d98"]]},{"id":"9bff7a92.229d98","type":"switch","z":"4bebbdfa.41af64","name":"siren","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"eq","v":"1800","vt":"str"},{"t":"eq","v":"1810","vt":"str"},{"t":"eq","v":"1820","vt":"str"},{"t":"eq","v":"1830","vt":"str"}],"checkall":"false","repair":false,"outputs":4,"x":330,"y":220,"wires":[["dfbd21ba.05302"],["41bd356c.fc27fc"],["f0d9e484.2247c8"],["50659a72.879d14"]],"info":"for my device\ndp = 102    // countdown"},{"id":"dfbd21ba.05302","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"to log 1800: alarm ON","env":[{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"},{"name":"fakeDP","value":"1800","type":"num"},{"name":"value","value":"ON","type":"str"}],"x":700,"y":180,"wires":[["54d03d6e.945994"]]},{"id":"41bd356c.fc27fc","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"to log 1810: alarm OFF","env":[{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"},{"name":"fakeDP","value":"1800","type":"num"},{"name":"value","value":"OFF","type":"str"}],"x":710,"y":220,"wires":[["54d03d6e.945994"]]},{"id":"f0d9e484.2247c8","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"to log 1820: battery LOW","env":[{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"},{"name":"fakeDP","value":"1820","type":"num"},{"name":"value","value":"LOW","type":"str"}],"x":710,"y":260,"wires":[["54d03d6e.945994"]]},{"id":"54d03d6e.945994","type":"link out","z":"4bebbdfa.41af64","name":"to logging","links":["9fe80f7e.f3f7e"],"x":955,"y":220,"wires":[]},{"id":"d6618ecb.a3d0b","type":"comment","z":"4bebbdfa.41af64","name":"converts TUYATRG to device status changes","info":"Switch node to select incoming TRIGGER from Tuya (status update)\nThe selected TUYATRG are converted to device/property/value and sended to tuyaDAEMON ('to logging' link) for standard processing","x":370,"y":160,"wires":[]},{"id":"71493ceb.b6f104","type":"function","z":"4bebbdfa.41af64","name":"pick and execute","func":"// Implementation of GET/SET/SCHEMA/MULTIPLE  commands \n// for an 'abstract' device\n//    1) verify incoming command\n//    2) update the global.tuyadevice (if required)\n//    3) one output for every TRIGGER to Tuya cloud\n//\n// sirena accepts only SET, absorb all msg.\n// version 1.1 (use of _callJSONMethod)\n// --------------- locals\nvar alld = global.get(\"alldevices\");\n\n// local functions:\nfunction _callJSONMethod(obj, fname, a, b, c, d) {\n    // see: https://stackoverflow.com/questions/49125059/how-to-pass-parameters-to-an-eval-based-function-injavascript\n    var wrap = s => \"{ return \" + obj[fname] + \" };\" //return the block having function expression\n    var func = new Function(wrap(obj[fname]));       // ignore âš \n    return func.call(null).call(obj, a, b, c, d);    //invoke the function using arguments\n}\n\n// test: idDev GET command? \nfunction _isGetCommand (idDev, msx) {\n return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value === undefined));\n}\n\n// test: idDev SET command? \nfunction _isSetCommand (idDev, msx) {\n return ((msx.to === idDev) && (msx.payload.property !== undefined) && (msx.payload.value !== undefined));\n}\n\n\n//  set (and create, if required) global.tuyastatus structure from: dev-name, dp-name, value\n function _setGlobalValue(devname, dpname, val){\n   if((devname === undefined)||(dpname === undefined)||(val === undefined)) return;\n   var tuyastatus = global.get(\"tuyastatus\");\n   if (tuyastatus == undefined)\n      tuyastatus = {};\n   if (tuyastatus[devname] == undefined)\n      tuyastatus[devname] = {};\n   tuyastatus[devname][dpname] = val;\n   global.set(\"tuyastatus\", tuyastatus);\n}\n\n// ------------- main\n// select and execute all commands for 'siren'\n// sirena accepts only SET, final: absorb all siren msg + error.\n\n// mapping msg to outputs\nconst DEVID = \"42027807d8bfc0c5831e\";\n//\nif (_isSetCommand(DEVID, msg)) {// test: is SET\n// -----------  get obj-dev and obj-dp\n // find object dp\n    var oDev = _callJSONMethod(alld, \"__getODev\", DEVID, \"fake\");\n    var oPx  = _callJSONMethod(alld, \"__getODps\", oDev,  msg.payload.property);\n  //\n   if (oPx !== undefined)\n       switch (oPx.dp){\n          case \"1800\":\n    // -----------  select by value - tolerant, accepts 'OFF','NO', 0, \"0\", \"\", [],[0],[[]], null, undefined :  see https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\n    //  language en/it\n                if ((msg.payload.value == null) || (msg.payload.value == false) || (msg.payload.value.toUpperCase() === \"OFF\") || (msg.payload.value.toUpperCase() === \"NO\"))\n                           return([msg]);  // output#1\n    // no local tuyastatus update, device update        \n                return([null, msg]);                     // output#2\n          case \"1830\":\n                if (msg.payload.value.toUpperCase() === \"ALARM\"){\n     // local tuyastatus update, if the device don't update (better if automation update)\n     //    devName = odev.name == undefined ? odev.id : odev.name;\n     //    dpName  = oPx.name== undefined ? oPx.dp : oPx.name;\n     //   _setGlobalValue(devName, dpName, \"alarm\") ;\n                   return([null,null,msg]);              // output#3\n                }\n    // todo: more setups....            \n           }\n   }\n   \n// default: warning, bad \"siren\" command \nif (msg.to === DEVID){ \n      node.warn([\"The command '\"+msg.payload.property+\"=\"+msg.payload.value+\"' is unknow for siren device.'\" + msg.payload.device + \"'(1)\", odev]);\n}\n// total 3 outputs\n\n","outputs":3,"noerr":0,"initialize":"","finalize":"","x":350,"y":400,"wires":[["6c452e2f.f77e"],["51abfb8.0f92a04"],["640dc09d.ea0a5"]]},{"id":"369ab28b.348ebe","type":"link in","z":"4bebbdfa.41af64","name":"siren commands IN","links":["18817677.061b9a"],"x":195,"y":400,"wires":[["71493ceb.b6f104"]]},{"id":"6c452e2f.f77e","type":"subflow:66ca1554.e4c85c","z":"4bebbdfa.41af64","name":"2800 alarm:OFF","env":[{"name":"TRGnumber","value":"2800","type":"str"}],"x":680,"y":360,"wires":[["83ab4822.a4d028"]]},{"id":"83ab4822.a4d028","type":"link out","z":"4bebbdfa.41af64","name":"to send","links":["69321d9a.30b7d4"],"x":955,"y":400,"wires":[]},{"id":"51abfb8.0f92a04","type":"subflow:66ca1554.e4c85c","z":"4bebbdfa.41af64","name":"2810 alarm:ON","env":[{"name":"TRGnumber","value":"2810","type":"str"}],"x":680,"y":400,"wires":[["83ab4822.a4d028"]]},{"id":"640dc09d.ea0a5","type":"subflow:66ca1554.e4c85c","z":"4bebbdfa.41af64","name":"2820 setup:alarm","env":[{"name":"TRGnumber","value":"2820","type":"str"}],"x":690,"y":440,"wires":[["83ab4822.a4d028"]]},{"id":"67189163.f24ea","type":"comment","z":"4bebbdfa.41af64","name":"converts SET requests to REDTRG (for Tuya)","info":"For 'mirror' and 'fake' devices:\nThis custom flow decodes user command relatives to a device:\n\nBased on device(/propery(/value)) this flow can:\n  - do local processing\n  - send REDTRG to Tuya-cloud\n  - produce a WARNING","x":370,"y":340,"wires":[]},{"id":"f1dc63d6.6e4b5","type":"comment","z":"4bebbdfa.41af64","name":"case study: 'mirror' device for WiFi USB siren","info":"## **case study: alarm siren**\n\nsee https://github.com/msillano/tuyaDAEMON/wiki/mirror-device-'Alarm_Siren':-case-study","x":310,"y":100,"wires":[]},{"id":"50659a72.879d14","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"to log 1830: setup:alarm","env":[{"name":"deviceID","value":"42027807d8bfc0c5831e","type":"str"},{"name":"fakeDP","value":"1830","type":"num"},{"name":"value","value":"alarm","type":"str"}],"x":710,"y":300,"wires":[["54d03d6e.945994"]]},{"id":"f3a399b4.d43028","type":"comment","z":"4bebbdfa.41af64","name":"Door_Sensor","info":"'mirror' device\n\nsee https://github.com/msillano/tuyaDAEMON/blob/main/devices/Door_Sensor/device_Door_Sensor.pdf","x":270,"y":500,"wires":[]},{"id":"8d12f398.d07e","type":"switch","z":"4bebbdfa.41af64","name":"main door","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"eq","v":"1030","vt":"str"},{"t":"eq","v":"1040","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":340,"y":560,"wires":[["a873b4f2.725588"],["e5ca8ffd.7b59d"]],"info":"for my device\ndp = 102    // countdown"},{"id":"e5ca8ffd.7b59d","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1040: inject door open ON","env":[{"name":"deviceID","value":"04208127d8bfc0dac0e5","type":"str"},{"name":"fakeDP","value":"1030","type":"num"},{"name":"value","value":"true","type":"bool"}],"x":710,"y":580,"wires":[["7b505949.7ba1e8"]]},{"id":"a873b4f2.725588","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1030: inject door open OFF","env":[{"name":"deviceID","value":"04208127d8bfc0dac0e5","type":"str"},{"name":"fakeDP","value":"1030","type":"num"},{"name":"value","value":"false","type":"bool"}],"x":720,"y":540,"wires":[["7b505949.7ba1e8"]]},{"id":"d3e4089a.6570c8","type":"link in","z":"4bebbdfa.41af64","name":"siren troggers IN","links":["9efb8156.f33d4","470e4807.b4b4f8","8ab4238e.8fc8c"],"x":195,"y":560,"wires":[["8d12f398.d07e"]]},{"id":"7b505949.7ba1e8","type":"link out","z":"4bebbdfa.41af64","name":"to logging","links":["9fe80f7e.f3f7e"],"x":955,"y":560,"wires":[]},{"id":"598a86b4.d36608","type":"comment","z":"4bebbdfa.41af64","name":"PIR_Sensor","info":"'irror' dvice\n\nsee https://github.com/msillano/tuyaDAEMON/blob/main/devices/PIR_motion/device_PIR_motion.pdf","x":270,"y":640,"wires":[]},{"id":"1724d873.b02078","type":"switch","z":"4bebbdfa.41af64","name":"PIR living","property":"payload.tuyatrigger","propertyType":"msg","rules":[{"t":"eq","v":"1010","vt":"str"},{"t":"eq","v":"1020","vt":"str"}],"checkall":"false","repair":false,"outputs":2,"x":340,"y":700,"wires":[["9703837e.8a885"],["70807d28.e60d84"]],"info":"for my device\ndp = 102    // countdown"},{"id":"3246c6c8.f9ed9a","type":"link in","z":"4bebbdfa.41af64","name":"siren troggers IN","links":["9efb8156.f33d4","470e4807.b4b4f8","8ab4238e.8fc8c"],"x":195,"y":700,"wires":[["1724d873.b02078"]]},{"id":"bbd1da58.dba9c8","type":"link out","z":"4bebbdfa.41af64","name":"to logging","links":["9fe80f7e.f3f7e"],"x":955,"y":700,"wires":[]},{"id":"9703837e.8a885","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1010: inject PIR alarm OFF","env":[{"name":"deviceID","value":"733710408caab5e79887","type":"str"},{"name":"fakeDP","value":"1010","type":"str"},{"name":"value","value":"false","type":"bool"}],"x":720,"y":680,"wires":[["bbd1da58.dba9c8"]]},{"id":"70807d28.e60d84","type":"subflow:81d3b584.14c888","z":"4bebbdfa.41af64","name":"1020: inject PIR alarm ON","env":[{"name":"deviceID","value":"733710408caab5e79887","type":"str"},{"name":"fakeDP","value":"1010","type":"num"},{"name":"value","value":"true","type":"bool"}],"x":710,"y":720,"wires":[["bbd1da58.dba9c8"]]}]